
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  000019a8  00001a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080015a  0080015a  00001a96  2**0
                  ALLOC
  3 .debug_aranges 00000310  00000000  00000000  00001a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008a2  00000000  00000000  00001da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004f4b  00000000  00000000  00002648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001432  00000000  00000000  00007593  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004240  00000000  00000000  000089c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004a0  00000000  00000000  0000cc08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000207b  00000000  00000000  0000d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002ad3  00000000  00000000  0000f123  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003b0  00000000  00000000  00011bf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	98 c0       	rjmp	.+304    	; 0x136 <__bad_interrupt>
	pq->numItems--;
	
	return element;
}

void PQUpdate(PQ pq, ItemPQ element) {
       6:	00 00       	nop
       8:	96 c0       	rjmp	.+300    	; 0x136 <__bad_interrupt>
       a:	00 00       	nop
       c:	94 c0       	rjmp	.+296    	; 0x136 <__bad_interrupt>
       e:	00 00       	nop
      10:	92 c0       	rjmp	.+292    	; 0x136 <__bad_interrupt>
      12:	00 00       	nop
      14:	90 c0       	rjmp	.+288    	; 0x136 <__bad_interrupt>
      16:	00 00       	nop
      18:	8e c0       	rjmp	.+284    	; 0x136 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8c c0       	rjmp	.+280    	; 0x136 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8a c0       	rjmp	.+276    	; 0x136 <__bad_interrupt>
      22:	00 00       	nop
      24:	88 c0       	rjmp	.+272    	; 0x136 <__bad_interrupt>
      26:	00 00       	nop
      28:	86 c0       	rjmp	.+268    	; 0x136 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c5       	rjmp	.+2796   	; 0xb1a <__vector_11>
      2e:	00 00       	nop
      30:	39 c5       	rjmp	.+2674   	; 0xaa4 <__vector_12>
      32:	00 00       	nop
      34:	80 c0       	rjmp	.+256    	; 0x136 <__bad_interrupt>
      36:	00 00       	nop
      38:	7e c0       	rjmp	.+252    	; 0x136 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7c c0       	rjmp	.+248    	; 0x136 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7a c0       	rjmp	.+244    	; 0x136 <__bad_interrupt>
      42:	00 00       	nop
      44:	78 c0       	rjmp	.+240    	; 0x136 <__bad_interrupt>
      46:	00 00       	nop
      48:	76 c0       	rjmp	.+236    	; 0x136 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	74 c0       	rjmp	.+232    	; 0x136 <__bad_interrupt>
      4e:	00 00       	nop
      50:	72 c0       	rjmp	.+228    	; 0x136 <__bad_interrupt>
      52:	00 00       	nop
      54:	de c2       	rjmp	.+1468   	; 0x612 <__vector_21>
      56:	00 00       	nop
      58:	6e c0       	rjmp	.+220    	; 0x136 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6c c0       	rjmp	.+216    	; 0x136 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6a c0       	rjmp	.+212    	; 0x136 <__bad_interrupt>
      62:	00 00       	nop
      64:	68 c0       	rjmp	.+208    	; 0x136 <__bad_interrupt>
      66:	00 00       	nop
      68:	66 c0       	rjmp	.+204    	; 0x136 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	64 c0       	rjmp	.+200    	; 0x136 <__bad_interrupt>
      6e:	00 00       	nop
      70:	62 c0       	rjmp	.+196    	; 0x136 <__bad_interrupt>
      72:	00 00       	nop
      74:	60 c0       	rjmp	.+192    	; 0x136 <__bad_interrupt>
      76:	00 00       	nop
      78:	5e c0       	rjmp	.+188    	; 0x136 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5c c0       	rjmp	.+184    	; 0x136 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5a c0       	rjmp	.+180    	; 0x136 <__bad_interrupt>
      82:	00 00       	nop
      84:	58 c0       	rjmp	.+176    	; 0x136 <__bad_interrupt>
      86:	00 00       	nop
      88:	56 c0       	rjmp	.+172    	; 0x136 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	54 c0       	rjmp	.+168    	; 0x136 <__bad_interrupt>
      8e:	00 00       	nop
      90:	52 c0       	rjmp	.+164    	; 0x136 <__bad_interrupt>
      92:	00 00       	nop
      94:	50 c0       	rjmp	.+160    	; 0x136 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 00 00 00 08 c0 16 dc 05 01 00 01 02     ................
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff ff     .. .....2.......
      ba:	ff 00 07 05 81 00 40 00 05 07 05 02 00 40 00 05     ......@......@..

000000ca <LanguageString>:
      ca:	04 03 09 04                                         ....

000000ce <ManufacturerString>:
      ce:	18 03 4a 00 6f 00 6e 00 61 00 68 00 20 00 4d 00     ..J.o.n.a.h. .M.
      de:	65 00 67 00 67 00 73 00 00 00                       e.g.g.s...

000000e8 <ProductString>:
      e8:	14 03 43 00 61 00 70 00 53 00 6f 00 72 00 74 00     ..C.a.p.S.o.r.t.
      f8:	65 00 72 00 00 00                                   e.r...

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d2 e0       	ldi	r29, 0x02	; 2
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	e8 ea       	ldi	r30, 0xA8	; 168
     112:	f9 e1       	ldi	r31, 0x19	; 25
     114:	02 c0       	rjmp	.+4      	; 0x11a <.do_copy_data_start>

00000116 <.do_copy_data_loop>:
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0

0000011a <.do_copy_data_start>:
     11a:	aa 35       	cpi	r26, 0x5A	; 90
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <.do_copy_data_loop>

00000120 <__do_clear_bss>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	aa e5       	ldi	r26, 0x5A	; 90
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	a0 38       	cpi	r26, 0x80	; 128
     12c:	b1 07       	cpc	r27, r17
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	08 d2       	rcall	.+1040   	; 0x542 <main>
     132:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <_exit>

00000136 <__bad_interrupt>:
     136:	64 cf       	rjmp	.-312    	; 0x0 <__vectors>

00000138 <led_strip_write>:
int cpos = 0;
int spos = 0;
int div = 0;

void __attribute__((noinline)) led_strip_write(rgb_color * colors, uint16_t count)
{
     138:	fc 01       	movw	r30, r24
	// Set the pin to be an output driving low.
	LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
     13a:	42 98       	cbi	0x08, 2	; 8
	LED_STRIP_DDR |= (1<<LED_STRIP_PIN);
     13c:	3a 9a       	sbi	0x07, 2	; 7

	cli();   // Disable interrupts temporarily because we don't want our pulse timing to be messed up.
     13e:	f8 94       	cli
     140:	1d c0       	rjmp	.+58     	; 0x17c <led_strip_asm_end20+0x4>
	while (count--)
	{
		// Send a color to the LED strip.
		// The assembly below also increments the 'colors' pointer,
		// it will be pointing to the next color at the end of this loop.
		asm volatile (
     142:	01 90       	ld	r0, Z+
     144:	00 80       	ld	r0, Z
     146:	07 d0       	rcall	.+14     	; 0x156 <send_led_strip_byte20>
     148:	02 90       	ld	r0, -Z
     14a:	05 d0       	rcall	.+10     	; 0x156 <send_led_strip_byte20>
     14c:	01 90       	ld	r0, Z+
     14e:	01 90       	ld	r0, Z+
     150:	01 90       	ld	r0, Z+
     152:	01 d0       	rcall	.+2      	; 0x156 <send_led_strip_byte20>
     154:	11 c0       	rjmp	.+34     	; 0x178 <led_strip_asm_end20>

00000156 <send_led_strip_byte20>:
     156:	07 d0       	rcall	.+14     	; 0x166 <send_led_strip_bit20>
     158:	06 d0       	rcall	.+12     	; 0x166 <send_led_strip_bit20>
     15a:	05 d0       	rcall	.+10     	; 0x166 <send_led_strip_bit20>
     15c:	04 d0       	rcall	.+8      	; 0x166 <send_led_strip_bit20>
     15e:	03 d0       	rcall	.+6      	; 0x166 <send_led_strip_bit20>
     160:	02 d0       	rcall	.+4      	; 0x166 <send_led_strip_bit20>
     162:	01 d0       	rcall	.+2      	; 0x166 <send_led_strip_bit20>
     164:	00 c0       	rjmp	.+0      	; 0x166 <send_led_strip_bit20>

00000166 <send_led_strip_bit20>:
     166:	00 1c       	adc	r0, r0
     168:	42 9a       	sbi	0x08, 2	; 8
     16a:	08 f0       	brcs	.+2      	; 0x16e <send_led_strip_bit20+0x8>
     16c:	42 98       	cbi	0x08, 2	; 8
     16e:	00 00       	nop
     170:	00 00       	nop
     172:	08 f4       	brcc	.+2      	; 0x176 <send_led_strip_bit20+0x10>
     174:	42 98       	cbi	0x08, 2	; 8
     176:	08 95       	ret

00000178 <led_strip_asm_end20>:
     178:	61 50       	subi	r22, 0x01	; 1
     17a:	70 40       	sbci	r23, 0x00	; 0
	// Set the pin to be an output driving low.
	LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
	LED_STRIP_DDR |= (1<<LED_STRIP_PIN);

	cli();   // Disable interrupts temporarily because we don't want our pulse timing to be messed up.
	while (count--)
     17c:	61 15       	cp	r22, r1
     17e:	71 05       	cpc	r23, r1
     180:	09 f0       	breq	.+2      	; 0x184 <led_strip_asm_end20+0xc>
     182:	df cf       	rjmp	.-66     	; 0x142 <led_strip_write+0xa>
		);

		// Uncomment the line below to temporarily enable interrupts between each color.
		//sei(); asm volatile("nop\n"); cli();
	}
	sei();          // Re-enable interrupts now that we are done.
     184:	78 94       	sei
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     186:	85 ed       	ldi	r24, 0xD5	; 213
     188:	8a 95       	dec	r24
     18a:	f1 f7       	brne	.-4      	; 0x188 <led_strip_asm_end20+0x10>
	_delay_us(80);  // Send the reset signal.
}
     18c:	08 95       	ret

0000018e <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
     18e:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     190:	92 30       	cpi	r25, 0x02	; 2
     192:	49 f0       	breq	.+18     	; 0x1a6 <CALLBACK_USB_GetDescriptor+0x18>
     194:	93 30       	cpi	r25, 0x03	; 3
     196:	61 f0       	breq	.+24     	; 0x1b0 <CALLBACK_USB_GetDescriptor+0x22>
     198:	91 30       	cpi	r25, 0x01	; 1
     19a:	f9 f4       	brne	.+62     	; 0x1da <CALLBACK_USB_GetDescriptor+0x4c>
     19c:	e8 e9       	ldi	r30, 0x98	; 152
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	22 e1       	ldi	r18, 0x12	; 18
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	1e c0       	rjmp	.+60     	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x54>
     1a6:	ea ea       	ldi	r30, 0xAA	; 170
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	20 e2       	ldi	r18, 0x20	; 32
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	19 c0       	rjmp	.+50     	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	49 f0       	breq	.+18     	; 0x1c6 <CALLBACK_USB_GetDescriptor+0x38>
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	18 f0       	brcs	.+6      	; 0x1be <CALLBACK_USB_GetDescriptor+0x30>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	79 f4       	brne	.+30     	; 0x1da <CALLBACK_USB_GetDescriptor+0x4c>
     1bc:	08 c0       	rjmp	.+16     	; 0x1ce <CALLBACK_USB_GetDescriptor+0x40>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1be:	ea ec       	ldi	r30, 0xCA	; 202
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	84 91       	lpm	r24, Z+
     1c4:	07 c0       	rjmp	.+14     	; 0x1d4 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1c6:	ee ec       	ldi	r30, 0xCE	; 206
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	84 91       	lpm	r24, Z+
     1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1ce:	e8 ee       	ldi	r30, 0xE8	; 232
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	84 91       	lpm	r24, Z+
     1d4:	28 2f       	mov	r18, r24
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <CALLBACK_USB_GetDescriptor+0x54>
     1da:	e0 e0       	ldi	r30, 0x00	; 0
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     1e2:	ed 93       	st	X+, r30
     1e4:	fc 93       	st	X, r31
	return Size;
}
     1e6:	c9 01       	movw	r24, r18
     1e8:	08 95       	ret

000001ea <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
     1ea:	cf 92       	push	r12
     1ec:	df 92       	push	r13
     1ee:	ef 92       	push	r14
     1f0:	ff 92       	push	r15
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
     1f6:	df 93       	push	r29
     1f8:	cf 93       	push	r28
     1fa:	0f 92       	push	r0
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
	char offset;
	if (USB_ControlRequest.bmRequestType != 0x40) return;
     200:	80 91 6e 01 	lds	r24, 0x016E
     204:	80 34       	cpi	r24, 0x40	; 64
     206:	09 f0       	breq	.+2      	; 0x20a <EVENT_USB_Device_ControlRequest+0x20>
     208:	7e c1       	rjmp	.+764    	; 0x506 <__stack+0x207>
	//PORTD ^= 0x40;
	ItemPQ item;
	item.key = USB_ControlRequest.bRequest;
     20a:	10 91 6f 01 	lds	r17, 0x016F
     20e:	c1 2e       	mov	r12, r17
     210:	dd 24       	eor	r13, r13
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     212:	80 91 e8 00 	lds	r24, 0x00E8
     216:	87 7f       	andi	r24, 0xF7	; 247
     218:	80 93 e8 00 	sts	0x00E8, r24
	//char offset = ((char)USB_ControlRequest.bRequest)>>5;
	//char offset = 0;
	int delay = 85;
	int mul = 2;
	Endpoint_ClearSETUP();
	Endpoint_Read_Control_Stream_LE(&offset, 1);
     21c:	ce 01       	movw	r24, r28
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	fb d2       	rcall	.+1526   	; 0x81c <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     226:	80 91 e8 00 	lds	r24, 0x00E8
     22a:	8e 77       	andi	r24, 0x7E	; 126
     22c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();
	switch(item.key) { // custom command is in the bRequest field
     230:	14 30       	cpi	r17, 0x04	; 4
     232:	09 f4       	brne	.+2      	; 0x236 <EVENT_USB_Device_ControlRequest+0x4c>
     234:	9c c0       	rjmp	.+312    	; 0x36e <__stack+0x6f>
     236:	15 30       	cpi	r17, 0x05	; 5
     238:	50 f4       	brcc	.+20     	; 0x24e <EVENT_USB_Device_ControlRequest+0x64>
     23a:	12 30       	cpi	r17, 0x02	; 2
     23c:	09 f4       	brne	.+2      	; 0x240 <EVENT_USB_Device_ControlRequest+0x56>
     23e:	40 c0       	rjmp	.+128    	; 0x2c0 <EVENT_USB_Device_ControlRequest+0xd6>
     240:	13 30       	cpi	r17, 0x03	; 3
     242:	08 f0       	brcs	.+2      	; 0x246 <EVENT_USB_Device_ControlRequest+0x5c>
     244:	66 c0       	rjmp	.+204    	; 0x312 <__stack+0x13>
     246:	11 30       	cpi	r17, 0x01	; 1
     248:	09 f0       	breq	.+2      	; 0x24c <EVENT_USB_Device_ControlRequest+0x62>
     24a:	43 c1       	rjmp	.+646    	; 0x4d2 <__stack+0x1d3>
     24c:	0a c0       	rjmp	.+20     	; 0x262 <EVENT_USB_Device_ControlRequest+0x78>
     24e:	16 30       	cpi	r17, 0x06	; 6
     250:	09 f4       	brne	.+2      	; 0x254 <EVENT_USB_Device_ControlRequest+0x6a>
     252:	e5 c0       	rjmp	.+458    	; 0x41e <__stack+0x11f>
     254:	16 30       	cpi	r17, 0x06	; 6
     256:	08 f4       	brcc	.+2      	; 0x25a <EVENT_USB_Device_ControlRequest+0x70>
     258:	b6 c0       	rjmp	.+364    	; 0x3c6 <__stack+0xc7>
     25a:	17 30       	cpi	r17, 0x07	; 7
     25c:	09 f0       	breq	.+2      	; 0x260 <EVENT_USB_Device_ControlRequest+0x76>
     25e:	39 c1       	rjmp	.+626    	; 0x4d2 <__stack+0x1d3>
     260:	0a c1       	rjmp	.+532    	; 0x476 <__stack+0x177>
		case 1:
			item.value = curr_time+1.15625*(202-offset*mul)-delay+3;
     262:	60 91 66 01 	lds	r22, 0x0166
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	88 27       	eor	r24, r24
     26a:	77 fd       	sbrc	r23, 7
     26c:	80 95       	com	r24
     26e:	98 2f       	mov	r25, r24
     270:	0e 94 a3 09 	call	0x1346	; 0x1346 <__floatsisf>
     274:	7b 01       	movw	r14, r22
     276:	8c 01       	movw	r16, r24
     278:	29 81       	ldd	r18, Y+1	; 0x01
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	22 0f       	add	r18, r18
     27e:	33 1f       	adc	r19, r19
     280:	6a ec       	ldi	r22, 0xCA	; 202
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	62 1b       	sub	r22, r18
     286:	73 0b       	sbc	r23, r19
     288:	88 27       	eor	r24, r24
     28a:	77 fd       	sbrc	r23, 7
     28c:	80 95       	com	r24
     28e:	98 2f       	mov	r25, r24
     290:	0e 94 a3 09 	call	0x1346	; 0x1346 <__floatsisf>
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	44 e9       	ldi	r20, 0x94	; 148
     29a:	5f e3       	ldi	r21, 0x3F	; 63
     29c:	0e 94 2f 0a 	call	0x145e	; 0x145e <__mulsf3>
     2a0:	9b 01       	movw	r18, r22
     2a2:	ac 01       	movw	r20, r24
     2a4:	c8 01       	movw	r24, r16
     2a6:	b7 01       	movw	r22, r14
     2a8:	b7 d7       	rcall	.+3950   	; 0x1218 <__addsf3>
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	4a ea       	ldi	r20, 0xAA	; 170
     2b0:	52 e4       	ldi	r21, 0x42	; 66
     2b2:	b1 d7       	rcall	.+3938   	; 0x1216 <__subsf3>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	40 e4       	ldi	r20, 0x40	; 64
     2ba:	50 e4       	ldi	r21, 0x40	; 64
     2bc:	ad d7       	rcall	.+3930   	; 0x1218 <__addsf3>
     2be:	06 c1       	rjmp	.+524    	; 0x4cc <__stack+0x1cd>
			break;
		case 2:
			item.value = curr_time+1.15625*(302-offset*mul)-delay;
     2c0:	60 91 66 01 	lds	r22, 0x0166
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	88 27       	eor	r24, r24
     2c8:	77 fd       	sbrc	r23, 7
     2ca:	80 95       	com	r24
     2cc:	98 2f       	mov	r25, r24
     2ce:	0e 94 a3 09 	call	0x1346	; 0x1346 <__floatsisf>
     2d2:	7b 01       	movw	r14, r22
     2d4:	8c 01       	movw	r16, r24
     2d6:	29 81       	ldd	r18, Y+1	; 0x01
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	22 0f       	add	r18, r18
     2dc:	33 1f       	adc	r19, r19
     2de:	6e e2       	ldi	r22, 0x2E	; 46
     2e0:	71 e0       	ldi	r23, 0x01	; 1
     2e2:	62 1b       	sub	r22, r18
     2e4:	73 0b       	sbc	r23, r19
     2e6:	88 27       	eor	r24, r24
     2e8:	77 fd       	sbrc	r23, 7
     2ea:	80 95       	com	r24
     2ec:	98 2f       	mov	r25, r24
     2ee:	0e 94 a3 09 	call	0x1346	; 0x1346 <__floatsisf>
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	44 e9       	ldi	r20, 0x94	; 148
     2f8:	5f e3       	ldi	r21, 0x3F	; 63
     2fa:	0e 94 2f 0a 	call	0x145e	; 0x145e <__mulsf3>
     2fe:	9b 01       	movw	r18, r22
     300:	ac 01       	movw	r20, r24
     302:	c8 01       	movw	r24, r16
     304:	b7 01       	movw	r22, r14
     306:	88 d7       	rcall	.+3856   	; 0x1218 <__addsf3>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	4a ea       	ldi	r20, 0xAA	; 170
     30e:	52 e4       	ldi	r21, 0x42	; 66
     310:	dc c0       	rjmp	.+440    	; 0x4ca <__stack+0x1cb>
			break;
		case 3:
			item.value = curr_time+1.15625*(402-offset*mul)-delay-15;
     312:	60 91 66 01 	lds	r22, 0x0166
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	88 27       	eor	r24, r24
     31a:	77 fd       	sbrc	r23, 7
     31c:	80 95       	com	r24
     31e:	98 2f       	mov	r25, r24
     320:	0e 94 a3 09 	call	0x1346	; 0x1346 <__floatsisf>
     324:	7b 01       	movw	r14, r22
     326:	8c 01       	movw	r16, r24
     328:	29 81       	ldd	r18, Y+1	; 0x01
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	22 0f       	add	r18, r18
     32e:	33 1f       	adc	r19, r19
     330:	62 e9       	ldi	r22, 0x92	; 146
     332:	71 e0       	ldi	r23, 0x01	; 1
     334:	62 1b       	sub	r22, r18
     336:	73 0b       	sbc	r23, r19
     338:	88 27       	eor	r24, r24
     33a:	77 fd       	sbrc	r23, 7
     33c:	80 95       	com	r24
     33e:	98 2f       	mov	r25, r24
     340:	0e 94 a3 09 	call	0x1346	; 0x1346 <__floatsisf>
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	44 e9       	ldi	r20, 0x94	; 148
     34a:	5f e3       	ldi	r21, 0x3F	; 63
     34c:	0e 94 2f 0a 	call	0x145e	; 0x145e <__mulsf3>
     350:	9b 01       	movw	r18, r22
     352:	ac 01       	movw	r20, r24
     354:	c8 01       	movw	r24, r16
     356:	b7 01       	movw	r22, r14
     358:	5f d7       	rcall	.+3774   	; 0x1218 <__addsf3>
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	4a ea       	ldi	r20, 0xAA	; 170
     360:	52 e4       	ldi	r21, 0x42	; 66
     362:	59 d7       	rcall	.+3762   	; 0x1216 <__subsf3>
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e7       	ldi	r20, 0x70	; 112
     36a:	51 e4       	ldi	r21, 0x41	; 65
     36c:	ae c0       	rjmp	.+348    	; 0x4ca <__stack+0x1cb>
			break;
		case 4:
			item.value = curr_time+1.15625*(502-offset*mul)-delay-20;
     36e:	60 91 66 01 	lds	r22, 0x0166
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	88 27       	eor	r24, r24
     376:	77 fd       	sbrc	r23, 7
     378:	80 95       	com	r24
     37a:	98 2f       	mov	r25, r24
     37c:	e4 d7       	rcall	.+4040   	; 0x1346 <__floatsisf>
     37e:	7b 01       	movw	r14, r22
     380:	8c 01       	movw	r16, r24
     382:	29 81       	ldd	r18, Y+1	; 0x01
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	22 0f       	add	r18, r18
     388:	33 1f       	adc	r19, r19
     38a:	66 ef       	ldi	r22, 0xF6	; 246
     38c:	71 e0       	ldi	r23, 0x01	; 1
     38e:	62 1b       	sub	r22, r18
     390:	73 0b       	sbc	r23, r19
     392:	88 27       	eor	r24, r24
     394:	77 fd       	sbrc	r23, 7
     396:	80 95       	com	r24
     398:	98 2f       	mov	r25, r24
     39a:	d5 d7       	rcall	.+4010   	; 0x1346 <__floatsisf>
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	44 e9       	ldi	r20, 0x94	; 148
     3a2:	5f e3       	ldi	r21, 0x3F	; 63
     3a4:	0e 94 2f 0a 	call	0x145e	; 0x145e <__mulsf3>
     3a8:	9b 01       	movw	r18, r22
     3aa:	ac 01       	movw	r20, r24
     3ac:	c8 01       	movw	r24, r16
     3ae:	b7 01       	movw	r22, r14
     3b0:	33 d7       	rcall	.+3686   	; 0x1218 <__addsf3>
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	4a ea       	ldi	r20, 0xAA	; 170
     3b8:	52 e4       	ldi	r21, 0x42	; 66
     3ba:	2d d7       	rcall	.+3674   	; 0x1216 <__subsf3>
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	40 ea       	ldi	r20, 0xA0	; 160
     3c2:	51 e4       	ldi	r21, 0x41	; 65
     3c4:	82 c0       	rjmp	.+260    	; 0x4ca <__stack+0x1cb>
			break;
		case 5:
			item.value = curr_time+1.15625*(602-offset*mul)-delay-33;
     3c6:	60 91 66 01 	lds	r22, 0x0166
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	88 27       	eor	r24, r24
     3ce:	77 fd       	sbrc	r23, 7
     3d0:	80 95       	com	r24
     3d2:	98 2f       	mov	r25, r24
     3d4:	b8 d7       	rcall	.+3952   	; 0x1346 <__floatsisf>
     3d6:	7b 01       	movw	r14, r22
     3d8:	8c 01       	movw	r16, r24
     3da:	29 81       	ldd	r18, Y+1	; 0x01
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	22 0f       	add	r18, r18
     3e0:	33 1f       	adc	r19, r19
     3e2:	6a e5       	ldi	r22, 0x5A	; 90
     3e4:	72 e0       	ldi	r23, 0x02	; 2
     3e6:	62 1b       	sub	r22, r18
     3e8:	73 0b       	sbc	r23, r19
     3ea:	88 27       	eor	r24, r24
     3ec:	77 fd       	sbrc	r23, 7
     3ee:	80 95       	com	r24
     3f0:	98 2f       	mov	r25, r24
     3f2:	a9 d7       	rcall	.+3922   	; 0x1346 <__floatsisf>
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	44 e9       	ldi	r20, 0x94	; 148
     3fa:	5f e3       	ldi	r21, 0x3F	; 63
     3fc:	0e 94 2f 0a 	call	0x145e	; 0x145e <__mulsf3>
     400:	9b 01       	movw	r18, r22
     402:	ac 01       	movw	r20, r24
     404:	c8 01       	movw	r24, r16
     406:	b7 01       	movw	r22, r14
     408:	07 d7       	rcall	.+3598   	; 0x1218 <__addsf3>
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	4a ea       	ldi	r20, 0xAA	; 170
     410:	52 e4       	ldi	r21, 0x42	; 66
     412:	01 d7       	rcall	.+3586   	; 0x1216 <__subsf3>
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	44 e0       	ldi	r20, 0x04	; 4
     41a:	52 e4       	ldi	r21, 0x42	; 66
     41c:	56 c0       	rjmp	.+172    	; 0x4ca <__stack+0x1cb>
			break;
		case 6:
			item.value = curr_time+1.15625*(702-offset*mul)-delay-67;
     41e:	60 91 66 01 	lds	r22, 0x0166
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	88 27       	eor	r24, r24
     426:	77 fd       	sbrc	r23, 7
     428:	80 95       	com	r24
     42a:	98 2f       	mov	r25, r24
     42c:	8c d7       	rcall	.+3864   	; 0x1346 <__floatsisf>
     42e:	7b 01       	movw	r14, r22
     430:	8c 01       	movw	r16, r24
     432:	29 81       	ldd	r18, Y+1	; 0x01
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	22 0f       	add	r18, r18
     438:	33 1f       	adc	r19, r19
     43a:	6e eb       	ldi	r22, 0xBE	; 190
     43c:	72 e0       	ldi	r23, 0x02	; 2
     43e:	62 1b       	sub	r22, r18
     440:	73 0b       	sbc	r23, r19
     442:	88 27       	eor	r24, r24
     444:	77 fd       	sbrc	r23, 7
     446:	80 95       	com	r24
     448:	98 2f       	mov	r25, r24
     44a:	7d d7       	rcall	.+3834   	; 0x1346 <__floatsisf>
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	44 e9       	ldi	r20, 0x94	; 148
     452:	5f e3       	ldi	r21, 0x3F	; 63
     454:	0e 94 2f 0a 	call	0x145e	; 0x145e <__mulsf3>
     458:	9b 01       	movw	r18, r22
     45a:	ac 01       	movw	r20, r24
     45c:	c8 01       	movw	r24, r16
     45e:	b7 01       	movw	r22, r14
     460:	db d6       	rcall	.+3510   	; 0x1218 <__addsf3>
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	4a ea       	ldi	r20, 0xAA	; 170
     468:	52 e4       	ldi	r21, 0x42	; 66
     46a:	d5 d6       	rcall	.+3498   	; 0x1216 <__subsf3>
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	46 e8       	ldi	r20, 0x86	; 134
     472:	52 e4       	ldi	r21, 0x42	; 66
     474:	2a c0       	rjmp	.+84     	; 0x4ca <__stack+0x1cb>
			break;
		case 7:
			item.value = curr_time+1.15625*(802-offset*mul)-delay-72;
     476:	60 91 66 01 	lds	r22, 0x0166
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	88 27       	eor	r24, r24
     47e:	77 fd       	sbrc	r23, 7
     480:	80 95       	com	r24
     482:	98 2f       	mov	r25, r24
     484:	60 d7       	rcall	.+3776   	; 0x1346 <__floatsisf>
     486:	7b 01       	movw	r14, r22
     488:	8c 01       	movw	r16, r24
     48a:	29 81       	ldd	r18, Y+1	; 0x01
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	22 0f       	add	r18, r18
     490:	33 1f       	adc	r19, r19
     492:	62 e2       	ldi	r22, 0x22	; 34
     494:	73 e0       	ldi	r23, 0x03	; 3
     496:	62 1b       	sub	r22, r18
     498:	73 0b       	sbc	r23, r19
     49a:	88 27       	eor	r24, r24
     49c:	77 fd       	sbrc	r23, 7
     49e:	80 95       	com	r24
     4a0:	98 2f       	mov	r25, r24
     4a2:	51 d7       	rcall	.+3746   	; 0x1346 <__floatsisf>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	44 e9       	ldi	r20, 0x94	; 148
     4aa:	5f e3       	ldi	r21, 0x3F	; 63
     4ac:	d8 d7       	rcall	.+4016   	; 0x145e <__mulsf3>
     4ae:	9b 01       	movw	r18, r22
     4b0:	ac 01       	movw	r20, r24
     4b2:	c8 01       	movw	r24, r16
     4b4:	b7 01       	movw	r22, r14
     4b6:	b0 d6       	rcall	.+3424   	; 0x1218 <__addsf3>
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	4a ea       	ldi	r20, 0xAA	; 170
     4be:	52 e4       	ldi	r21, 0x42	; 66
     4c0:	aa d6       	rcall	.+3412   	; 0x1216 <__subsf3>
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	40 e9       	ldi	r20, 0x90	; 144
     4c8:	52 e4       	ldi	r21, 0x42	; 66
     4ca:	a5 d6       	rcall	.+3402   	; 0x1216 <__subsf3>
     4cc:	09 d7       	rcall	.+3602   	; 0x12e0 <__fixsfsi>
     4ce:	26 2f       	mov	r18, r22
     4d0:	67 2f       	mov	r22, r23
			break;
	}
	if (item.value < curr_time) item.value = curr_time;
     4d2:	30 91 66 01 	lds	r19, 0x0166
	if (item.key <= 7 && item.key > 0) {
     4d6:	c6 01       	movw	r24, r12
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	07 97       	sbiw	r24, 0x07	; 7
     4dc:	a0 f4       	brcc	.+40     	; 0x506 <__stack+0x207>
		PQAdd(q, item);
     4de:	e0 91 67 01 	lds	r30, 0x0167
     4e2:	f0 91 68 01 	lds	r31, 0x0168
     4e6:	43 2f       	mov	r20, r19
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	82 2f       	mov	r24, r18
     4ec:	96 2f       	mov	r25, r22
     4ee:	9c 01       	movw	r18, r24
     4f0:	24 17       	cp	r18, r20
     4f2:	35 07       	cpc	r19, r21
     4f4:	0c f4       	brge	.+2      	; 0x4f8 <__stack+0x1f9>
     4f6:	9a 01       	movw	r18, r20
     4f8:	b9 01       	movw	r22, r18
     4fa:	a6 01       	movw	r20, r12
     4fc:	cf 01       	movw	r24, r30
     4fe:	1f d6       	rcall	.+3134   	; 0x113e <PQAdd>
		PORTD ^= 0x80;
     500:	8b b1       	in	r24, 0x0b	; 11
     502:	80 58       	subi	r24, 0x80	; 128
     504:	8b b9       	out	0x0b, r24	; 11
	}
	//sol = 2;
	
}
     506:	0f 90       	pop	r0
     508:	cf 91       	pop	r28
     50a:	df 91       	pop	r29
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	df 90       	pop	r13
     516:	cf 90       	pop	r12
     518:	08 95       	ret

0000051a <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	42 e3       	ldi	r20, 0x32	; 50
     520:	21 d2       	rcall	.+1090   	; 0x964 <Endpoint_ConfigureEndpoint_Prv>
	ConfigSuccess &= Endpoint_ConfigureEndpoint(VENDOR_IN_EPADDR,  EP_TYPE_CONTROL, VENDOR_IO_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(VENDOR_OUT_EPADDR, EP_TYPE_CONTROL, VENDOR_IO_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	//LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
}
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	42 e3       	ldi	r20, 0x32	; 50
     528:	1d c2       	rjmp	.+1082   	; 0x964 <Endpoint_ConfigureEndpoint_Prv>

0000052a <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     52a:	84 b7       	in	r24, 0x34	; 52
     52c:	87 7f       	andi	r24, 0xF7	; 247
     52e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     530:	88 e1       	ldi	r24, 0x18	; 24
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	80 93 60 00 	sts	0x0060, r24
     53a:	10 92 60 00 	sts	0x0060, r1
     53e:	0f be       	out	0x3f, r0	; 63
#endif

	/* Hardware Initialization */
	//LEDs_Init();
	USB_Init();
}
     540:	a2 c2       	rjmp	.+1348   	; 0xa86 <USB_Init>

00000542 <main>:
}

int main(void)
{
	//_delay_ms(2000);
    DDRB = 0xFF;
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	84 b9       	out	0x04, r24	; 4
    DDRD = 0xFF;
     546:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0;
     548:	1b b8       	out	0x0b, r1	; 11
    PORTD |= 0x80;
     54a:	5f 9a       	sbi	0x0b, 7	; 11
     54c:	88 e8       	ldi	r24, 0x88	; 136
     54e:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     550:	28 ec       	ldi	r18, 0xC8	; 200
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	f9 01       	movw	r30, r18
     556:	31 97       	sbiw	r30, 0x01	; 1
     558:	f1 f7       	brne	.-4      	; 0x556 <main+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     55a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     55c:	d9 f7       	brne	.-10     	; 0x554 <main+0x12>
    _delay_ms(500);
    PORTD &= ~0x80;
     55e:	5f 98       	cbi	0x0b, 7	; 11
     560:	88 e8       	ldi	r24, 0x88	; 136
     562:	93 e1       	ldi	r25, 0x13	; 19
     564:	28 ec       	ldi	r18, 0xC8	; 200
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f9 01       	movw	r30, r18
     56a:	31 97       	sbiw	r30, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <main+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     56e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     570:	d9 f7       	brne	.-10     	; 0x568 <main+0x26>
    _delay_ms(500);
    PORTB = 0;
     572:	15 b8       	out	0x05, r1	; 5
	int i;
	for (i = 0; i < LED_COUNT; i++) {
		colors[i] = (rgb_color){ 255, 255, 255};
     574:	aa e5       	ldi	r26, 0x5A	; 90
     576:	b1 e0       	ldi	r27, 0x01	; 1
     578:	e0 e0       	ldi	r30, 0x00	; 0
     57a:	f1 e0       	ldi	r31, 0x01	; 1
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	01 90       	ld	r0, Z+
     580:	0d 92       	st	X+, r0
     582:	81 50       	subi	r24, 0x01	; 1
     584:	e1 f7       	brne	.-8      	; 0x57e <main+0x3c>
     586:	ad e5       	ldi	r26, 0x5D	; 93
     588:	b1 e0       	ldi	r27, 0x01	; 1
     58a:	e0 e0       	ldi	r30, 0x00	; 0
     58c:	f1 e0       	ldi	r31, 0x01	; 1
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	01 90       	ld	r0, Z+
     592:	0d 92       	st	X+, r0
     594:	81 50       	subi	r24, 0x01	; 1
     596:	e1 f7       	brne	.-8      	; 0x590 <main+0x4e>
     598:	a0 e6       	ldi	r26, 0x60	; 96
     59a:	b1 e0       	ldi	r27, 0x01	; 1
     59c:	e0 e0       	ldi	r30, 0x00	; 0
     59e:	f1 e0       	ldi	r31, 0x01	; 1
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	01 90       	ld	r0, Z+
     5a4:	0d 92       	st	X+, r0
     5a6:	81 50       	subi	r24, 0x01	; 1
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <main+0x60>
     5aa:	a3 e6       	ldi	r26, 0x63	; 99
     5ac:	b1 e0       	ldi	r27, 0x01	; 1
     5ae:	e0 e0       	ldi	r30, 0x00	; 0
     5b0:	f1 e0       	ldi	r31, 0x01	; 1
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	01 90       	ld	r0, Z+
     5b6:	0d 92       	st	X+, r0
     5b8:	81 50       	subi	r24, 0x01	; 1
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <main+0x72>
	}
	led_strip_write(colors, LED_COUNT);
     5bc:	8a e5       	ldi	r24, 0x5A	; 90
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	64 e0       	ldi	r22, 0x04	; 4
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	b9 dd       	rcall	.-1166   	; 0x138 <led_strip_write>
	q = PQNew();
     5c6:	01 d6       	rcall	.+3074   	; 0x11ca <PQNew>
     5c8:	90 93 68 01 	sts	0x0168, r25
     5cc:	80 93 67 01 	sts	0x0167, r24
	PORTD |= 0x80;
     5d0:	5f 9a       	sbi	0x0b, 7	; 11
     5d2:	88 ee       	ldi	r24, 0xE8	; 232
     5d4:	93 e0       	ldi	r25, 0x03	; 3
     5d6:	28 ec       	ldi	r18, 0xC8	; 200
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	f9 01       	movw	r30, r18
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	f1 f7       	brne	.-4      	; 0x5dc <main+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5e2:	d9 f7       	brne	.-10     	; 0x5da <main+0x98>
    _delay_ms(100);
    PORTD &= ~0x80;
     5e4:	5f 98       	cbi	0x0b, 7	; 11
     5e6:	88 ee       	ldi	r24, 0xE8	; 232
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	28 ec       	ldi	r18, 0xC8	; 200
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	f9 01       	movw	r30, r18
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <main+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f6:	d9 f7       	brne	.-10     	; 0x5ee <main+0xac>
    _delay_ms(100);

	curr_time = 0;
     5f8:	10 92 66 01 	sts	0x0166, r1
	sei();
     5fc:	78 94       	sei
	TCCR0B |= 5;
     5fe:	85 b5       	in	r24, 0x25	; 37
     600:	85 60       	ori	r24, 0x05	; 5
     602:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0);
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 6e 00 	sts	0x006E, r24
	SetupHardware();
     60a:	8f df       	rcall	.-226    	; 0x52a <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     60c:	78 94       	sei
	
	GlobalInterruptEnable();

	for (;;)
	{
		USB_USBTask();
     60e:	9e d4       	rcall	.+2364   	; 0xf4c <USB_USBTask>
     610:	fe cf       	rjmp	.-4      	; 0x60e <main+0xcc>

00000612 <__vector_21>:


PQ q;
char curr_time;

ISR (TIMER0_OVF_vect) {
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	2f 93       	push	r18
     62a:	3f 93       	push	r19
     62c:	4f 93       	push	r20
     62e:	5f 93       	push	r21
     630:	6f 93       	push	r22
     632:	7f 93       	push	r23
     634:	8f 93       	push	r24
     636:	9f 93       	push	r25
     638:	af 93       	push	r26
     63a:	bf 93       	push	r27
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	ef 93       	push	r30
     642:	ff 93       	push	r31
	TCNT0 += 247; //1ms for 247 //every 2.5ms for 236
     644:	86 b5       	in	r24, 0x26	; 38
     646:	89 50       	subi	r24, 0x09	; 9
     648:	86 bd       	out	0x26, r24	; 38
	ItemPQ item;
	if (!PQIsEmpty(q)) {
     64a:	80 91 67 01 	lds	r24, 0x0167
     64e:	90 91 68 01 	lds	r25, 0x0168
     652:	f2 d4       	rcall	.+2532   	; 0x1038 <PQIsEmpty>
     654:	88 23       	and	r24, r24
     656:	09 f0       	breq	.+2      	; 0x65a <__vector_21+0x48>
     658:	52 c0       	rjmp	.+164    	; 0x6fe <__vector_21+0xec>
		item = PQPeek(q);
     65a:	80 91 67 01 	lds	r24, 0x0167
     65e:	90 91 68 01 	lds	r25, 0x0168
     662:	a9 d4       	rcall	.+2386   	; 0xfb6 <PQPeek>
     664:	9c 01       	movw	r18, r24
     666:	eb 01       	movw	r28, r22
				PORTD |= 1 << (item.key-1);
				item.key = 0-item.key;
				item.value = curr_time+50;
				PQAdd(q, item);
			} else {
				PORTD &= ~(1 << (-1-item.key));
     668:	f1 e0       	ldi	r31, 0x01	; 1
     66a:	cf 2e       	mov	r12, r31
     66c:	d1 2c       	mov	r13, r1
     66e:	40 c0       	rjmp	.+128    	; 0x6f0 <__vector_21+0xde>
	TCNT0 += 247; //1ms for 247 //every 2.5ms for 236
	ItemPQ item;
	if (!PQIsEmpty(q)) {
		item = PQPeek(q);
		while (item.value <= curr_time) {
			PQDequeue(q);
     670:	80 91 67 01 	lds	r24, 0x0167
     674:	90 91 68 01 	lds	r25, 0x0168
     678:	eb d4       	rcall	.+2518   	; 0x1050 <PQDequeue>
			if (item.key > 0) {
     67a:	1c 16       	cp	r1, r28
     67c:	1d 06       	cpc	r1, r29
     67e:	f4 f4       	brge	.+60     	; 0x6bc <__vector_21+0xaa>
				PORTD |= 1 << (item.key-1);
     680:	2b b1       	in	r18, 0x0b	; 11
     682:	21 97       	sbiw	r28, 0x01	; 1
     684:	c6 01       	movw	r24, r12
     686:	0c 2e       	mov	r0, r28
     688:	02 c0       	rjmp	.+4      	; 0x68e <__vector_21+0x7c>
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	0a 94       	dec	r0
     690:	e2 f7       	brpl	.-8      	; 0x68a <__vector_21+0x78>
     692:	21 96       	adiw	r28, 0x01	; 1
     694:	28 2b       	or	r18, r24
     696:	2b b9       	out	0x0b, r18	; 11
				item.key = 0-item.key;
				item.value = curr_time+50;
				PQAdd(q, item);
     698:	80 91 66 01 	lds	r24, 0x0166
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	8c 01       	movw	r16, r24
     6a0:	0e 5c       	subi	r16, 0xCE	; 206
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	ee 24       	eor	r14, r14
     6a6:	ff 24       	eor	r15, r15
     6a8:	ec 1a       	sub	r14, r28
     6aa:	fd 0a       	sbc	r15, r29
     6ac:	80 91 67 01 	lds	r24, 0x0167
     6b0:	90 91 68 01 	lds	r25, 0x0168
     6b4:	b8 01       	movw	r22, r16
     6b6:	a7 01       	movw	r20, r14
     6b8:	42 d5       	rcall	.+2692   	; 0x113e <PQAdd>
     6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <__vector_21+0xc2>
			} else {
				PORTD &= ~(1 << (-1-item.key));
     6bc:	2b b1       	in	r18, 0x0b	; 11
     6be:	c0 95       	com	r28
     6c0:	d0 95       	com	r29
     6c2:	c6 01       	movw	r24, r12
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <__vector_21+0xb8>
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	ca 95       	dec	r28
     6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <__vector_21+0xb4>
     6ce:	80 95       	com	r24
     6d0:	82 23       	and	r24, r18
     6d2:	8b b9       	out	0x0b, r24	; 11
				//PORTD ^= 0x80;
			}
			if (PQIsEmpty(q)) break;
     6d4:	80 91 67 01 	lds	r24, 0x0167
     6d8:	90 91 68 01 	lds	r25, 0x0168
     6dc:	ad d4       	rcall	.+2394   	; 0x1038 <PQIsEmpty>
     6de:	88 23       	and	r24, r24
     6e0:	71 f4       	brne	.+28     	; 0x6fe <__vector_21+0xec>
			item = PQPeek(q);
     6e2:	80 91 67 01 	lds	r24, 0x0167
     6e6:	90 91 68 01 	lds	r25, 0x0168
     6ea:	65 d4       	rcall	.+2250   	; 0xfb6 <PQPeek>
     6ec:	9c 01       	movw	r18, r24
     6ee:	eb 01       	movw	r28, r22
ISR (TIMER0_OVF_vect) {
	TCNT0 += 247; //1ms for 247 //every 2.5ms for 236
	ItemPQ item;
	if (!PQIsEmpty(q)) {
		item = PQPeek(q);
		while (item.value <= curr_time) {
     6f0:	80 91 66 01 	lds	r24, 0x0166
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	82 17       	cp	r24, r18
     6f8:	93 07       	cpc	r25, r19
     6fa:	0c f0       	brlt	.+2      	; 0x6fe <__vector_21+0xec>
     6fc:	b9 cf       	rjmp	.-142    	; 0x670 <__vector_21+0x5e>
			}
			if (PQIsEmpty(q)) break;
			item = PQPeek(q);
		}
	}
	curr_time += 1;
     6fe:	90 91 66 01 	lds	r25, 0x0166
     702:	89 2f       	mov	r24, r25
     704:	8f 5f       	subi	r24, 0xFF	; 255
     706:	80 93 66 01 	sts	0x0166, r24
	if (curr_time >= OVERFLOW) {
     70a:	8a 3f       	cpi	r24, 0xFA	; 250
     70c:	50 f0       	brcs	.+20     	; 0x722 <__vector_21+0x110>
		curr_time -= OVERFLOW;
     70e:	99 5f       	subi	r25, 0xF9	; 249
     710:	90 93 66 01 	sts	0x0166, r25
		PQShiftPriority(q, OVERFLOW);
     714:	80 91 67 01 	lds	r24, 0x0167
     718:	90 91 68 01 	lds	r25, 0x0168
     71c:	6a ef       	ldi	r22, 0xFA	; 250
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	2a d4       	rcall	.+2132   	; 0xf76 <PQShiftPriority>
	}
}
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	bf 91       	pop	r27
     72c:	af 91       	pop	r26
     72e:	9f 91       	pop	r25
     730:	8f 91       	pop	r24
     732:	7f 91       	pop	r23
     734:	6f 91       	pop	r22
     736:	5f 91       	pop	r21
     738:	4f 91       	pop	r20
     73a:	3f 91       	pop	r19
     73c:	2f 91       	pop	r18
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	df 90       	pop	r13
     748:	cf 90       	pop	r12
     74a:	0f 90       	pop	r0
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	0f 90       	pop	r0
     750:	1f 90       	pop	r1
     752:	18 95       	reti

00000754 <Endpoint_Write_Control_Stream_LE>:
     754:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     756:	40 91 74 01 	lds	r20, 0x0174
     75a:	50 91 75 01 	lds	r21, 0x0175
     75e:	46 17       	cp	r20, r22
     760:	57 07       	cpc	r21, r23
     762:	18 f4       	brcc	.+6      	; 0x76a <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     764:	f9 01       	movw	r30, r18
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	3d c0       	rjmp	.+122    	; 0x7e4 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     76a:	61 15       	cp	r22, r1
     76c:	71 05       	cpc	r23, r1
     76e:	11 f0       	breq	.+4      	; 0x774 <Endpoint_Write_Control_Stream_LE+0x20>
     770:	ab 01       	movw	r20, r22
     772:	f8 cf       	rjmp	.-16     	; 0x764 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     774:	80 91 e8 00 	lds	r24, 0x00E8
     778:	8e 77       	andi	r24, 0x7E	; 126
     77a:	80 93 e8 00 	sts	0x00E8, r24
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	f0 cf       	rjmp	.-32     	; 0x764 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     784:	80 91 6d 01 	lds	r24, 0x016D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     788:	88 23       	and	r24, r24
     78a:	09 f4       	brne	.+2      	; 0x78e <Endpoint_Write_Control_Stream_LE+0x3a>
     78c:	41 c0       	rjmp	.+130    	; 0x810 <Endpoint_Write_Control_Stream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     78e:	85 30       	cpi	r24, 0x05	; 5
     790:	09 f4       	brne	.+2      	; 0x794 <Endpoint_Write_Control_Stream_LE+0x40>
     792:	40 c0       	rjmp	.+128    	; 0x814 <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     794:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     798:	83 fd       	sbrc	r24, 3
     79a:	3e c0       	rjmp	.+124    	; 0x818 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     79c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7a0:	82 fd       	sbrc	r24, 2
     7a2:	30 c0       	rjmp	.+96     	; 0x804 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7a4:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     7a8:	80 ff       	sbrs	r24, 0
     7aa:	1c c0       	rjmp	.+56     	; 0x7e4 <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     7ac:	80 91 f2 00 	lds	r24, 0x00F2
     7b0:	28 2f       	mov	r18, r24
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	07 c0       	rjmp	.+14     	; 0x7c4 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     7b6:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7b8:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     7bc:	41 50       	subi	r20, 0x01	; 1
     7be:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     7c0:	2f 5f       	subi	r18, 0xFF	; 255
     7c2:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     7c4:	41 15       	cp	r20, r1
     7c6:	51 05       	cpc	r21, r1
     7c8:	19 f0       	breq	.+6      	; 0x7d0 <Endpoint_Write_Control_Stream_LE+0x7c>
     7ca:	28 30       	cpi	r18, 0x08	; 8
     7cc:	31 05       	cpc	r19, r1
     7ce:	98 f3       	brcs	.-26     	; 0x7b6 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	28 30       	cpi	r18, 0x08	; 8
     7d4:	31 05       	cpc	r19, r1
     7d6:	09 f4       	brne	.+2      	; 0x7da <Endpoint_Write_Control_Stream_LE+0x86>
     7d8:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7da:	80 91 e8 00 	lds	r24, 0x00E8
     7de:	8e 77       	andi	r24, 0x7E	; 126
     7e0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     7e4:	41 15       	cp	r20, r1
     7e6:	51 05       	cpc	r21, r1
     7e8:	69 f6       	brne	.-102    	; 0x784 <Endpoint_Write_Control_Stream_LE+0x30>
     7ea:	99 23       	and	r25, r25
     7ec:	59 f6       	brne	.-106    	; 0x784 <Endpoint_Write_Control_Stream_LE+0x30>
     7ee:	0a c0       	rjmp	.+20     	; 0x804 <Endpoint_Write_Control_Stream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7f0:	80 91 6d 01 	lds	r24, 0x016D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7f4:	88 23       	and	r24, r24
     7f6:	61 f0       	breq	.+24     	; 0x810 <Endpoint_Write_Control_Stream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7f8:	85 30       	cpi	r24, 0x05	; 5
     7fa:	61 f0       	breq	.+24     	; 0x814 <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7fc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     800:	83 fd       	sbrc	r24, 3
     802:	0a c0       	rjmp	.+20     	; 0x818 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     804:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     808:	82 ff       	sbrs	r24, 2
     80a:	f2 cf       	rjmp	.-28     	; 0x7f0 <Endpoint_Write_Control_Stream_LE+0x9c>
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	08 95       	ret
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	08 95       	ret
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	08 95       	ret
     818:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     81a:	08 95       	ret

0000081c <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     81c:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     81e:	61 15       	cp	r22, r1
     820:	71 05       	cpc	r23, r1
     822:	29 f4       	brne	.+10     	; 0x82e <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     824:	80 91 e8 00 	lds	r24, 0x00E8
     828:	8b 77       	andi	r24, 0x7B	; 123
     82a:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     82e:	f9 01       	movw	r30, r18
     830:	20 c0       	rjmp	.+64     	; 0x872 <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     832:	80 91 6d 01 	lds	r24, 0x016D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     836:	88 23       	and	r24, r24
     838:	61 f1       	breq	.+88     	; 0x892 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     83a:	85 30       	cpi	r24, 0x05	; 5
     83c:	61 f1       	breq	.+88     	; 0x896 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     83e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     842:	83 ff       	sbrs	r24, 3
     844:	02 c0       	rjmp	.+4      	; 0x84a <Endpoint_Read_Control_Stream_LE+0x2e>
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     84a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     84e:	82 ff       	sbrs	r24, 2
     850:	f0 cf       	rjmp	.-32     	; 0x832 <Endpoint_Read_Control_Stream_LE+0x16>
     852:	06 c0       	rjmp	.+12     	; 0x860 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     854:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     858:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     85a:	61 50       	subi	r22, 0x01	; 1
     85c:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     85e:	21 f0       	breq	.+8      	; 0x868 <Endpoint_Read_Control_Stream_LE+0x4c>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     860:	80 91 f2 00 	lds	r24, 0x00F2
     864:	88 23       	and	r24, r24
     866:	b1 f7       	brne	.-20     	; 0x854 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     868:	80 91 e8 00 	lds	r24, 0x00E8
     86c:	8b 77       	andi	r24, 0x7B	; 123
     86e:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     872:	61 15       	cp	r22, r1
     874:	71 05       	cpc	r23, r1
     876:	e9 f6       	brne	.-70     	; 0x832 <Endpoint_Read_Control_Stream_LE+0x16>
     878:	06 c0       	rjmp	.+12     	; 0x886 <Endpoint_Read_Control_Stream_LE+0x6a>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     87a:	80 91 6d 01 	lds	r24, 0x016D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     87e:	88 23       	and	r24, r24
     880:	41 f0       	breq	.+16     	; 0x892 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     882:	85 30       	cpi	r24, 0x05	; 5
     884:	41 f0       	breq	.+16     	; 0x896 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     886:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     88a:	80 ff       	sbrs	r24, 0
     88c:	f6 cf       	rjmp	.-20     	; 0x87a <Endpoint_Read_Control_Stream_LE+0x5e>
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	08 95       	ret
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	08 95       	ret
     896:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     898:	08 95       	ret

0000089a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     89a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     89c:	40 91 74 01 	lds	r20, 0x0174
     8a0:	50 91 75 01 	lds	r21, 0x0175
     8a4:	46 17       	cp	r20, r22
     8a6:	57 07       	cpc	r21, r23
     8a8:	18 f4       	brcc	.+6      	; 0x8b0 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     8aa:	f9 01       	movw	r30, r18
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	3e c0       	rjmp	.+124    	; 0x92c <Endpoint_Write_Control_PStream_LE+0x92>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     8b0:	61 15       	cp	r22, r1
     8b2:	71 05       	cpc	r23, r1
     8b4:	11 f0       	breq	.+4      	; 0x8ba <Endpoint_Write_Control_PStream_LE+0x20>
     8b6:	ab 01       	movw	r20, r22
     8b8:	f8 cf       	rjmp	.-16     	; 0x8aa <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8ba:	80 91 e8 00 	lds	r24, 0x00E8
     8be:	8e 77       	andi	r24, 0x7E	; 126
     8c0:	80 93 e8 00 	sts	0x00E8, r24
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	f0 cf       	rjmp	.-32     	; 0x8aa <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8ca:	80 91 6d 01 	lds	r24, 0x016D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8ce:	88 23       	and	r24, r24
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <Endpoint_Write_Control_PStream_LE+0x3a>
     8d2:	42 c0       	rjmp	.+132    	; 0x958 <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8d4:	85 30       	cpi	r24, 0x05	; 5
     8d6:	09 f4       	brne	.+2      	; 0x8da <Endpoint_Write_Control_PStream_LE+0x40>
     8d8:	41 c0       	rjmp	.+130    	; 0x95c <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8da:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     8de:	83 fd       	sbrc	r24, 3
     8e0:	3f c0       	rjmp	.+126    	; 0x960 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8e2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     8e6:	82 fd       	sbrc	r24, 2
     8e8:	31 c0       	rjmp	.+98     	; 0x94c <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8ea:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     8ee:	80 ff       	sbrs	r24, 0
     8f0:	1d c0       	rjmp	.+58     	; 0x92c <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     8f2:	80 91 f2 00 	lds	r24, 0x00F2
     8f6:	28 2f       	mov	r18, r24
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	08 c0       	rjmp	.+16     	; 0x90c <Endpoint_Write_Control_PStream_LE+0x72>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     8fc:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8fe:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     902:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     904:	41 50       	subi	r20, 0x01	; 1
     906:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     908:	2f 5f       	subi	r18, 0xFF	; 255
     90a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     90c:	41 15       	cp	r20, r1
     90e:	51 05       	cpc	r21, r1
     910:	19 f0       	breq	.+6      	; 0x918 <Endpoint_Write_Control_PStream_LE+0x7e>
     912:	28 30       	cpi	r18, 0x08	; 8
     914:	31 05       	cpc	r19, r1
     916:	90 f3       	brcs	.-28     	; 0x8fc <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	28 30       	cpi	r18, 0x08	; 8
     91c:	31 05       	cpc	r19, r1
     91e:	09 f4       	brne	.+2      	; 0x922 <Endpoint_Write_Control_PStream_LE+0x88>
     920:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     922:	80 91 e8 00 	lds	r24, 0x00E8
     926:	8e 77       	andi	r24, 0x7E	; 126
     928:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     92c:	41 15       	cp	r20, r1
     92e:	51 05       	cpc	r21, r1
     930:	61 f6       	brne	.-104    	; 0x8ca <Endpoint_Write_Control_PStream_LE+0x30>
     932:	99 23       	and	r25, r25
     934:	51 f6       	brne	.-108    	; 0x8ca <Endpoint_Write_Control_PStream_LE+0x30>
     936:	0a c0       	rjmp	.+20     	; 0x94c <Endpoint_Write_Control_PStream_LE+0xb2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     938:	80 91 6d 01 	lds	r24, 0x016D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     93c:	88 23       	and	r24, r24
     93e:	61 f0       	breq	.+24     	; 0x958 <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     940:	85 30       	cpi	r24, 0x05	; 5
     942:	61 f0       	breq	.+24     	; 0x95c <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     944:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     948:	83 fd       	sbrc	r24, 3
     94a:	0a c0       	rjmp	.+20     	; 0x960 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     94c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     950:	82 ff       	sbrs	r24, 2
     952:	f2 cf       	rjmp	.-28     	; 0x938 <Endpoint_Write_Control_PStream_LE+0x9e>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	08 95       	ret
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	08 95       	ret
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	08 95       	ret
     960:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     962:	08 95       	ret

00000964 <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     964:	38 2f       	mov	r19, r24
     966:	28 2f       	mov	r18, r24
     968:	2e c0       	rjmp	.+92     	; 0x9c6 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     96a:	82 2f       	mov	r24, r18
     96c:	8f 70       	andi	r24, 0x0F	; 15
     96e:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     972:	23 17       	cp	r18, r19
     974:	21 f4       	brne	.+8      	; 0x97e <Endpoint_ConfigureEndpoint_Prv+0x1a>
     976:	76 2f       	mov	r23, r22
     978:	94 2f       	mov	r25, r20
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	06 c0       	rjmp	.+12     	; 0x98a <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     97e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     982:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     986:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     98a:	91 ff       	sbrs	r25, 1
     98c:	1b c0       	rjmp	.+54     	; 0x9c4 <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     98e:	80 91 eb 00 	lds	r24, 0x00EB
     992:	8e 7f       	andi	r24, 0xFE	; 254
     994:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     998:	80 91 ed 00 	lds	r24, 0x00ED
     99c:	8d 7f       	andi	r24, 0xFD	; 253
     99e:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     9a2:	80 91 eb 00 	lds	r24, 0x00EB
     9a6:	81 60       	ori	r24, 0x01	; 1
     9a8:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     9ac:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     9b0:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     9b4:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     9b8:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
     9bc:	87 fd       	sbrc	r24, 7
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <Endpoint_ConfigureEndpoint_Prv+0x60>
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     9c4:	2f 5f       	subi	r18, 0xFF	; 255
     9c6:	25 30       	cpi	r18, 0x05	; 5
     9c8:	80 f2       	brcs	.-96     	; 0x96a <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9ca:	3f 70       	andi	r19, 0x0F	; 15
     9cc:	30 93 e9 00 	sts	0x00E9, r19
     9d0:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     9d2:	08 95       	ret

000009d4 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     9d4:	80 91 6e 01 	lds	r24, 0x016E
     9d8:	88 23       	and	r24, r24
     9da:	9c f4       	brge	.+38     	; 0xa02 <Endpoint_ClearStatusStage+0x2e>
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     9de:	80 91 6d 01 	lds	r24, 0x016D
     9e2:	88 23       	and	r24, r24
     9e4:	b9 f0       	breq	.+46     	; 0xa14 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9e6:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     9ea:	82 ff       	sbrs	r24, 2
     9ec:	f8 cf       	rjmp	.-16     	; 0x9de <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9ee:	80 91 e8 00 	lds	r24, 0x00E8
     9f2:	8b 77       	andi	r24, 0x7B	; 123
     9f4:	80 93 e8 00 	sts	0x00E8, r24
     9f8:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     9fa:	80 91 6d 01 	lds	r24, 0x016D
     9fe:	88 23       	and	r24, r24
     a00:	49 f0       	breq	.+18     	; 0xa14 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a02:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     a06:	80 ff       	sbrs	r24, 0
     a08:	f8 cf       	rjmp	.-16     	; 0x9fa <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a0a:	80 91 e8 00 	lds	r24, 0x00E8
     a0e:	8e 77       	andi	r24, 0x7E	; 126
     a10:	80 93 e8 00 	sts	0x00E8, r24
     a14:	08 95       	ret

00000a16 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a16:	40 d0       	rcall	.+128    	; 0xa98 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a18:	42 d0       	rcall	.+132    	; 0xa9e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a1a:	80 91 d8 00 	lds	r24, 0x00D8
     a1e:	8f 77       	andi	r24, 0x7F	; 127
     a20:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     a24:	80 91 d8 00 	lds	r24, 0x00D8
     a28:	80 68       	ori	r24, 0x80	; 128
     a2a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a2e:	80 91 d8 00 	lds	r24, 0x00D8
     a32:	8f 7d       	andi	r24, 0xDF	; 223
     a34:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a38:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a3e:	09 b4       	in	r0, 0x29	; 41
     a40:	00 fe       	sbrs	r0, 0
     a42:	fd cf       	rjmp	.-6      	; 0xa3e <USB_ResetInterface+0x28>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     a44:	10 92 6d 01 	sts	0x016D, r1
	USB_Device_ConfigurationNumber  = 0;
     a48:	10 92 69 01 	sts	0x0169, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     a4c:	10 92 6b 01 	sts	0x016B, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     a50:	10 92 6a 01 	sts	0x016A, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	42 e0       	ldi	r20, 0x02	; 2
     a5a:	84 df       	rcall	.-248    	; 0x964 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a5c:	80 91 e1 00 	lds	r24, 0x00E1
     a60:	8e 7f       	andi	r24, 0xFE	; 254
     a62:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a66:	80 91 e2 00 	lds	r24, 0x00E2
     a6a:	81 60       	ori	r24, 0x01	; 1
     a6c:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     a70:	80 91 e2 00 	lds	r24, 0x00E2
     a74:	88 60       	ori	r24, 0x08	; 8
     a76:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a7a:	80 91 e0 00 	lds	r24, 0x00E0
     a7e:	8e 7f       	andi	r24, 0xFE	; 254
     a80:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     a84:	08 95       	ret

00000a86 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     a86:	e3 e6       	ldi	r30, 0x63	; 99
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	8e 7f       	andi	r24, 0xFE	; 254
     a8e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	80 93 6c 01 	sts	0x016C, r24

	USB_ResetInterface();
}
     a96:	bf cf       	rjmp	.-130    	; 0xa16 <USB_ResetInterface>

00000a98 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a98:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     a9c:	08 95       	ret

00000a9e <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a9e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     aa2:	08 95       	ret

00000aa4 <__vector_12>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     aa4:	1f 92       	push	r1
     aa6:	0f 92       	push	r0
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	0f 92       	push	r0
     aac:	11 24       	eor	r1, r1
     aae:	1f 93       	push	r17
     ab0:	2f 93       	push	r18
     ab2:	3f 93       	push	r19
     ab4:	4f 93       	push	r20
     ab6:	5f 93       	push	r21
     ab8:	6f 93       	push	r22
     aba:	7f 93       	push	r23
     abc:	8f 93       	push	r24
     abe:	9f 93       	push	r25
     ac0:	af 93       	push	r26
     ac2:	bf 93       	push	r27
     ac4:	ef 93       	push	r30
     ac6:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ac8:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     acc:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ad0:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     ad4:	80 91 f0 00 	lds	r24, 0x00F0
     ad8:	87 7f       	andi	r24, 0xF7	; 247
     ada:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     ade:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     ae0:	c4 d0       	rcall	.+392    	; 0xc6a <USB_Device_ProcessControlRequest>
     ae2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     ae6:	80 91 f0 00 	lds	r24, 0x00F0
     aea:	88 60       	ori	r24, 0x08	; 8
     aec:	80 93 f0 00 	sts	0x00F0, r24
     af0:	1f 70       	andi	r17, 0x0F	; 15
     af2:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     af6:	ff 91       	pop	r31
     af8:	ef 91       	pop	r30
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	7f 91       	pop	r23
     b04:	6f 91       	pop	r22
     b06:	5f 91       	pop	r21
     b08:	4f 91       	pop	r20
     b0a:	3f 91       	pop	r19
     b0c:	2f 91       	pop	r18
     b0e:	1f 91       	pop	r17
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <__vector_11>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     b3c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     b40:	82 ff       	sbrs	r24, 2
     b42:	0a c0       	rjmp	.+20     	; 0xb58 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     b44:	80 91 e2 00 	lds	r24, 0x00E2
     b48:	82 ff       	sbrs	r24, 2
     b4a:	06 c0       	rjmp	.+12     	; 0xb58 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     b4c:	80 91 e1 00 	lds	r24, 0x00E1
     b50:	8b 7f       	andi	r24, 0xFB	; 251
     b52:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     b56:	f9 d1       	rcall	.+1010   	; 0xf4a <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     b58:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     b5c:	80 ff       	sbrs	r24, 0
     b5e:	17 c0       	rjmp	.+46     	; 0xb8e <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     b60:	80 91 e2 00 	lds	r24, 0x00E2
     b64:	80 ff       	sbrs	r24, 0
     b66:	13 c0       	rjmp	.+38     	; 0xb8e <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b68:	80 91 e2 00 	lds	r24, 0x00E2
     b6c:	8e 7f       	andi	r24, 0xFE	; 254
     b6e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b72:	80 91 e2 00 	lds	r24, 0x00E2
     b76:	80 61       	ori	r24, 0x10	; 16
     b78:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     b7c:	80 91 d8 00 	lds	r24, 0x00D8
     b80:	80 62       	ori	r24, 0x20	; 32
     b82:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b86:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     b88:	10 92 6d 01 	sts	0x016D, r1
		EVENT_USB_Device_Disconnect();
     b8c:	de d1       	rcall	.+956    	; 0xf4a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     b8e:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     b92:	84 ff       	sbrs	r24, 4
     b94:	2e c0       	rjmp	.+92     	; 0xbf2 <__vector_11+0xd8>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     b96:	80 91 e2 00 	lds	r24, 0x00E2
     b9a:	84 ff       	sbrs	r24, 4
     b9c:	2a c0       	rjmp	.+84     	; 0xbf2 <__vector_11+0xd8>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b9e:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     ba4:	09 b4       	in	r0, 0x29	; 41
     ba6:	00 fe       	sbrs	r0, 0
     ba8:	fd cf       	rjmp	.-6      	; 0xba4 <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     baa:	80 91 d8 00 	lds	r24, 0x00D8
     bae:	8f 7d       	andi	r24, 0xDF	; 223
     bb0:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     bb4:	80 91 e1 00 	lds	r24, 0x00E1
     bb8:	8f 7e       	andi	r24, 0xEF	; 239
     bba:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     bbe:	80 91 e2 00 	lds	r24, 0x00E2
     bc2:	8f 7e       	andi	r24, 0xEF	; 239
     bc4:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     bc8:	80 91 e2 00 	lds	r24, 0x00E2
     bcc:	81 60       	ori	r24, 0x01	; 1
     bce:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     bd2:	80 91 69 01 	lds	r24, 0x0169
     bd6:	88 23       	and	r24, r24
     bd8:	11 f0       	breq	.+4      	; 0xbde <__vector_11+0xc4>
		  USB_DeviceState = DEVICE_STATE_Configured;
     bda:	84 e0       	ldi	r24, 0x04	; 4
     bdc:	07 c0       	rjmp	.+14     	; 0xbec <__vector_11+0xd2>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     bde:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     be2:	87 fd       	sbrc	r24, 7
     be4:	02 c0       	rjmp	.+4      	; 0xbea <__vector_11+0xd0>
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	01 c0       	rjmp	.+2      	; 0xbec <__vector_11+0xd2>
     bea:	83 e0       	ldi	r24, 0x03	; 3
     bec:	80 93 6d 01 	sts	0x016D, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     bf0:	ac d1       	rcall	.+856    	; 0xf4a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     bf2:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     bf6:	83 ff       	sbrs	r24, 3
     bf8:	27 c0       	rjmp	.+78     	; 0xc48 <__vector_11+0x12e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     bfa:	80 91 e2 00 	lds	r24, 0x00E2
     bfe:	83 ff       	sbrs	r24, 3
     c00:	23 c0       	rjmp	.+70     	; 0xc48 <__vector_11+0x12e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     c02:	80 91 e1 00 	lds	r24, 0x00E1
     c06:	87 7f       	andi	r24, 0xF7	; 247
     c08:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	80 93 6d 01 	sts	0x016D, r24
		USB_Device_ConfigurationNumber = 0;
     c12:	10 92 69 01 	sts	0x0169, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     c16:	80 91 e1 00 	lds	r24, 0x00E1
     c1a:	8e 7f       	andi	r24, 0xFE	; 254
     c1c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     c20:	80 91 e2 00 	lds	r24, 0x00E2
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     c2a:	80 91 e2 00 	lds	r24, 0x00E2
     c2e:	80 61       	ori	r24, 0x10	; 16
     c30:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	42 e0       	ldi	r20, 0x02	; 2
     c3a:	94 de       	rcall	.-728    	; 0x964 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     c3c:	80 91 f0 00 	lds	r24, 0x00F0
     c40:	88 60       	ori	r24, 0x08	; 8
     c42:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     c46:	81 d1       	rcall	.+770    	; 0xf4a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c48:	ff 91       	pop	r31
     c4a:	ef 91       	pop	r30
     c4c:	bf 91       	pop	r27
     c4e:	af 91       	pop	r26
     c50:	9f 91       	pop	r25
     c52:	8f 91       	pop	r24
     c54:	7f 91       	pop	r23
     c56:	6f 91       	pop	r22
     c58:	5f 91       	pop	r21
     c5a:	4f 91       	pop	r20
     c5c:	3f 91       	pop	r19
     c5e:	2f 91       	pop	r18
     c60:	0f 90       	pop	r0
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	0f 90       	pop	r0
     c66:	1f 90       	pop	r1
     c68:	18 95       	reti

00000c6a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     c6a:	1f 93       	push	r17
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	ac 97       	sbiw	r28, 0x2c	; 44
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	ee e6       	ldi	r30, 0x6E	; 110
     c82:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     c84:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     c88:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     c8a:	21 e0       	ldi	r18, 0x01	; 1
     c8c:	e6 37       	cpi	r30, 0x76	; 118
     c8e:	f2 07       	cpc	r31, r18
     c90:	c9 f7       	brne	.-14     	; 0xc84 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     c92:	ab da       	rcall	.-2730   	; 0x1ea <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c94:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     c98:	83 ff       	sbrs	r24, 3
     c9a:	3f c1       	rjmp	.+638    	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     c9c:	80 91 6e 01 	lds	r24, 0x016E

		switch (USB_ControlRequest.bRequest)
     ca0:	30 91 6f 01 	lds	r19, 0x016F
     ca4:	35 30       	cpi	r19, 0x05	; 5
     ca6:	09 f4       	brne	.+2      	; 0xcaa <USB_Device_ProcessControlRequest+0x40>
     ca8:	8d c0       	rjmp	.+282    	; 0xdc4 <USB_Device_ProcessControlRequest+0x15a>
     caa:	36 30       	cpi	r19, 0x06	; 6
     cac:	40 f4       	brcc	.+16     	; 0xcbe <USB_Device_ProcessControlRequest+0x54>
     cae:	31 30       	cpi	r19, 0x01	; 1
     cb0:	e1 f1       	breq	.+120    	; 0xd2a <USB_Device_ProcessControlRequest+0xc0>
     cb2:	31 30       	cpi	r19, 0x01	; 1
     cb4:	70 f0       	brcs	.+28     	; 0xcd2 <USB_Device_ProcessControlRequest+0x68>
     cb6:	33 30       	cpi	r19, 0x03	; 3
     cb8:	09 f0       	breq	.+2      	; 0xcbc <USB_Device_ProcessControlRequest+0x52>
     cba:	2f c1       	rjmp	.+606    	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
     cbc:	36 c0       	rjmp	.+108    	; 0xd2a <USB_Device_ProcessControlRequest+0xc0>
     cbe:	38 30       	cpi	r19, 0x08	; 8
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <USB_Device_ProcessControlRequest+0x5a>
     cc2:	fd c0       	rjmp	.+506    	; 0xebe <USB_Device_ProcessControlRequest+0x254>
     cc4:	39 30       	cpi	r19, 0x09	; 9
     cc6:	09 f4       	brne	.+2      	; 0xcca <USB_Device_ProcessControlRequest+0x60>
     cc8:	0c c1       	rjmp	.+536    	; 0xee2 <USB_Device_ProcessControlRequest+0x278>
     cca:	36 30       	cpi	r19, 0x06	; 6
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <USB_Device_ProcessControlRequest+0x66>
     cce:	25 c1       	rjmp	.+586    	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
     cd0:	9c c0       	rjmp	.+312    	; 0xe0a <USB_Device_ProcessControlRequest+0x1a0>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     cd2:	80 38       	cpi	r24, 0x80	; 128
     cd4:	21 f0       	breq	.+8      	; 0xcde <USB_Device_ProcessControlRequest+0x74>
     cd6:	82 38       	cpi	r24, 0x82	; 130
     cd8:	09 f0       	breq	.+2      	; 0xcdc <USB_Device_ProcessControlRequest+0x72>
     cda:	1f c1       	rjmp	.+574    	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
     cdc:	08 c0       	rjmp	.+16     	; 0xcee <USB_Device_ProcessControlRequest+0x84>
     cde:	90 91 6a 01 	lds	r25, 0x016A
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     ce2:	80 91 6b 01 	lds	r24, 0x016B
     ce6:	88 23       	and	r24, r24
     ce8:	b1 f0       	breq	.+44     	; 0xd16 <USB_Device_ProcessControlRequest+0xac>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     cea:	92 60       	ori	r25, 0x02	; 2
     cec:	14 c0       	rjmp	.+40     	; 0xd16 <USB_Device_ProcessControlRequest+0xac>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     cee:	80 91 72 01 	lds	r24, 0x0172
     cf2:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     cf4:	85 30       	cpi	r24, 0x05	; 5
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <USB_Device_ProcessControlRequest+0x90>
     cf8:	10 c1       	rjmp	.+544    	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cfa:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     cfe:	80 91 eb 00 	lds	r24, 0x00EB
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	25 e0       	ldi	r18, 0x05	; 5
     d06:	96 95       	lsr	r25
     d08:	87 95       	ror	r24
     d0a:	2a 95       	dec	r18
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <USB_Device_ProcessControlRequest+0x9c>
     d0e:	98 2f       	mov	r25, r24
     d10:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d12:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d16:	80 91 e8 00 	lds	r24, 0x00E8
     d1a:	87 7f       	andi	r24, 0xF7	; 247
     d1c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     d20:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     d24:	10 92 f1 00 	sts	0x00F1, r1
     d28:	d5 c0       	rjmp	.+426    	; 0xed4 <USB_Device_ProcessControlRequest+0x26a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d2a:	88 23       	and	r24, r24
     d2c:	19 f0       	breq	.+6      	; 0xd34 <USB_Device_ProcessControlRequest+0xca>
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	09 f0       	breq	.+2      	; 0xd34 <USB_Device_ProcessControlRequest+0xca>
     d32:	f3 c0       	rjmp	.+486    	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	8f 71       	andi	r24, 0x1F	; 31
     d38:	90 70       	andi	r25, 0x00	; 0
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	21 f0       	breq	.+8      	; 0xd46 <USB_Device_ProcessControlRequest+0xdc>
     d3e:	02 97       	sbiw	r24, 0x02	; 2
     d40:	09 f0       	breq	.+2      	; 0xd44 <USB_Device_ProcessControlRequest+0xda>
     d42:	eb c0       	rjmp	.+470    	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
     d44:	0c c0       	rjmp	.+24     	; 0xd5e <USB_Device_ProcessControlRequest+0xf4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     d46:	80 91 70 01 	lds	r24, 0x0170
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	09 f0       	breq	.+2      	; 0xd50 <USB_Device_ProcessControlRequest+0xe6>
     d4e:	e5 c0       	rjmp	.+458    	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     d50:	10 92 6b 01 	sts	0x016B, r1
     d54:	33 30       	cpi	r19, 0x03	; 3
     d56:	81 f5       	brne	.+96     	; 0xdb8 <USB_Device_ProcessControlRequest+0x14e>
     d58:	80 93 6b 01 	sts	0x016B, r24
     d5c:	2d c0       	rjmp	.+90     	; 0xdb8 <USB_Device_ProcessControlRequest+0x14e>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     d5e:	80 91 70 01 	lds	r24, 0x0170
     d62:	88 23       	and	r24, r24
     d64:	49 f5       	brne	.+82     	; 0xdb8 <USB_Device_ProcessControlRequest+0x14e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     d66:	20 91 72 01 	lds	r18, 0x0172
     d6a:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     d6c:	82 2f       	mov	r24, r18
     d6e:	81 50       	subi	r24, 0x01	; 1
     d70:	84 30       	cpi	r24, 0x04	; 4
     d72:	08 f0       	brcs	.+2      	; 0xd76 <USB_Device_ProcessControlRequest+0x10c>
     d74:	d2 c0       	rjmp	.+420    	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d76:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     d7a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     d7e:	80 ff       	sbrs	r24, 0
     d80:	1b c0       	rjmp	.+54     	; 0xdb8 <USB_Device_ProcessControlRequest+0x14e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     d82:	33 30       	cpi	r19, 0x03	; 3
     d84:	21 f4       	brne	.+8      	; 0xd8e <USB_Device_ProcessControlRequest+0x124>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d86:	80 91 eb 00 	lds	r24, 0x00EB
     d8a:	80 62       	ori	r24, 0x20	; 32
     d8c:	13 c0       	rjmp	.+38     	; 0xdb4 <USB_Device_ProcessControlRequest+0x14a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     d8e:	80 91 eb 00 	lds	r24, 0x00EB
     d92:	80 61       	ori	r24, 0x10	; 16
     d94:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <USB_Device_ProcessControlRequest+0x138>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	2a 95       	dec	r18
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <USB_Device_ProcessControlRequest+0x134>
     da6:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     daa:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     dae:	80 91 eb 00 	lds	r24, 0x00EB
     db2:	88 60       	ori	r24, 0x08	; 8
     db4:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     db8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dbc:	80 91 e8 00 	lds	r24, 0x00E8
     dc0:	87 7f       	andi	r24, 0xF7	; 247
     dc2:	8b c0       	rjmp	.+278    	; 0xeda <USB_Device_ProcessControlRequest+0x270>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     dc4:	88 23       	and	r24, r24
     dc6:	09 f0       	breq	.+2      	; 0xdca <USB_Device_ProcessControlRequest+0x160>
     dc8:	a8 c0       	rjmp	.+336    	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     dca:	10 91 70 01 	lds	r17, 0x0170
     dce:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     dd0:	80 91 e3 00 	lds	r24, 0x00E3
     dd4:	80 78       	andi	r24, 0x80	; 128
     dd6:	81 2b       	or	r24, r17
     dd8:	80 93 e3 00 	sts	0x00E3, r24
     ddc:	80 91 e8 00 	lds	r24, 0x00E8
     de0:	87 7f       	andi	r24, 0xF7	; 247
     de2:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     de6:	f6 dd       	rcall	.-1044   	; 0x9d4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     de8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     dec:	80 ff       	sbrs	r24, 0
     dee:	fc cf       	rjmp	.-8      	; 0xde8 <USB_Device_ProcessControlRequest+0x17e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     df0:	80 91 e3 00 	lds	r24, 0x00E3
     df4:	80 68       	ori	r24, 0x80	; 128
     df6:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     dfa:	11 23       	and	r17, r17
     dfc:	11 f4       	brne	.+4      	; 0xe02 <USB_Device_ProcessControlRequest+0x198>
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <USB_Device_ProcessControlRequest+0x19a>
     e02:	83 e0       	ldi	r24, 0x03	; 3
     e04:	80 93 6d 01 	sts	0x016D, r24
     e08:	88 c0       	rjmp	.+272    	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e0a:	80 58       	subi	r24, 0x80	; 128
     e0c:	82 30       	cpi	r24, 0x02	; 2
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <USB_Device_ProcessControlRequest+0x1a8>
     e10:	84 c0       	rjmp	.+264    	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     e12:	80 91 70 01 	lds	r24, 0x0170
     e16:	90 91 71 01 	lds	r25, 0x0171
     e1a:	23 e0       	ldi	r18, 0x03	; 3
     e1c:	8c 3d       	cpi	r24, 0xDC	; 220
     e1e:	92 07       	cpc	r25, r18
     e20:	09 f0       	breq	.+2      	; 0xe24 <USB_Device_ProcessControlRequest+0x1ba>
     e22:	33 c0       	rjmp	.+102    	; 0xe8a <USB_Device_ProcessControlRequest+0x220>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     e28:	8a e2       	ldi	r24, 0x2A	; 42
     e2a:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     e2c:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e2e:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     e30:	de 01       	movw	r26, r28
     e32:	15 96       	adiw	r26, 0x05	; 5
     e34:	6e e0       	ldi	r22, 0x0E	; 14
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     e3a:	11 e2       	ldi	r17, 0x21	; 33
     e3c:	e6 2f       	mov	r30, r22
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	10 93 57 00 	sts	0x0057, r17
     e44:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     e46:	40 ff       	sbrs	r20, 0
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <USB_Device_ProcessControlRequest+0x1e6>
					{
						SerialByte >>= 4;
     e4a:	82 95       	swap	r24
     e4c:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     e4e:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     e50:	8f 70       	andi	r24, 0x0F	; 15
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     e56:	8a 30       	cpi	r24, 0x0A	; 10
     e58:	18 f0       	brcs	.+6      	; 0xe60 <USB_Device_ProcessControlRequest+0x1f6>
     e5a:	c9 01       	movw	r24, r18
     e5c:	c7 96       	adiw	r24, 0x37	; 55
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <USB_Device_ProcessControlRequest+0x1fa>
     e60:	c9 01       	movw	r24, r18
     e62:	c0 96       	adiw	r24, 0x30	; 48
     e64:	8d 93       	st	X+, r24
     e66:	9d 93       	st	X+, r25
     e68:	4f 5f       	subi	r20, 0xFF	; 255
     e6a:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e6c:	44 31       	cpi	r20, 0x14	; 20
     e6e:	51 05       	cpc	r21, r1
     e70:	29 f7       	brne	.-54     	; 0xe3c <USB_Device_ProcessControlRequest+0x1d2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     e72:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e74:	80 91 e8 00 	lds	r24, 0x00E8
     e78:	87 7f       	andi	r24, 0xF7	; 247
     e7a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     e7e:	ce 01       	movw	r24, r28
     e80:	03 96       	adiw	r24, 0x03	; 3
     e82:	6a e2       	ldi	r22, 0x2A	; 42
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	66 dc       	rcall	.-1844   	; 0x754 <Endpoint_Write_Control_Stream_LE>
     e88:	14 c0       	rjmp	.+40     	; 0xeb2 <USB_Device_ProcessControlRequest+0x248>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     e8a:	60 91 72 01 	lds	r22, 0x0172
     e8e:	70 91 73 01 	lds	r23, 0x0173
     e92:	ae 01       	movw	r20, r28
     e94:	4f 5f       	subi	r20, 0xFF	; 255
     e96:	5f 4f       	sbci	r21, 0xFF	; 255
     e98:	7a d9       	rcall	.-3340   	; 0x18e <CALLBACK_USB_GetDescriptor>
     e9a:	bc 01       	movw	r22, r24
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	09 f4       	brne	.+2      	; 0xea2 <USB_Device_ProcessControlRequest+0x238>
     ea0:	3c c0       	rjmp	.+120    	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
     ea2:	80 91 e8 00 	lds	r24, 0x00E8
     ea6:	87 7f       	andi	r24, 0xF7	; 247
     ea8:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	f4 dc       	rcall	.-1560   	; 0x89a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     eb2:	80 91 e8 00 	lds	r24, 0x00E8
     eb6:	8b 77       	andi	r24, 0x7B	; 123
     eb8:	80 93 e8 00 	sts	0x00E8, r24
     ebc:	2e c0       	rjmp	.+92     	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     ebe:	80 38       	cpi	r24, 0x80	; 128
     ec0:	61 f5       	brne	.+88     	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ec2:	80 91 e8 00 	lds	r24, 0x00E8
     ec6:	87 7f       	andi	r24, 0xF7	; 247
     ec8:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     ecc:	80 91 69 01 	lds	r24, 0x0169
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ed0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ed4:	80 91 e8 00 	lds	r24, 0x00E8
     ed8:	8e 77       	andi	r24, 0x7E	; 126
     eda:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     ede:	7a dd       	rcall	.-1292   	; 0x9d4 <Endpoint_ClearStatusStage>
     ee0:	1c c0       	rjmp	.+56     	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ee2:	88 23       	and	r24, r24
     ee4:	d1 f4       	brne	.+52     	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     ee6:	90 91 70 01 	lds	r25, 0x0170
     eea:	92 30       	cpi	r25, 0x02	; 2
     eec:	b0 f4       	brcc	.+44     	; 0xf1a <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eee:	80 91 e8 00 	lds	r24, 0x00E8
     ef2:	87 7f       	andi	r24, 0xF7	; 247
     ef4:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     ef8:	90 93 69 01 	sts	0x0169, r25

	Endpoint_ClearStatusStage();
     efc:	6b dd       	rcall	.-1322   	; 0x9d4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     efe:	80 91 69 01 	lds	r24, 0x0169
     f02:	88 23       	and	r24, r24
     f04:	31 f4       	brne	.+12     	; 0xf12 <USB_Device_ProcessControlRequest+0x2a8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f06:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f0a:	87 fd       	sbrc	r24, 7
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <USB_Device_ProcessControlRequest+0x2a8>
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <USB_Device_ProcessControlRequest+0x2aa>
     f12:	84 e0       	ldi	r24, 0x04	; 4
     f14:	80 93 6d 01 	sts	0x016D, r24

	EVENT_USB_Device_ConfigurationChanged();
     f18:	00 db       	rcall	.-2560   	; 0x51a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f1a:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     f1e:	83 ff       	sbrs	r24, 3
     f20:	0a c0       	rjmp	.+20     	; 0xf36 <USB_Device_ProcessControlRequest+0x2cc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f22:	80 91 e8 00 	lds	r24, 0x00E8
     f26:	87 7f       	andi	r24, 0xF7	; 247
     f28:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     f2c:	80 91 eb 00 	lds	r24, 0x00EB
     f30:	80 62       	ori	r24, 0x20	; 32
     f32:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     f36:	ac 96       	adiw	r28, 0x2c	; 44
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f4a:	08 95       	ret

00000f4c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     f4c:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     f4e:	80 91 6d 01 	lds	r24, 0x016D
     f52:	88 23       	and	r24, r24
     f54:	71 f0       	breq	.+28     	; 0xf72 <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f56:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     f5a:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f5e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f62:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     f66:	83 ff       	sbrs	r24, 3
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
     f6a:	7f de       	rcall	.-770    	; 0xc6a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f6c:	1f 70       	andi	r17, 0x0F	; 15
     f6e:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     f72:	1f 91       	pop	r17
     f74:	08 95       	ret

00000f76 <PQShiftPriority>:
	ItemPQ element = pq->items[chosenIndex];
	
	return element;
}

void PQShiftPriority(PQ pq, int k) {
     f76:	dc 01       	movw	r26, r24
	assert(pq != NULL);
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	29 f0       	breq	.+10     	; 0xf86 <PQShiftPriority+0x10>
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	10 c0       	rjmp	.+32     	; 0xfa6 <PQShiftPriority+0x30>
     f86:	a2 d4       	rcall	.+2372   	; 0x18cc <abort>
	for (int i = 0; i < pq->numItems; i++) {
		pq->items[i].value -= k;
     f88:	ed 91       	ld	r30, X+
     f8a:	fc 91       	ld	r31, X
     f8c:	11 97       	sbiw	r26, 0x01	; 1
     f8e:	e2 0f       	add	r30, r18
     f90:	f3 1f       	adc	r31, r19
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	86 1b       	sub	r24, r22
     f98:	97 0b       	sbc	r25, r23
     f9a:	93 83       	std	Z+3, r25	; 0x03
     f9c:	82 83       	std	Z+2, r24	; 0x02
	return element;
}

void PQShiftPriority(PQ pq, int k) {
	assert(pq != NULL);
	for (int i = 0; i < pq->numItems; i++) {
     f9e:	4f 5f       	subi	r20, 0xFF	; 255
     fa0:	5f 4f       	sbci	r21, 0xFF	; 255
     fa2:	2c 5f       	subi	r18, 0xFC	; 252
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	12 96       	adiw	r26, 0x02	; 2
     fa8:	8d 91       	ld	r24, X+
     faa:	9c 91       	ld	r25, X
     fac:	13 97       	sbiw	r26, 0x03	; 3
     fae:	48 17       	cp	r20, r24
     fb0:	59 07       	cpc	r21, r25
     fb2:	54 f3       	brlt	.-44     	; 0xf88 <PQShiftPriority+0x12>
		pq->items[i].value -= k;
	}
}
     fb4:	08 95       	ret

00000fb6 <PQPeek>:
	free(pq);
}


//Jonah Meggs
ItemPQ PQPeek(PQ pq) {
     fb6:	ef 92       	push	r14
     fb8:	ff 92       	push	r15
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	ec 01       	movw	r28, r24
	assert(pq != NULL);
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	61 f0       	breq	.+24     	; 0xfe0 <PQPeek+0x2a>
	assert(pq->numItems > 0);
     fc8:	ea 80       	ldd	r14, Y+2	; 0x02
     fca:	fb 80       	ldd	r15, Y+3	; 0x03
     fcc:	1e 14       	cp	r1, r14
     fce:	1f 04       	cpc	r1, r15
     fd0:	3c f4       	brge	.+14     	; 0xfe0 <PQPeek+0x2a>
     fd2:	00 e0       	ldi	r16, 0x00	; 0
     fd4:	10 e0       	ldi	r17, 0x00	; 0
     fd6:	41 e0       	ldi	r20, 0x01	; 1
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	64 e0       	ldi	r22, 0x04	; 4
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	14 c0       	rjmp	.+40     	; 0x1008 <PQPeek+0x52>
     fe0:	75 d4       	rcall	.+2282   	; 0x18cc <abort>
	
	// Find earliest element with smallest value (highest priority)
	int chosenIndex = 0;
	for (int i = 1; i < pq->numItems; i++) {
		if (pq->items[i].value < pq->items[chosenIndex].value) {
     fe2:	fd 01       	movw	r30, r26
     fe4:	e6 0f       	add	r30, r22
     fe6:	f7 1f       	adc	r31, r23
     fe8:	a8 0f       	add	r26, r24
     fea:	b9 1f       	adc	r27, r25
     fec:	22 81       	ldd	r18, Z+2	; 0x02
     fee:	33 81       	ldd	r19, Z+3	; 0x03
     ff0:	12 96       	adiw	r26, 0x02	; 2
     ff2:	8d 91       	ld	r24, X+
     ff4:	9c 91       	ld	r25, X
     ff6:	13 97       	sbiw	r26, 0x03	; 3
     ff8:	28 17       	cp	r18, r24
     ffa:	39 07       	cpc	r19, r25
     ffc:	0c f4       	brge	.+2      	; 0x1000 <PQPeek+0x4a>
     ffe:	8a 01       	movw	r16, r20
	assert(pq != NULL);
	assert(pq->numItems > 0);
	
	// Find earliest element with smallest value (highest priority)
	int chosenIndex = 0;
	for (int i = 1; i < pq->numItems; i++) {
    1000:	4f 5f       	subi	r20, 0xFF	; 255
    1002:	5f 4f       	sbci	r21, 0xFF	; 255
    1004:	6c 5f       	subi	r22, 0xFC	; 252
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	a8 81       	ld	r26, Y
    100a:	b9 81       	ldd	r27, Y+1	; 0x01
    100c:	c8 01       	movw	r24, r16
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	4e 15       	cp	r20, r14
    1018:	5f 05       	cpc	r21, r15
    101a:	1c f3       	brlt	.-58     	; 0xfe2 <PQPeek+0x2c>
		if (pq->items[i].value < pq->items[chosenIndex].value) {
			chosenIndex = i;
		}
	}
	
	ItemPQ element = pq->items[chosenIndex];
    101c:	fd 01       	movw	r30, r26
    101e:	e8 0f       	add	r30, r24
    1020:	f9 1f       	adc	r31, r25
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
	
	return element;
}
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	08 95       	ret

00001038 <PQIsEmpty>:
			return;
		}
	}
}

bool PQIsEmpty(PQ pq) {
    1038:	fc 01       	movw	r30, r24
	assert(pq != NULL);
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	09 f4       	brne	.+2      	; 0x1040 <PQIsEmpty+0x8>
    103e:	46 d4       	rcall	.+2188   	; 0x18cc <abort>
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	82 81       	ldd	r24, Z+2	; 0x02
    1044:	93 81       	ldd	r25, Z+3	; 0x03
    1046:	89 2b       	or	r24, r25
    1048:	09 f4       	brne	.+2      	; 0x104c <PQIsEmpty+0x14>
    104a:	21 e0       	ldi	r18, 0x01	; 1
	
	return (pq->numItems == 0);
}
    104c:	82 2f       	mov	r24, r18
    104e:	08 95       	ret

00001050 <PQDequeue>:
	// Add the new item to the end
	pq->items[pq->numItems] = item;
	pq->numItems++;
}

ItemPQ PQDequeue(PQ pq) {
    1050:	cf 92       	push	r12
    1052:	df 92       	push	r13
    1054:	ef 92       	push	r14
    1056:	ff 92       	push	r15
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	8c 01       	movw	r16, r24
	assert(pq != NULL);
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	79 f0       	breq	.+30     	; 0x1084 <PQDequeue+0x34>
	assert(pq->numItems > 0);
    1066:	dc 01       	movw	r26, r24
    1068:	12 96       	adiw	r26, 0x02	; 2
    106a:	ed 90       	ld	r14, X+
    106c:	fc 90       	ld	r15, X
    106e:	13 97       	sbiw	r26, 0x03	; 3
    1070:	1e 14       	cp	r1, r14
    1072:	1f 04       	cpc	r1, r15
    1074:	3c f4       	brge	.+14     	; 0x1084 <PQDequeue+0x34>
    1076:	c0 e0       	ldi	r28, 0x00	; 0
    1078:	d0 e0       	ldi	r29, 0x00	; 0
    107a:	41 e0       	ldi	r20, 0x01	; 1
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	64 e0       	ldi	r22, 0x04	; 4
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	14 c0       	rjmp	.+40     	; 0x10ac <PQDequeue+0x5c>
    1084:	23 d4       	rcall	.+2118   	; 0x18cc <abort>
	
	// Find earliest element with smallest value (highest priority)
	int chosenIndex = 0;
	for (int i = 1; i < pq->numItems; i++) {
		if (pq->items[i].value < pq->items[chosenIndex].value) {
    1086:	fd 01       	movw	r30, r26
    1088:	e6 0f       	add	r30, r22
    108a:	f7 1f       	adc	r31, r23
    108c:	a8 0f       	add	r26, r24
    108e:	b9 1f       	adc	r27, r25
    1090:	22 81       	ldd	r18, Z+2	; 0x02
    1092:	33 81       	ldd	r19, Z+3	; 0x03
    1094:	12 96       	adiw	r26, 0x02	; 2
    1096:	8d 91       	ld	r24, X+
    1098:	9c 91       	ld	r25, X
    109a:	13 97       	sbiw	r26, 0x03	; 3
    109c:	28 17       	cp	r18, r24
    109e:	39 07       	cpc	r19, r25
    10a0:	0c f4       	brge	.+2      	; 0x10a4 <PQDequeue+0x54>
    10a2:	ea 01       	movw	r28, r20
	assert(pq != NULL);
	assert(pq->numItems > 0);
	
	// Find earliest element with smallest value (highest priority)
	int chosenIndex = 0;
	for (int i = 1; i < pq->numItems; i++) {
    10a4:	4f 5f       	subi	r20, 0xFF	; 255
    10a6:	5f 4f       	sbci	r21, 0xFF	; 255
    10a8:	6c 5f       	subi	r22, 0xFC	; 252
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	f8 01       	movw	r30, r16
    10ae:	a0 81       	ld	r26, Z
    10b0:	b1 81       	ldd	r27, Z+1	; 0x01
    10b2:	ce 01       	movw	r24, r28
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	4e 15       	cp	r20, r14
    10be:	5f 05       	cpc	r21, r15
    10c0:	14 f3       	brlt	.-60     	; 0x1086 <PQDequeue+0x36>
		if (pq->items[i].value < pq->items[chosenIndex].value) {
			chosenIndex = i;
		}
	}
	
	ItemPQ element = pq->items[chosenIndex];
    10c2:	bc 01       	movw	r22, r24
    10c4:	fd 01       	movw	r30, r26
    10c6:	e8 0f       	add	r30, r24
    10c8:	f9 1f       	adc	r31, r25
    10ca:	f0 80       	ld	r15, Z
    10cc:	e1 80       	ldd	r14, Z+1	; 0x01
    10ce:	d2 80       	ldd	r13, Z+2	; 0x02
    10d0:	c3 80       	ldd	r12, Z+3	; 0x03
	// Shuffle down everything after that element
	for (int i = chosenIndex + 1; i < pq->numItems; i++) {
    10d2:	9e 01       	movw	r18, r28
    10d4:	2f 5f       	subi	r18, 0xFF	; 255
    10d6:	3f 4f       	sbci	r19, 0xFF	; 255
    10d8:	a9 01       	movw	r20, r18
    10da:	44 0f       	add	r20, r20
    10dc:	55 1f       	adc	r21, r21
    10de:	44 0f       	add	r20, r20
    10e0:	55 1f       	adc	r21, r21
    10e2:	17 c0       	rjmp	.+46     	; 0x1112 <PQDequeue+0xc2>
		pq->items[i - 1] = pq->items[i];
    10e4:	d8 01       	movw	r26, r16
    10e6:	ed 91       	ld	r30, X+
    10e8:	fc 91       	ld	r31, X
    10ea:	df 01       	movw	r26, r30
    10ec:	a4 0f       	add	r26, r20
    10ee:	b5 1f       	adc	r27, r21
    10f0:	8d 91       	ld	r24, X+
    10f2:	9d 91       	ld	r25, X+
    10f4:	0d 90       	ld	r0, X+
    10f6:	bc 91       	ld	r27, X
    10f8:	a0 2d       	mov	r26, r0
    10fa:	e6 0f       	add	r30, r22
    10fc:	f7 1f       	adc	r31, r23
    10fe:	80 83       	st	Z, r24
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	a2 83       	std	Z+2, r26	; 0x02
    1104:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	
	ItemPQ element = pq->items[chosenIndex];
	// Shuffle down everything after that element
	for (int i = chosenIndex + 1; i < pq->numItems; i++) {
    1106:	2f 5f       	subi	r18, 0xFF	; 255
    1108:	3f 4f       	sbci	r19, 0xFF	; 255
    110a:	6c 5f       	subi	r22, 0xFC	; 252
    110c:	7f 4f       	sbci	r23, 0xFF	; 255
    110e:	4c 5f       	subi	r20, 0xFC	; 252
    1110:	5f 4f       	sbci	r21, 0xFF	; 255
    1112:	f8 01       	movw	r30, r16
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	93 81       	ldd	r25, Z+3	; 0x03
    1118:	28 17       	cp	r18, r24
    111a:	39 07       	cpc	r19, r25
    111c:	1c f3       	brlt	.-58     	; 0x10e4 <PQDequeue+0x94>
		pq->items[i - 1] = pq->items[i];
	}
	pq->numItems--;
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	93 83       	std	Z+3, r25	; 0x03
    1122:	82 83       	std	Z+2, r24	; 0x02
	
	return element;
}
    1124:	6f 2d       	mov	r22, r15
    1126:	7e 2d       	mov	r23, r14
    1128:	8d 2d       	mov	r24, r13
    112a:	9c 2d       	mov	r25, r12
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	08 95       	ret

0000113e <PQAdd>:
	pq->numItems = 0;
	pq->capacity = DEFAULT_SIZE;
	return pq;
}

void PQAdd(PQ pq, ItemPQ item) {
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	ec 01       	movw	r28, r24
    114c:	7a 01       	movw	r14, r20
    114e:	8b 01       	movw	r16, r22
	assert(pq != NULL);
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	09 f4       	brne	.+2      	; 0x1156 <PQAdd+0x18>
    1154:	bb d3       	rcall	.+1910   	; 0x18cc <abort>
			return;
		}
	}*/
	
	// If the PQ is full, expand it (i.e., double its capacity)
	if (pq->numItems == pq->capacity) {
    1156:	6a 81       	ldd	r22, Y+2	; 0x02
    1158:	7b 81       	ldd	r23, Y+3	; 0x03
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	9d 81       	ldd	r25, Y+5	; 0x05
    115e:	68 17       	cp	r22, r24
    1160:	79 07       	cpc	r23, r25
    1162:	c9 f4       	brne	.+50     	; 0x1196 <PQAdd+0x58>
		pq->capacity *= 2;
    1164:	66 0f       	add	r22, r22
    1166:	77 1f       	adc	r23, r23
    1168:	7d 83       	std	Y+5, r23	; 0x05
    116a:	6c 83       	std	Y+4, r22	; 0x04
		pq->items = realloc(pq->items, pq->capacity * sizeof(ItemPQ));
    116c:	66 0f       	add	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	66 0f       	add	r22, r22
    1172:	77 1f       	adc	r23, r23
    1174:	88 81       	ld	r24, Y
    1176:	99 81       	ldd	r25, Y+1	; 0x01
    1178:	e2 d2       	rcall	.+1476   	; 0x173e <realloc>
    117a:	99 83       	std	Y+1, r25	; 0x01
    117c:	88 83       	st	Y, r24
		if (pq->items == NULL) {
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	51 f4       	brne	.+20     	; 0x1196 <PQAdd+0x58>
			fprintf(stderr, "Couldn't expand PQ!\n");
    1182:	60 91 7e 01 	lds	r22, 0x017E
    1186:	70 91 7f 01 	lds	r23, 0x017F
    118a:	87 e2       	ldi	r24, 0x27	; 39
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	ab d3       	rcall	.+1878   	; 0x18e6 <fputs>
			exit(1);
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	07 d4       	rcall	.+2062   	; 0x19a4 <_exit>
		}
	}
	
	// Add the new item to the end
	pq->items[pq->numItems] = item;
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	9b 81       	ldd	r25, Y+3	; 0x03
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	e8 81       	ld	r30, Y
    11a4:	f9 81       	ldd	r31, Y+1	; 0x01
    11a6:	e8 0f       	add	r30, r24
    11a8:	f9 1f       	adc	r31, r25
    11aa:	e0 82       	st	Z, r14
    11ac:	f1 82       	std	Z+1, r15	; 0x01
    11ae:	02 83       	std	Z+2, r16	; 0x02
    11b0:	13 83       	std	Z+3, r17	; 0x03
	pq->numItems++;
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	9b 81       	ldd	r25, Y+3	; 0x03
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	9b 83       	std	Y+3, r25	; 0x03
    11ba:	8a 83       	std	Y+2, r24	; 0x02
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	08 95       	ret

000011ca <PQNew>:
	ItemPQ *items;
	int numItems;
	int capacity;
};

PQ PQNew(void) {
    11ca:	1f 93       	push	r17
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
	PQ pq = malloc(sizeof(*pq));
    11d0:	86 e0       	ldi	r24, 0x06	; 6
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	af d1       	rcall	.+862    	; 0x1534 <malloc>
    11d6:	19 2f       	mov	r17, r25
    11d8:	c8 2f       	mov	r28, r24
    11da:	d9 2f       	mov	r29, r25
	if (pq == NULL) {
    11dc:	20 97       	sbiw	r28, 0x00	; 0
    11de:	51 f4       	brne	.+20     	; 0x11f4 <PQNew+0x2a>
		fprintf(stderr, "Couldn't allocate PQ!\n");
    11e0:	60 91 7e 01 	lds	r22, 0x017E
    11e4:	70 91 7f 01 	lds	r23, 0x017F
    11e8:	8c e3       	ldi	r24, 0x3C	; 60
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	7c d3       	rcall	.+1784   	; 0x18e6 <fputs>
		exit(1);
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	d8 d3       	rcall	.+1968   	; 0x19a4 <_exit>
	}
	
	pq->items = malloc(DEFAULT_SIZE * sizeof(ItemPQ));
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	9d d1       	rcall	.+826    	; 0x1534 <malloc>
    11fa:	88 83       	st	Y, r24
    11fc:	99 83       	std	Y+1, r25	; 0x01
	if (pq == NULL) {
		fprintf(stderr, "Couldn't allocate PQ!\n");
		exit(1);
	}
	
	pq->numItems = 0;
    11fe:	1b 82       	std	Y+3, r1	; 0x03
    1200:	1a 82       	std	Y+2, r1	; 0x02
	pq->capacity = DEFAULT_SIZE;
    1202:	80 e4       	ldi	r24, 0x40	; 64
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	9d 83       	std	Y+5, r25	; 0x05
    1208:	8c 83       	std	Y+4, r24	; 0x04
	return pq;
}
    120a:	8c 2f       	mov	r24, r28
    120c:	91 2f       	mov	r25, r17
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	08 95       	ret

00001216 <__subsf3>:
    1216:	50 58       	subi	r21, 0x80	; 128

00001218 <__addsf3>:
    1218:	bb 27       	eor	r27, r27
    121a:	aa 27       	eor	r26, r26
    121c:	0e d0       	rcall	.+28     	; 0x123a <__addsf3x>
    121e:	e5 c0       	rjmp	.+458    	; 0x13ea <__fp_round>
    1220:	d6 d0       	rcall	.+428    	; 0x13ce <__fp_pscA>
    1222:	30 f0       	brcs	.+12     	; 0x1230 <__addsf3+0x18>
    1224:	db d0       	rcall	.+438    	; 0x13dc <__fp_pscB>
    1226:	20 f0       	brcs	.+8      	; 0x1230 <__addsf3+0x18>
    1228:	31 f4       	brne	.+12     	; 0x1236 <__addsf3+0x1e>
    122a:	9f 3f       	cpi	r25, 0xFF	; 255
    122c:	11 f4       	brne	.+4      	; 0x1232 <__addsf3+0x1a>
    122e:	1e f4       	brtc	.+6      	; 0x1236 <__addsf3+0x1e>
    1230:	cb c0       	rjmp	.+406    	; 0x13c8 <__fp_nan>
    1232:	0e f4       	brtc	.+2      	; 0x1236 <__addsf3+0x1e>
    1234:	e0 95       	com	r30
    1236:	e7 fb       	bst	r30, 7
    1238:	c1 c0       	rjmp	.+386    	; 0x13bc <__fp_inf>

0000123a <__addsf3x>:
    123a:	e9 2f       	mov	r30, r25
    123c:	e7 d0       	rcall	.+462    	; 0x140c <__fp_split3>
    123e:	80 f3       	brcs	.-32     	; 0x1220 <__addsf3+0x8>
    1240:	ba 17       	cp	r27, r26
    1242:	62 07       	cpc	r22, r18
    1244:	73 07       	cpc	r23, r19
    1246:	84 07       	cpc	r24, r20
    1248:	95 07       	cpc	r25, r21
    124a:	18 f0       	brcs	.+6      	; 0x1252 <__addsf3x+0x18>
    124c:	71 f4       	brne	.+28     	; 0x126a <__addsf3x+0x30>
    124e:	9e f5       	brtc	.+102    	; 0x12b6 <__addsf3x+0x7c>
    1250:	ff c0       	rjmp	.+510    	; 0x1450 <__fp_zero>
    1252:	0e f4       	brtc	.+2      	; 0x1256 <__addsf3x+0x1c>
    1254:	e0 95       	com	r30
    1256:	0b 2e       	mov	r0, r27
    1258:	ba 2f       	mov	r27, r26
    125a:	a0 2d       	mov	r26, r0
    125c:	0b 01       	movw	r0, r22
    125e:	b9 01       	movw	r22, r18
    1260:	90 01       	movw	r18, r0
    1262:	0c 01       	movw	r0, r24
    1264:	ca 01       	movw	r24, r20
    1266:	a0 01       	movw	r20, r0
    1268:	11 24       	eor	r1, r1
    126a:	ff 27       	eor	r31, r31
    126c:	59 1b       	sub	r21, r25
    126e:	99 f0       	breq	.+38     	; 0x1296 <__addsf3x+0x5c>
    1270:	59 3f       	cpi	r21, 0xF9	; 249
    1272:	50 f4       	brcc	.+20     	; 0x1288 <__addsf3x+0x4e>
    1274:	50 3e       	cpi	r21, 0xE0	; 224
    1276:	68 f1       	brcs	.+90     	; 0x12d2 <__addsf3x+0x98>
    1278:	1a 16       	cp	r1, r26
    127a:	f0 40       	sbci	r31, 0x00	; 0
    127c:	a2 2f       	mov	r26, r18
    127e:	23 2f       	mov	r18, r19
    1280:	34 2f       	mov	r19, r20
    1282:	44 27       	eor	r20, r20
    1284:	58 5f       	subi	r21, 0xF8	; 248
    1286:	f3 cf       	rjmp	.-26     	; 0x126e <__addsf3x+0x34>
    1288:	46 95       	lsr	r20
    128a:	37 95       	ror	r19
    128c:	27 95       	ror	r18
    128e:	a7 95       	ror	r26
    1290:	f0 40       	sbci	r31, 0x00	; 0
    1292:	53 95       	inc	r21
    1294:	c9 f7       	brne	.-14     	; 0x1288 <__addsf3x+0x4e>
    1296:	7e f4       	brtc	.+30     	; 0x12b6 <__addsf3x+0x7c>
    1298:	1f 16       	cp	r1, r31
    129a:	ba 0b       	sbc	r27, r26
    129c:	62 0b       	sbc	r22, r18
    129e:	73 0b       	sbc	r23, r19
    12a0:	84 0b       	sbc	r24, r20
    12a2:	ba f0       	brmi	.+46     	; 0x12d2 <__addsf3x+0x98>
    12a4:	91 50       	subi	r25, 0x01	; 1
    12a6:	a1 f0       	breq	.+40     	; 0x12d0 <__addsf3x+0x96>
    12a8:	ff 0f       	add	r31, r31
    12aa:	bb 1f       	adc	r27, r27
    12ac:	66 1f       	adc	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	88 1f       	adc	r24, r24
    12b2:	c2 f7       	brpl	.-16     	; 0x12a4 <__addsf3x+0x6a>
    12b4:	0e c0       	rjmp	.+28     	; 0x12d2 <__addsf3x+0x98>
    12b6:	ba 0f       	add	r27, r26
    12b8:	62 1f       	adc	r22, r18
    12ba:	73 1f       	adc	r23, r19
    12bc:	84 1f       	adc	r24, r20
    12be:	48 f4       	brcc	.+18     	; 0x12d2 <__addsf3x+0x98>
    12c0:	87 95       	ror	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	b7 95       	ror	r27
    12c8:	f7 95       	ror	r31
    12ca:	9e 3f       	cpi	r25, 0xFE	; 254
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <__addsf3x+0x96>
    12ce:	b3 cf       	rjmp	.-154    	; 0x1236 <__addsf3+0x1e>
    12d0:	93 95       	inc	r25
    12d2:	88 0f       	add	r24, r24
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <__addsf3x+0x9e>
    12d6:	99 27       	eor	r25, r25
    12d8:	ee 0f       	add	r30, r30
    12da:	97 95       	ror	r25
    12dc:	87 95       	ror	r24
    12de:	08 95       	ret

000012e0 <__fixsfsi>:
    12e0:	04 d0       	rcall	.+8      	; 0x12ea <__fixunssfsi>
    12e2:	68 94       	set
    12e4:	b1 11       	cpse	r27, r1
    12e6:	b5 c0       	rjmp	.+362    	; 0x1452 <__fp_szero>
    12e8:	08 95       	ret

000012ea <__fixunssfsi>:
    12ea:	98 d0       	rcall	.+304    	; 0x141c <__fp_splitA>
    12ec:	88 f0       	brcs	.+34     	; 0x1310 <__fixunssfsi+0x26>
    12ee:	9f 57       	subi	r25, 0x7F	; 127
    12f0:	90 f0       	brcs	.+36     	; 0x1316 <__fixunssfsi+0x2c>
    12f2:	b9 2f       	mov	r27, r25
    12f4:	99 27       	eor	r25, r25
    12f6:	b7 51       	subi	r27, 0x17	; 23
    12f8:	a0 f0       	brcs	.+40     	; 0x1322 <__fixunssfsi+0x38>
    12fa:	d1 f0       	breq	.+52     	; 0x1330 <__fixunssfsi+0x46>
    12fc:	66 0f       	add	r22, r22
    12fe:	77 1f       	adc	r23, r23
    1300:	88 1f       	adc	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	1a f0       	brmi	.+6      	; 0x130c <__fixunssfsi+0x22>
    1306:	ba 95       	dec	r27
    1308:	c9 f7       	brne	.-14     	; 0x12fc <__fixunssfsi+0x12>
    130a:	12 c0       	rjmp	.+36     	; 0x1330 <__fixunssfsi+0x46>
    130c:	b1 30       	cpi	r27, 0x01	; 1
    130e:	81 f0       	breq	.+32     	; 0x1330 <__fixunssfsi+0x46>
    1310:	9f d0       	rcall	.+318    	; 0x1450 <__fp_zero>
    1312:	b1 e0       	ldi	r27, 0x01	; 1
    1314:	08 95       	ret
    1316:	9c c0       	rjmp	.+312    	; 0x1450 <__fp_zero>
    1318:	67 2f       	mov	r22, r23
    131a:	78 2f       	mov	r23, r24
    131c:	88 27       	eor	r24, r24
    131e:	b8 5f       	subi	r27, 0xF8	; 248
    1320:	39 f0       	breq	.+14     	; 0x1330 <__fixunssfsi+0x46>
    1322:	b9 3f       	cpi	r27, 0xF9	; 249
    1324:	cc f3       	brlt	.-14     	; 0x1318 <__fixunssfsi+0x2e>
    1326:	86 95       	lsr	r24
    1328:	77 95       	ror	r23
    132a:	67 95       	ror	r22
    132c:	b3 95       	inc	r27
    132e:	d9 f7       	brne	.-10     	; 0x1326 <__fixunssfsi+0x3c>
    1330:	3e f4       	brtc	.+14     	; 0x1340 <__fixunssfsi+0x56>
    1332:	90 95       	com	r25
    1334:	80 95       	com	r24
    1336:	70 95       	com	r23
    1338:	61 95       	neg	r22
    133a:	7f 4f       	sbci	r23, 0xFF	; 255
    133c:	8f 4f       	sbci	r24, 0xFF	; 255
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	08 95       	ret

00001342 <__floatunsisf>:
    1342:	e8 94       	clt
    1344:	09 c0       	rjmp	.+18     	; 0x1358 <__floatsisf+0x12>

00001346 <__floatsisf>:
    1346:	97 fb       	bst	r25, 7
    1348:	3e f4       	brtc	.+14     	; 0x1358 <__floatsisf+0x12>
    134a:	90 95       	com	r25
    134c:	80 95       	com	r24
    134e:	70 95       	com	r23
    1350:	61 95       	neg	r22
    1352:	7f 4f       	sbci	r23, 0xFF	; 255
    1354:	8f 4f       	sbci	r24, 0xFF	; 255
    1356:	9f 4f       	sbci	r25, 0xFF	; 255
    1358:	99 23       	and	r25, r25
    135a:	a9 f0       	breq	.+42     	; 0x1386 <__floatsisf+0x40>
    135c:	f9 2f       	mov	r31, r25
    135e:	96 e9       	ldi	r25, 0x96	; 150
    1360:	bb 27       	eor	r27, r27
    1362:	93 95       	inc	r25
    1364:	f6 95       	lsr	r31
    1366:	87 95       	ror	r24
    1368:	77 95       	ror	r23
    136a:	67 95       	ror	r22
    136c:	b7 95       	ror	r27
    136e:	f1 11       	cpse	r31, r1
    1370:	f8 cf       	rjmp	.-16     	; 0x1362 <__floatsisf+0x1c>
    1372:	fa f4       	brpl	.+62     	; 0x13b2 <__floatsisf+0x6c>
    1374:	bb 0f       	add	r27, r27
    1376:	11 f4       	brne	.+4      	; 0x137c <__floatsisf+0x36>
    1378:	60 ff       	sbrs	r22, 0
    137a:	1b c0       	rjmp	.+54     	; 0x13b2 <__floatsisf+0x6c>
    137c:	6f 5f       	subi	r22, 0xFF	; 255
    137e:	7f 4f       	sbci	r23, 0xFF	; 255
    1380:	8f 4f       	sbci	r24, 0xFF	; 255
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	16 c0       	rjmp	.+44     	; 0x13b2 <__floatsisf+0x6c>
    1386:	88 23       	and	r24, r24
    1388:	11 f0       	breq	.+4      	; 0x138e <__floatsisf+0x48>
    138a:	96 e9       	ldi	r25, 0x96	; 150
    138c:	11 c0       	rjmp	.+34     	; 0x13b0 <__floatsisf+0x6a>
    138e:	77 23       	and	r23, r23
    1390:	21 f0       	breq	.+8      	; 0x139a <__floatsisf+0x54>
    1392:	9e e8       	ldi	r25, 0x8E	; 142
    1394:	87 2f       	mov	r24, r23
    1396:	76 2f       	mov	r23, r22
    1398:	05 c0       	rjmp	.+10     	; 0x13a4 <__floatsisf+0x5e>
    139a:	66 23       	and	r22, r22
    139c:	71 f0       	breq	.+28     	; 0x13ba <__floatsisf+0x74>
    139e:	96 e8       	ldi	r25, 0x86	; 134
    13a0:	86 2f       	mov	r24, r22
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	2a f0       	brmi	.+10     	; 0x13b2 <__floatsisf+0x6c>
    13a8:	9a 95       	dec	r25
    13aa:	66 0f       	add	r22, r22
    13ac:	77 1f       	adc	r23, r23
    13ae:	88 1f       	adc	r24, r24
    13b0:	da f7       	brpl	.-10     	; 0x13a8 <__floatsisf+0x62>
    13b2:	88 0f       	add	r24, r24
    13b4:	96 95       	lsr	r25
    13b6:	87 95       	ror	r24
    13b8:	97 f9       	bld	r25, 7
    13ba:	08 95       	ret

000013bc <__fp_inf>:
    13bc:	97 f9       	bld	r25, 7
    13be:	9f 67       	ori	r25, 0x7F	; 127
    13c0:	80 e8       	ldi	r24, 0x80	; 128
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	08 95       	ret

000013c8 <__fp_nan>:
    13c8:	9f ef       	ldi	r25, 0xFF	; 255
    13ca:	80 ec       	ldi	r24, 0xC0	; 192
    13cc:	08 95       	ret

000013ce <__fp_pscA>:
    13ce:	00 24       	eor	r0, r0
    13d0:	0a 94       	dec	r0
    13d2:	16 16       	cp	r1, r22
    13d4:	17 06       	cpc	r1, r23
    13d6:	18 06       	cpc	r1, r24
    13d8:	09 06       	cpc	r0, r25
    13da:	08 95       	ret

000013dc <__fp_pscB>:
    13dc:	00 24       	eor	r0, r0
    13de:	0a 94       	dec	r0
    13e0:	12 16       	cp	r1, r18
    13e2:	13 06       	cpc	r1, r19
    13e4:	14 06       	cpc	r1, r20
    13e6:	05 06       	cpc	r0, r21
    13e8:	08 95       	ret

000013ea <__fp_round>:
    13ea:	09 2e       	mov	r0, r25
    13ec:	03 94       	inc	r0
    13ee:	00 0c       	add	r0, r0
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <__fp_round+0xc>
    13f2:	88 23       	and	r24, r24
    13f4:	52 f0       	brmi	.+20     	; 0x140a <__fp_round+0x20>
    13f6:	bb 0f       	add	r27, r27
    13f8:	40 f4       	brcc	.+16     	; 0x140a <__fp_round+0x20>
    13fa:	bf 2b       	or	r27, r31
    13fc:	11 f4       	brne	.+4      	; 0x1402 <__fp_round+0x18>
    13fe:	60 ff       	sbrs	r22, 0
    1400:	04 c0       	rjmp	.+8      	; 0x140a <__fp_round+0x20>
    1402:	6f 5f       	subi	r22, 0xFF	; 255
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
    1406:	8f 4f       	sbci	r24, 0xFF	; 255
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	08 95       	ret

0000140c <__fp_split3>:
    140c:	57 fd       	sbrc	r21, 7
    140e:	90 58       	subi	r25, 0x80	; 128
    1410:	44 0f       	add	r20, r20
    1412:	55 1f       	adc	r21, r21
    1414:	59 f0       	breq	.+22     	; 0x142c <__fp_splitA+0x10>
    1416:	5f 3f       	cpi	r21, 0xFF	; 255
    1418:	71 f0       	breq	.+28     	; 0x1436 <__fp_splitA+0x1a>
    141a:	47 95       	ror	r20

0000141c <__fp_splitA>:
    141c:	88 0f       	add	r24, r24
    141e:	97 fb       	bst	r25, 7
    1420:	99 1f       	adc	r25, r25
    1422:	61 f0       	breq	.+24     	; 0x143c <__fp_splitA+0x20>
    1424:	9f 3f       	cpi	r25, 0xFF	; 255
    1426:	79 f0       	breq	.+30     	; 0x1446 <__fp_splitA+0x2a>
    1428:	87 95       	ror	r24
    142a:	08 95       	ret
    142c:	12 16       	cp	r1, r18
    142e:	13 06       	cpc	r1, r19
    1430:	14 06       	cpc	r1, r20
    1432:	55 1f       	adc	r21, r21
    1434:	f2 cf       	rjmp	.-28     	; 0x141a <__fp_split3+0xe>
    1436:	46 95       	lsr	r20
    1438:	f1 df       	rcall	.-30     	; 0x141c <__fp_splitA>
    143a:	08 c0       	rjmp	.+16     	; 0x144c <__fp_splitA+0x30>
    143c:	16 16       	cp	r1, r22
    143e:	17 06       	cpc	r1, r23
    1440:	18 06       	cpc	r1, r24
    1442:	99 1f       	adc	r25, r25
    1444:	f1 cf       	rjmp	.-30     	; 0x1428 <__fp_splitA+0xc>
    1446:	86 95       	lsr	r24
    1448:	71 05       	cpc	r23, r1
    144a:	61 05       	cpc	r22, r1
    144c:	08 94       	sec
    144e:	08 95       	ret

00001450 <__fp_zero>:
    1450:	e8 94       	clt

00001452 <__fp_szero>:
    1452:	bb 27       	eor	r27, r27
    1454:	66 27       	eor	r22, r22
    1456:	77 27       	eor	r23, r23
    1458:	cb 01       	movw	r24, r22
    145a:	97 f9       	bld	r25, 7
    145c:	08 95       	ret

0000145e <__mulsf3>:
    145e:	0a d0       	rcall	.+20     	; 0x1474 <__mulsf3x>
    1460:	c4 cf       	rjmp	.-120    	; 0x13ea <__fp_round>
    1462:	b5 df       	rcall	.-150    	; 0x13ce <__fp_pscA>
    1464:	28 f0       	brcs	.+10     	; 0x1470 <__mulsf3+0x12>
    1466:	ba df       	rcall	.-140    	; 0x13dc <__fp_pscB>
    1468:	18 f0       	brcs	.+6      	; 0x1470 <__mulsf3+0x12>
    146a:	95 23       	and	r25, r21
    146c:	09 f0       	breq	.+2      	; 0x1470 <__mulsf3+0x12>
    146e:	a6 cf       	rjmp	.-180    	; 0x13bc <__fp_inf>
    1470:	ab cf       	rjmp	.-170    	; 0x13c8 <__fp_nan>
    1472:	ef cf       	rjmp	.-34     	; 0x1452 <__fp_szero>

00001474 <__mulsf3x>:
    1474:	cb df       	rcall	.-106    	; 0x140c <__fp_split3>
    1476:	a8 f3       	brcs	.-22     	; 0x1462 <__mulsf3+0x4>

00001478 <__mulsf3_pse>:
    1478:	99 23       	and	r25, r25
    147a:	d9 f3       	breq	.-10     	; 0x1472 <__mulsf3+0x14>
    147c:	55 23       	and	r21, r21
    147e:	c9 f3       	breq	.-14     	; 0x1472 <__mulsf3+0x14>
    1480:	95 0f       	add	r25, r21
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	55 1f       	adc	r21, r21
    1486:	aa 27       	eor	r26, r26
    1488:	ee 27       	eor	r30, r30
    148a:	ff 27       	eor	r31, r31
    148c:	bb 27       	eor	r27, r27
    148e:	00 24       	eor	r0, r0
    1490:	08 94       	sec
    1492:	67 95       	ror	r22
    1494:	20 f4       	brcc	.+8      	; 0x149e <__mulsf3_pse+0x26>
    1496:	e2 0f       	add	r30, r18
    1498:	f3 1f       	adc	r31, r19
    149a:	b4 1f       	adc	r27, r20
    149c:	0a 1e       	adc	r0, r26
    149e:	22 0f       	add	r18, r18
    14a0:	33 1f       	adc	r19, r19
    14a2:	44 1f       	adc	r20, r20
    14a4:	aa 1f       	adc	r26, r26
    14a6:	66 95       	lsr	r22
    14a8:	a9 f7       	brne	.-22     	; 0x1494 <__mulsf3_pse+0x1c>
    14aa:	77 95       	ror	r23
    14ac:	30 f4       	brcc	.+12     	; 0x14ba <__mulsf3_pse+0x42>
    14ae:	f3 0f       	add	r31, r19
    14b0:	b4 1f       	adc	r27, r20
    14b2:	0a 1e       	adc	r0, r26
    14b4:	12 1e       	adc	r1, r18
    14b6:	08 f4       	brcc	.+2      	; 0x14ba <__mulsf3_pse+0x42>
    14b8:	63 95       	inc	r22
    14ba:	33 0f       	add	r19, r19
    14bc:	44 1f       	adc	r20, r20
    14be:	aa 1f       	adc	r26, r26
    14c0:	22 1f       	adc	r18, r18
    14c2:	76 95       	lsr	r23
    14c4:	99 f7       	brne	.-26     	; 0x14ac <__mulsf3_pse+0x34>
    14c6:	87 95       	ror	r24
    14c8:	20 f4       	brcc	.+8      	; 0x14d2 <__mulsf3_pse+0x5a>
    14ca:	b4 0f       	add	r27, r20
    14cc:	0a 1e       	adc	r0, r26
    14ce:	12 1e       	adc	r1, r18
    14d0:	63 1f       	adc	r22, r19
    14d2:	44 0f       	add	r20, r20
    14d4:	aa 1f       	adc	r26, r26
    14d6:	22 1f       	adc	r18, r18
    14d8:	33 1f       	adc	r19, r19
    14da:	86 95       	lsr	r24
    14dc:	a9 f7       	brne	.-22     	; 0x14c8 <__mulsf3_pse+0x50>
    14de:	86 2f       	mov	r24, r22
    14e0:	71 2d       	mov	r23, r1
    14e2:	60 2d       	mov	r22, r0
    14e4:	11 24       	eor	r1, r1
    14e6:	9f 57       	subi	r25, 0x7F	; 127
    14e8:	50 40       	sbci	r21, 0x00	; 0
    14ea:	8a f0       	brmi	.+34     	; 0x150e <__mulsf3_pse+0x96>
    14ec:	e1 f0       	breq	.+56     	; 0x1526 <__mulsf3_pse+0xae>
    14ee:	88 23       	and	r24, r24
    14f0:	4a f0       	brmi	.+18     	; 0x1504 <__mulsf3_pse+0x8c>
    14f2:	ee 0f       	add	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	bb 1f       	adc	r27, r27
    14f8:	66 1f       	adc	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	88 1f       	adc	r24, r24
    14fe:	91 50       	subi	r25, 0x01	; 1
    1500:	50 40       	sbci	r21, 0x00	; 0
    1502:	a9 f7       	brne	.-22     	; 0x14ee <__mulsf3_pse+0x76>
    1504:	9e 3f       	cpi	r25, 0xFE	; 254
    1506:	51 05       	cpc	r21, r1
    1508:	70 f0       	brcs	.+28     	; 0x1526 <__mulsf3_pse+0xae>
    150a:	58 cf       	rjmp	.-336    	; 0x13bc <__fp_inf>
    150c:	a2 cf       	rjmp	.-188    	; 0x1452 <__fp_szero>
    150e:	5f 3f       	cpi	r21, 0xFF	; 255
    1510:	ec f3       	brlt	.-6      	; 0x150c <__mulsf3_pse+0x94>
    1512:	98 3e       	cpi	r25, 0xE8	; 232
    1514:	dc f3       	brlt	.-10     	; 0x150c <__mulsf3_pse+0x94>
    1516:	86 95       	lsr	r24
    1518:	77 95       	ror	r23
    151a:	67 95       	ror	r22
    151c:	b7 95       	ror	r27
    151e:	f7 95       	ror	r31
    1520:	e7 95       	ror	r30
    1522:	9f 5f       	subi	r25, 0xFF	; 255
    1524:	c1 f7       	brne	.-16     	; 0x1516 <__mulsf3_pse+0x9e>
    1526:	fe 2b       	or	r31, r30
    1528:	88 0f       	add	r24, r24
    152a:	91 1d       	adc	r25, r1
    152c:	96 95       	lsr	r25
    152e:	87 95       	ror	r24
    1530:	97 f9       	bld	r25, 7
    1532:	08 95       	ret

00001534 <malloc>:
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	bc 01       	movw	r22, r24
    153a:	82 30       	cpi	r24, 0x02	; 2
    153c:	91 05       	cpc	r25, r1
    153e:	10 f4       	brcc	.+4      	; 0x1544 <malloc+0x10>
    1540:	62 e0       	ldi	r22, 0x02	; 2
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	a0 91 78 01 	lds	r26, 0x0178
    1548:	b0 91 79 01 	lds	r27, 0x0179
    154c:	ed 01       	movw	r28, r26
    154e:	e0 e0       	ldi	r30, 0x00	; 0
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	21 c0       	rjmp	.+66     	; 0x159a <malloc+0x66>
    1558:	88 81       	ld	r24, Y
    155a:	99 81       	ldd	r25, Y+1	; 0x01
    155c:	86 17       	cp	r24, r22
    155e:	97 07       	cpc	r25, r23
    1560:	69 f4       	brne	.+26     	; 0x157c <malloc+0x48>
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	9b 81       	ldd	r25, Y+3	; 0x03
    1566:	30 97       	sbiw	r30, 0x00	; 0
    1568:	19 f0       	breq	.+6      	; 0x1570 <malloc+0x3c>
    156a:	93 83       	std	Z+3, r25	; 0x03
    156c:	82 83       	std	Z+2, r24	; 0x02
    156e:	04 c0       	rjmp	.+8      	; 0x1578 <malloc+0x44>
    1570:	90 93 79 01 	sts	0x0179, r25
    1574:	80 93 78 01 	sts	0x0178, r24
    1578:	fe 01       	movw	r30, r28
    157a:	34 c0       	rjmp	.+104    	; 0x15e4 <malloc+0xb0>
    157c:	68 17       	cp	r22, r24
    157e:	79 07       	cpc	r23, r25
    1580:	38 f4       	brcc	.+14     	; 0x1590 <malloc+0x5c>
    1582:	41 15       	cp	r20, r1
    1584:	51 05       	cpc	r21, r1
    1586:	19 f0       	breq	.+6      	; 0x158e <malloc+0x5a>
    1588:	84 17       	cp	r24, r20
    158a:	95 07       	cpc	r25, r21
    158c:	08 f4       	brcc	.+2      	; 0x1590 <malloc+0x5c>
    158e:	ac 01       	movw	r20, r24
    1590:	fe 01       	movw	r30, r28
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	9b 81       	ldd	r25, Y+3	; 0x03
    1596:	9c 01       	movw	r18, r24
    1598:	e9 01       	movw	r28, r18
    159a:	20 97       	sbiw	r28, 0x00	; 0
    159c:	e9 f6       	brne	.-70     	; 0x1558 <malloc+0x24>
    159e:	41 15       	cp	r20, r1
    15a0:	51 05       	cpc	r21, r1
    15a2:	a9 f1       	breq	.+106    	; 0x160e <malloc+0xda>
    15a4:	ca 01       	movw	r24, r20
    15a6:	86 1b       	sub	r24, r22
    15a8:	97 0b       	sbc	r25, r23
    15aa:	04 97       	sbiw	r24, 0x04	; 4
    15ac:	08 f4       	brcc	.+2      	; 0x15b0 <malloc+0x7c>
    15ae:	ba 01       	movw	r22, r20
    15b0:	e0 e0       	ldi	r30, 0x00	; 0
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	2a c0       	rjmp	.+84     	; 0x160a <malloc+0xd6>
    15b6:	8d 91       	ld	r24, X+
    15b8:	9c 91       	ld	r25, X
    15ba:	11 97       	sbiw	r26, 0x01	; 1
    15bc:	84 17       	cp	r24, r20
    15be:	95 07       	cpc	r25, r21
    15c0:	f9 f4       	brne	.+62     	; 0x1600 <malloc+0xcc>
    15c2:	64 17       	cp	r22, r20
    15c4:	75 07       	cpc	r23, r21
    15c6:	81 f4       	brne	.+32     	; 0x15e8 <malloc+0xb4>
    15c8:	12 96       	adiw	r26, 0x02	; 2
    15ca:	8d 91       	ld	r24, X+
    15cc:	9c 91       	ld	r25, X
    15ce:	13 97       	sbiw	r26, 0x03	; 3
    15d0:	30 97       	sbiw	r30, 0x00	; 0
    15d2:	19 f0       	breq	.+6      	; 0x15da <malloc+0xa6>
    15d4:	93 83       	std	Z+3, r25	; 0x03
    15d6:	82 83       	std	Z+2, r24	; 0x02
    15d8:	04 c0       	rjmp	.+8      	; 0x15e2 <malloc+0xae>
    15da:	90 93 79 01 	sts	0x0179, r25
    15de:	80 93 78 01 	sts	0x0178, r24
    15e2:	fd 01       	movw	r30, r26
    15e4:	32 96       	adiw	r30, 0x02	; 2
    15e6:	4f c0       	rjmp	.+158    	; 0x1686 <malloc+0x152>
    15e8:	ca 01       	movw	r24, r20
    15ea:	86 1b       	sub	r24, r22
    15ec:	97 0b       	sbc	r25, r23
    15ee:	fd 01       	movw	r30, r26
    15f0:	e8 0f       	add	r30, r24
    15f2:	f9 1f       	adc	r31, r25
    15f4:	61 93       	st	Z+, r22
    15f6:	71 93       	st	Z+, r23
    15f8:	02 97       	sbiw	r24, 0x02	; 2
    15fa:	8d 93       	st	X+, r24
    15fc:	9c 93       	st	X, r25
    15fe:	43 c0       	rjmp	.+134    	; 0x1686 <malloc+0x152>
    1600:	fd 01       	movw	r30, r26
    1602:	82 81       	ldd	r24, Z+2	; 0x02
    1604:	93 81       	ldd	r25, Z+3	; 0x03
    1606:	9c 01       	movw	r18, r24
    1608:	d9 01       	movw	r26, r18
    160a:	10 97       	sbiw	r26, 0x00	; 0
    160c:	a1 f6       	brne	.-88     	; 0x15b6 <malloc+0x82>
    160e:	80 91 76 01 	lds	r24, 0x0176
    1612:	90 91 77 01 	lds	r25, 0x0177
    1616:	89 2b       	or	r24, r25
    1618:	41 f4       	brne	.+16     	; 0x162a <malloc+0xf6>
    161a:	80 91 55 01 	lds	r24, 0x0155
    161e:	90 91 56 01 	lds	r25, 0x0156
    1622:	90 93 77 01 	sts	0x0177, r25
    1626:	80 93 76 01 	sts	0x0176, r24
    162a:	40 91 57 01 	lds	r20, 0x0157
    162e:	50 91 58 01 	lds	r21, 0x0158
    1632:	41 15       	cp	r20, r1
    1634:	51 05       	cpc	r21, r1
    1636:	41 f4       	brne	.+16     	; 0x1648 <malloc+0x114>
    1638:	4d b7       	in	r20, 0x3d	; 61
    163a:	5e b7       	in	r21, 0x3e	; 62
    163c:	80 91 53 01 	lds	r24, 0x0153
    1640:	90 91 54 01 	lds	r25, 0x0154
    1644:	48 1b       	sub	r20, r24
    1646:	59 0b       	sbc	r21, r25
    1648:	20 91 76 01 	lds	r18, 0x0176
    164c:	30 91 77 01 	lds	r19, 0x0177
    1650:	24 17       	cp	r18, r20
    1652:	35 07       	cpc	r19, r21
    1654:	b0 f4       	brcc	.+44     	; 0x1682 <malloc+0x14e>
    1656:	ca 01       	movw	r24, r20
    1658:	82 1b       	sub	r24, r18
    165a:	93 0b       	sbc	r25, r19
    165c:	86 17       	cp	r24, r22
    165e:	97 07       	cpc	r25, r23
    1660:	80 f0       	brcs	.+32     	; 0x1682 <malloc+0x14e>
    1662:	ab 01       	movw	r20, r22
    1664:	4e 5f       	subi	r20, 0xFE	; 254
    1666:	5f 4f       	sbci	r21, 0xFF	; 255
    1668:	84 17       	cp	r24, r20
    166a:	95 07       	cpc	r25, r21
    166c:	50 f0       	brcs	.+20     	; 0x1682 <malloc+0x14e>
    166e:	42 0f       	add	r20, r18
    1670:	53 1f       	adc	r21, r19
    1672:	50 93 77 01 	sts	0x0177, r21
    1676:	40 93 76 01 	sts	0x0176, r20
    167a:	f9 01       	movw	r30, r18
    167c:	61 93       	st	Z+, r22
    167e:	71 93       	st	Z+, r23
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <malloc+0x152>
    1682:	e0 e0       	ldi	r30, 0x00	; 0
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	cf 01       	movw	r24, r30
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	08 95       	ret

0000168e <free>:
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	09 f4       	brne	.+2      	; 0x1698 <free+0xa>
    1696:	50 c0       	rjmp	.+160    	; 0x1738 <free+0xaa>
    1698:	ec 01       	movw	r28, r24
    169a:	22 97       	sbiw	r28, 0x02	; 2
    169c:	1b 82       	std	Y+3, r1	; 0x03
    169e:	1a 82       	std	Y+2, r1	; 0x02
    16a0:	a0 91 78 01 	lds	r26, 0x0178
    16a4:	b0 91 79 01 	lds	r27, 0x0179
    16a8:	10 97       	sbiw	r26, 0x00	; 0
    16aa:	09 f1       	breq	.+66     	; 0x16ee <free+0x60>
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	ac 17       	cp	r26, r28
    16b2:	bd 07       	cpc	r27, r29
    16b4:	08 f1       	brcs	.+66     	; 0x16f8 <free+0x6a>
    16b6:	bb 83       	std	Y+3, r27	; 0x03
    16b8:	aa 83       	std	Y+2, r26	; 0x02
    16ba:	fe 01       	movw	r30, r28
    16bc:	21 91       	ld	r18, Z+
    16be:	31 91       	ld	r19, Z+
    16c0:	e2 0f       	add	r30, r18
    16c2:	f3 1f       	adc	r31, r19
    16c4:	ae 17       	cp	r26, r30
    16c6:	bf 07       	cpc	r27, r31
    16c8:	79 f4       	brne	.+30     	; 0x16e8 <free+0x5a>
    16ca:	8d 91       	ld	r24, X+
    16cc:	9c 91       	ld	r25, X
    16ce:	11 97       	sbiw	r26, 0x01	; 1
    16d0:	28 0f       	add	r18, r24
    16d2:	39 1f       	adc	r19, r25
    16d4:	2e 5f       	subi	r18, 0xFE	; 254
    16d6:	3f 4f       	sbci	r19, 0xFF	; 255
    16d8:	39 83       	std	Y+1, r19	; 0x01
    16da:	28 83       	st	Y, r18
    16dc:	12 96       	adiw	r26, 0x02	; 2
    16de:	8d 91       	ld	r24, X+
    16e0:	9c 91       	ld	r25, X
    16e2:	13 97       	sbiw	r26, 0x03	; 3
    16e4:	9b 83       	std	Y+3, r25	; 0x03
    16e6:	8a 83       	std	Y+2, r24	; 0x02
    16e8:	41 15       	cp	r20, r1
    16ea:	51 05       	cpc	r21, r1
    16ec:	71 f4       	brne	.+28     	; 0x170a <free+0x7c>
    16ee:	d0 93 79 01 	sts	0x0179, r29
    16f2:	c0 93 78 01 	sts	0x0178, r28
    16f6:	20 c0       	rjmp	.+64     	; 0x1738 <free+0xaa>
    16f8:	12 96       	adiw	r26, 0x02	; 2
    16fa:	8d 91       	ld	r24, X+
    16fc:	9c 91       	ld	r25, X
    16fe:	13 97       	sbiw	r26, 0x03	; 3
    1700:	ad 01       	movw	r20, r26
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	11 f0       	breq	.+4      	; 0x170a <free+0x7c>
    1706:	dc 01       	movw	r26, r24
    1708:	d3 cf       	rjmp	.-90     	; 0x16b0 <free+0x22>
    170a:	fa 01       	movw	r30, r20
    170c:	d3 83       	std	Z+3, r29	; 0x03
    170e:	c2 83       	std	Z+2, r28	; 0x02
    1710:	21 91       	ld	r18, Z+
    1712:	31 91       	ld	r19, Z+
    1714:	e2 0f       	add	r30, r18
    1716:	f3 1f       	adc	r31, r19
    1718:	ce 17       	cp	r28, r30
    171a:	df 07       	cpc	r29, r31
    171c:	69 f4       	brne	.+26     	; 0x1738 <free+0xaa>
    171e:	88 81       	ld	r24, Y
    1720:	99 81       	ldd	r25, Y+1	; 0x01
    1722:	28 0f       	add	r18, r24
    1724:	39 1f       	adc	r19, r25
    1726:	2e 5f       	subi	r18, 0xFE	; 254
    1728:	3f 4f       	sbci	r19, 0xFF	; 255
    172a:	fa 01       	movw	r30, r20
    172c:	31 83       	std	Z+1, r19	; 0x01
    172e:	20 83       	st	Z, r18
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	9b 81       	ldd	r25, Y+3	; 0x03
    1734:	93 83       	std	Z+3, r25	; 0x03
    1736:	82 83       	std	Z+2, r24	; 0x02
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	08 95       	ret

0000173e <realloc>:
    173e:	a0 e0       	ldi	r26, 0x00	; 0
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e4 ea       	ldi	r30, 0xA4	; 164
    1744:	fb e0       	ldi	r31, 0x0B	; 11
    1746:	fd c0       	rjmp	.+506    	; 0x1942 <__prologue_saves__+0xc>
    1748:	8c 01       	movw	r16, r24
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	21 f4       	brne	.+8      	; 0x1756 <realloc+0x18>
    174e:	cb 01       	movw	r24, r22
    1750:	f1 de       	rcall	.-542    	; 0x1534 <malloc>
    1752:	8c 01       	movw	r16, r24
    1754:	b6 c0       	rjmp	.+364    	; 0x18c2 <realloc+0x184>
    1756:	9e ef       	ldi	r25, 0xFE	; 254
    1758:	e9 2e       	mov	r14, r25
    175a:	9f ef       	ldi	r25, 0xFF	; 255
    175c:	f9 2e       	mov	r15, r25
    175e:	e0 0e       	add	r14, r16
    1760:	f1 1e       	adc	r15, r17
    1762:	58 01       	movw	r10, r16
    1764:	a6 0e       	add	r10, r22
    1766:	b7 1e       	adc	r11, r23
    1768:	ae 14       	cp	r10, r14
    176a:	bf 04       	cpc	r11, r15
    176c:	08 f4       	brcc	.+2      	; 0x1770 <realloc+0x32>
    176e:	a7 c0       	rjmp	.+334    	; 0x18be <realloc+0x180>
    1770:	8e ef       	ldi	r24, 0xFE	; 254
    1772:	88 2e       	mov	r8, r24
    1774:	8f ef       	ldi	r24, 0xFF	; 255
    1776:	98 2e       	mov	r9, r24
    1778:	8a 0c       	add	r8, r10
    177a:	9b 1c       	adc	r9, r11
    177c:	e7 01       	movw	r28, r14
    177e:	48 81       	ld	r20, Y
    1780:	59 81       	ldd	r21, Y+1	; 0x01
    1782:	46 17       	cp	r20, r22
    1784:	57 07       	cpc	r21, r23
    1786:	b0 f0       	brcs	.+44     	; 0x17b4 <realloc+0x76>
    1788:	45 30       	cpi	r20, 0x05	; 5
    178a:	51 05       	cpc	r21, r1
    178c:	08 f4       	brcc	.+2      	; 0x1790 <realloc+0x52>
    178e:	99 c0       	rjmp	.+306    	; 0x18c2 <realloc+0x184>
    1790:	ca 01       	movw	r24, r20
    1792:	04 97       	sbiw	r24, 0x04	; 4
    1794:	86 17       	cp	r24, r22
    1796:	97 07       	cpc	r25, r23
    1798:	08 f4       	brcc	.+2      	; 0x179c <realloc+0x5e>
    179a:	93 c0       	rjmp	.+294    	; 0x18c2 <realloc+0x184>
    179c:	42 50       	subi	r20, 0x02	; 2
    179e:	50 40       	sbci	r21, 0x00	; 0
    17a0:	46 1b       	sub	r20, r22
    17a2:	57 0b       	sbc	r21, r23
    17a4:	f4 01       	movw	r30, r8
    17a6:	51 83       	std	Z+1, r21	; 0x01
    17a8:	40 83       	st	Z, r20
    17aa:	79 83       	std	Y+1, r23	; 0x01
    17ac:	68 83       	st	Y, r22
    17ae:	c5 01       	movw	r24, r10
    17b0:	6e df       	rcall	.-292    	; 0x168e <free>
    17b2:	87 c0       	rjmp	.+270    	; 0x18c2 <realloc+0x184>
    17b4:	6b 01       	movw	r12, r22
    17b6:	c4 1a       	sub	r12, r20
    17b8:	d5 0a       	sbc	r13, r21
    17ba:	e0 91 78 01 	lds	r30, 0x0178
    17be:	f0 91 79 01 	lds	r31, 0x0179
    17c2:	a0 e0       	ldi	r26, 0x00	; 0
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	c0 e0       	ldi	r28, 0x00	; 0
    17c8:	d0 e0       	ldi	r29, 0x00	; 0
    17ca:	42 c0       	rjmp	.+132    	; 0x1850 <realloc+0x112>
    17cc:	e8 15       	cp	r30, r8
    17ce:	f9 05       	cpc	r31, r9
    17d0:	a1 f5       	brne	.+104    	; 0x183a <realloc+0xfc>
    17d2:	20 81       	ld	r18, Z
    17d4:	31 81       	ldd	r19, Z+1	; 0x01
    17d6:	2c 15       	cp	r18, r12
    17d8:	3d 05       	cpc	r19, r13
    17da:	78 f1       	brcs	.+94     	; 0x183a <realloc+0xfc>
    17dc:	c9 01       	movw	r24, r18
    17de:	02 96       	adiw	r24, 0x02	; 2
    17e0:	8c 15       	cp	r24, r12
    17e2:	9d 05       	cpc	r25, r13
    17e4:	a8 f0       	brcs	.+42     	; 0x1810 <realloc+0xd2>
    17e6:	4e 5f       	subi	r20, 0xFE	; 254
    17e8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ea:	42 0f       	add	r20, r18
    17ec:	53 1f       	adc	r21, r19
    17ee:	e7 01       	movw	r28, r14
    17f0:	59 83       	std	Y+1, r21	; 0x01
    17f2:	48 83       	st	Y, r20
    17f4:	22 81       	ldd	r18, Z+2	; 0x02
    17f6:	33 81       	ldd	r19, Z+3	; 0x03
    17f8:	10 97       	sbiw	r26, 0x00	; 0
    17fa:	29 f0       	breq	.+10     	; 0x1806 <realloc+0xc8>
    17fc:	13 96       	adiw	r26, 0x03	; 3
    17fe:	3c 93       	st	X, r19
    1800:	2e 93       	st	-X, r18
    1802:	12 97       	sbiw	r26, 0x02	; 2
    1804:	5e c0       	rjmp	.+188    	; 0x18c2 <realloc+0x184>
    1806:	30 93 79 01 	sts	0x0179, r19
    180a:	20 93 78 01 	sts	0x0178, r18
    180e:	59 c0       	rjmp	.+178    	; 0x18c2 <realloc+0x184>
    1810:	22 50       	subi	r18, 0x02	; 2
    1812:	30 40       	sbci	r19, 0x00	; 0
    1814:	2c 19       	sub	r18, r12
    1816:	3d 09       	sbc	r19, r13
    1818:	31 83       	std	Z+1, r19	; 0x01
    181a:	20 83       	st	Z, r18
    181c:	10 97       	sbiw	r26, 0x00	; 0
    181e:	29 f0       	breq	.+10     	; 0x182a <realloc+0xec>
    1820:	13 96       	adiw	r26, 0x03	; 3
    1822:	fc 93       	st	X, r31
    1824:	ee 93       	st	-X, r30
    1826:	12 97       	sbiw	r26, 0x02	; 2
    1828:	04 c0       	rjmp	.+8      	; 0x1832 <realloc+0xf4>
    182a:	f0 93 79 01 	sts	0x0179, r31
    182e:	e0 93 78 01 	sts	0x0178, r30
    1832:	f7 01       	movw	r30, r14
    1834:	71 83       	std	Z+1, r23	; 0x01
    1836:	60 83       	st	Z, r22
    1838:	44 c0       	rjmp	.+136    	; 0x18c2 <realloc+0x184>
    183a:	80 81       	ld	r24, Z
    183c:	91 81       	ldd	r25, Z+1	; 0x01
    183e:	c8 17       	cp	r28, r24
    1840:	d9 07       	cpc	r29, r25
    1842:	08 f4       	brcc	.+2      	; 0x1846 <realloc+0x108>
    1844:	ec 01       	movw	r28, r24
    1846:	df 01       	movw	r26, r30
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	93 81       	ldd	r25, Z+3	; 0x03
    184c:	9c 01       	movw	r18, r24
    184e:	f9 01       	movw	r30, r18
    1850:	30 97       	sbiw	r30, 0x00	; 0
    1852:	09 f0       	breq	.+2      	; 0x1856 <realloc+0x118>
    1854:	bb cf       	rjmp	.-138    	; 0x17cc <realloc+0x8e>
    1856:	40 0f       	add	r20, r16
    1858:	51 1f       	adc	r21, r17
    185a:	80 91 76 01 	lds	r24, 0x0176
    185e:	90 91 77 01 	lds	r25, 0x0177
    1862:	84 17       	cp	r24, r20
    1864:	95 07       	cpc	r25, r21
    1866:	e9 f4       	brne	.+58     	; 0x18a2 <realloc+0x164>
    1868:	c6 17       	cp	r28, r22
    186a:	d7 07       	cpc	r29, r23
    186c:	d0 f4       	brcc	.+52     	; 0x18a2 <realloc+0x164>
    186e:	20 91 57 01 	lds	r18, 0x0157
    1872:	30 91 58 01 	lds	r19, 0x0158
    1876:	21 15       	cp	r18, r1
    1878:	31 05       	cpc	r19, r1
    187a:	41 f4       	brne	.+16     	; 0x188c <realloc+0x14e>
    187c:	2d b7       	in	r18, 0x3d	; 61
    187e:	3e b7       	in	r19, 0x3e	; 62
    1880:	80 91 53 01 	lds	r24, 0x0153
    1884:	90 91 54 01 	lds	r25, 0x0154
    1888:	28 1b       	sub	r18, r24
    188a:	39 0b       	sbc	r19, r25
    188c:	a2 16       	cp	r10, r18
    188e:	b3 06       	cpc	r11, r19
    1890:	b0 f4       	brcc	.+44     	; 0x18be <realloc+0x180>
    1892:	b0 92 77 01 	sts	0x0177, r11
    1896:	a0 92 76 01 	sts	0x0176, r10
    189a:	e7 01       	movw	r28, r14
    189c:	79 83       	std	Y+1, r23	; 0x01
    189e:	68 83       	st	Y, r22
    18a0:	10 c0       	rjmp	.+32     	; 0x18c2 <realloc+0x184>
    18a2:	cb 01       	movw	r24, r22
    18a4:	47 de       	rcall	.-882    	; 0x1534 <malloc>
    18a6:	ec 01       	movw	r28, r24
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	49 f0       	breq	.+18     	; 0x18be <realloc+0x180>
    18ac:	f7 01       	movw	r30, r14
    18ae:	40 81       	ld	r20, Z
    18b0:	51 81       	ldd	r21, Z+1	; 0x01
    18b2:	b8 01       	movw	r22, r16
    18b4:	0f d0       	rcall	.+30     	; 0x18d4 <memcpy>
    18b6:	c8 01       	movw	r24, r16
    18b8:	ea de       	rcall	.-556    	; 0x168e <free>
    18ba:	8e 01       	movw	r16, r28
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <realloc+0x184>
    18be:	00 e0       	ldi	r16, 0x00	; 0
    18c0:	10 e0       	ldi	r17, 0x00	; 0
    18c2:	c8 01       	movw	r24, r16
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	ec e0       	ldi	r30, 0x0C	; 12
    18ca:	57 c0       	rjmp	.+174    	; 0x197a <__epilogue_restores__+0xc>

000018cc <abort>:
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	f8 94       	cli
    18d2:	68 c0       	rjmp	.+208    	; 0x19a4 <_exit>

000018d4 <memcpy>:
    18d4:	fb 01       	movw	r30, r22
    18d6:	dc 01       	movw	r26, r24
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <memcpy+0xa>
    18da:	01 90       	ld	r0, Z+
    18dc:	0d 92       	st	X+, r0
    18de:	41 50       	subi	r20, 0x01	; 1
    18e0:	50 40       	sbci	r21, 0x00	; 0
    18e2:	d8 f7       	brcc	.-10     	; 0x18da <memcpy+0x6>
    18e4:	08 95       	ret

000018e6 <fputs>:
    18e6:	ef 92       	push	r14
    18e8:	ff 92       	push	r15
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	7c 01       	movw	r14, r24
    18f4:	8b 01       	movw	r16, r22
    18f6:	db 01       	movw	r26, r22
    18f8:	13 96       	adiw	r26, 0x03	; 3
    18fa:	8c 91       	ld	r24, X
    18fc:	81 fd       	sbrc	r24, 1
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <fputs+0x20>
    1900:	cf ef       	ldi	r28, 0xFF	; 255
    1902:	df ef       	ldi	r29, 0xFF	; 255
    1904:	13 c0       	rjmp	.+38     	; 0x192c <fputs+0x46>
    1906:	c0 e0       	ldi	r28, 0x00	; 0
    1908:	d0 e0       	ldi	r29, 0x00	; 0
    190a:	0b c0       	rjmp	.+22     	; 0x1922 <fputs+0x3c>
    190c:	d8 01       	movw	r26, r16
    190e:	18 96       	adiw	r26, 0x08	; 8
    1910:	ed 91       	ld	r30, X+
    1912:	fc 91       	ld	r31, X
    1914:	19 97       	sbiw	r26, 0x09	; 9
    1916:	b8 01       	movw	r22, r16
    1918:	09 95       	icall
    191a:	89 2b       	or	r24, r25
    191c:	11 f0       	breq	.+4      	; 0x1922 <fputs+0x3c>
    191e:	cf ef       	ldi	r28, 0xFF	; 255
    1920:	df ef       	ldi	r29, 0xFF	; 255
    1922:	f7 01       	movw	r30, r14
    1924:	81 91       	ld	r24, Z+
    1926:	7f 01       	movw	r14, r30
    1928:	88 23       	and	r24, r24
    192a:	81 f7       	brne	.-32     	; 0x190c <fputs+0x26>
    192c:	ce 01       	movw	r24, r28
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	e6 e0       	ldi	r30, 0x06	; 6
    1934:	28 c0       	rjmp	.+80     	; 0x1986 <__epilogue_restores__+0x18>

00001936 <__prologue_saves__>:
    1936:	2f 92       	push	r2
    1938:	3f 92       	push	r3
    193a:	4f 92       	push	r4
    193c:	5f 92       	push	r5
    193e:	6f 92       	push	r6
    1940:	7f 92       	push	r7
    1942:	8f 92       	push	r8
    1944:	9f 92       	push	r9
    1946:	af 92       	push	r10
    1948:	bf 92       	push	r11
    194a:	cf 92       	push	r12
    194c:	df 92       	push	r13
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	ca 1b       	sub	r28, r26
    1960:	db 0b       	sbc	r29, r27
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	09 94       	ijmp

0000196e <__epilogue_restores__>:
    196e:	2a 88       	ldd	r2, Y+18	; 0x12
    1970:	39 88       	ldd	r3, Y+17	; 0x11
    1972:	48 88       	ldd	r4, Y+16	; 0x10
    1974:	5f 84       	ldd	r5, Y+15	; 0x0f
    1976:	6e 84       	ldd	r6, Y+14	; 0x0e
    1978:	7d 84       	ldd	r7, Y+13	; 0x0d
    197a:	8c 84       	ldd	r8, Y+12	; 0x0c
    197c:	9b 84       	ldd	r9, Y+11	; 0x0b
    197e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1980:	b9 84       	ldd	r11, Y+9	; 0x09
    1982:	c8 84       	ldd	r12, Y+8	; 0x08
    1984:	df 80       	ldd	r13, Y+7	; 0x07
    1986:	ee 80       	ldd	r14, Y+6	; 0x06
    1988:	fd 80       	ldd	r15, Y+5	; 0x05
    198a:	0c 81       	ldd	r16, Y+4	; 0x04
    198c:	1b 81       	ldd	r17, Y+3	; 0x03
    198e:	aa 81       	ldd	r26, Y+2	; 0x02
    1990:	b9 81       	ldd	r27, Y+1	; 0x01
    1992:	ce 0f       	add	r28, r30
    1994:	d1 1d       	adc	r29, r1
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	ed 01       	movw	r28, r26
    19a2:	08 95       	ret

000019a4 <_exit>:
    19a4:	f8 94       	cli

000019a6 <__stop_program>:
    19a6:	ff cf       	rjmp	.-2      	; 0x19a6 <__stop_program>
