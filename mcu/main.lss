
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00001d30  00001dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800156  00800156  00001e1a  2**0
                  ALLOC
  3 .debug_aranges 00000308  00000000  00000000  00001e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000869  00000000  00000000  00002122  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004db9  00000000  00000000  0000298b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013c6  00000000  00000000  00007744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004293  00000000  00000000  00008b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000490  00000000  00000000  0000cda0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000201f  00000000  00000000  0000d230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002aee  00000000  00000000  0000f24f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a8  00000000  00000000  00011d3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	98 c0       	rjmp	.+304    	; 0x136 <__bad_interrupt>
	pq->numItems--;
	
	return element;
}

void PQUpdate(PQ pq, ItemPQ element) {
       6:	00 00       	nop
       8:	96 c0       	rjmp	.+300    	; 0x136 <__bad_interrupt>
       a:	00 00       	nop
       c:	94 c0       	rjmp	.+296    	; 0x136 <__bad_interrupt>
       e:	00 00       	nop
      10:	92 c0       	rjmp	.+292    	; 0x136 <__bad_interrupt>
      12:	00 00       	nop
      14:	90 c0       	rjmp	.+288    	; 0x136 <__bad_interrupt>
      16:	00 00       	nop
      18:	8e c0       	rjmp	.+284    	; 0x136 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8c c0       	rjmp	.+280    	; 0x136 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8a c0       	rjmp	.+276    	; 0x136 <__bad_interrupt>
      22:	00 00       	nop
      24:	88 c0       	rjmp	.+272    	; 0x136 <__bad_interrupt>
      26:	00 00       	nop
      28:	86 c0       	rjmp	.+268    	; 0x136 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c7       	rjmp	.+3698   	; 0xea0 <__vector_11>
      2e:	00 00       	nop
      30:	fc c6       	rjmp	.+3576   	; 0xe2a <__vector_12>
      32:	00 00       	nop
      34:	80 c0       	rjmp	.+256    	; 0x136 <__bad_interrupt>
      36:	00 00       	nop
      38:	7e c0       	rjmp	.+252    	; 0x136 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7c c0       	rjmp	.+248    	; 0x136 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7a c0       	rjmp	.+244    	; 0x136 <__bad_interrupt>
      42:	00 00       	nop
      44:	78 c0       	rjmp	.+240    	; 0x136 <__bad_interrupt>
      46:	00 00       	nop
      48:	76 c0       	rjmp	.+236    	; 0x136 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	74 c0       	rjmp	.+232    	; 0x136 <__bad_interrupt>
      4e:	00 00       	nop
      50:	72 c0       	rjmp	.+228    	; 0x136 <__bad_interrupt>
      52:	00 00       	nop
      54:	4a c4       	rjmp	.+2196   	; 0x8ea <__vector_21>
      56:	00 00       	nop
      58:	6e c0       	rjmp	.+220    	; 0x136 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6c c0       	rjmp	.+216    	; 0x136 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6a c0       	rjmp	.+212    	; 0x136 <__bad_interrupt>
      62:	00 00       	nop
      64:	68 c0       	rjmp	.+208    	; 0x136 <__bad_interrupt>
      66:	00 00       	nop
      68:	66 c0       	rjmp	.+204    	; 0x136 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	64 c0       	rjmp	.+200    	; 0x136 <__bad_interrupt>
      6e:	00 00       	nop
      70:	62 c0       	rjmp	.+196    	; 0x136 <__bad_interrupt>
      72:	00 00       	nop
      74:	60 c0       	rjmp	.+192    	; 0x136 <__bad_interrupt>
      76:	00 00       	nop
      78:	5e c0       	rjmp	.+188    	; 0x136 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5c c0       	rjmp	.+184    	; 0x136 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5a c0       	rjmp	.+180    	; 0x136 <__bad_interrupt>
      82:	00 00       	nop
      84:	58 c0       	rjmp	.+176    	; 0x136 <__bad_interrupt>
      86:	00 00       	nop
      88:	56 c0       	rjmp	.+172    	; 0x136 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	54 c0       	rjmp	.+168    	; 0x136 <__bad_interrupt>
      8e:	00 00       	nop
      90:	52 c0       	rjmp	.+164    	; 0x136 <__bad_interrupt>
      92:	00 00       	nop
      94:	50 c0       	rjmp	.+160    	; 0x136 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 00 00 00 08 c0 16 dc 05 01 00 01 02     ................
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff ff     .. .....2.......
      ba:	ff 00 07 05 81 00 40 00 05 07 05 02 00 40 00 05     ......@......@..

000000ca <LanguageString>:
      ca:	04 03 09 04                                         ....

000000ce <ManufacturerString>:
      ce:	18 03 4a 00 6f 00 6e 00 61 00 68 00 20 00 4d 00     ..J.o.n.a.h. .M.
      de:	65 00 67 00 67 00 73 00 00 00                       e.g.g.s...

000000e8 <ProductString>:
      e8:	14 03 43 00 61 00 70 00 53 00 6f 00 72 00 74 00     ..C.a.p.S.o.r.t.
      f8:	65 00 72 00 00 00                                   e.r...

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d2 e0       	ldi	r29, 0x02	; 2
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	e0 e3       	ldi	r30, 0x30	; 48
     112:	fd e1       	ldi	r31, 0x1D	; 29
     114:	02 c0       	rjmp	.+4      	; 0x11a <.do_copy_data_start>

00000116 <.do_copy_data_loop>:
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0

0000011a <.do_copy_data_start>:
     11a:	a6 35       	cpi	r26, 0x56	; 86
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <.do_copy_data_loop>

00000120 <__do_clear_bss>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a6 e5       	ldi	r26, 0x56	; 86
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	a0 37       	cpi	r26, 0x70	; 112
     12c:	b1 07       	cpc	r27, r17
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	97 d3       	rcall	.+1838   	; 0x860 <main>
     132:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <_exit>

00000136 <__bad_interrupt>:
     136:	64 cf       	rjmp	.-312    	; 0x0 <__vectors>

00000138 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
     138:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	49 f0       	breq	.+18     	; 0x150 <CALLBACK_USB_GetDescriptor+0x18>
     13e:	93 30       	cpi	r25, 0x03	; 3
     140:	61 f0       	breq	.+24     	; 0x15a <CALLBACK_USB_GetDescriptor+0x22>
     142:	91 30       	cpi	r25, 0x01	; 1
     144:	f9 f4       	brne	.+62     	; 0x184 <CALLBACK_USB_GetDescriptor+0x4c>
     146:	e8 e9       	ldi	r30, 0x98	; 152
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	22 e1       	ldi	r18, 0x12	; 18
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	1e c0       	rjmp	.+60     	; 0x18c <CALLBACK_USB_GetDescriptor+0x54>
     150:	ea ea       	ldi	r30, 0xAA	; 170
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	20 e2       	ldi	r18, 0x20	; 32
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	19 c0       	rjmp	.+50     	; 0x18c <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     15a:	81 30       	cpi	r24, 0x01	; 1
     15c:	49 f0       	breq	.+18     	; 0x170 <CALLBACK_USB_GetDescriptor+0x38>
     15e:	81 30       	cpi	r24, 0x01	; 1
     160:	18 f0       	brcs	.+6      	; 0x168 <CALLBACK_USB_GetDescriptor+0x30>
     162:	82 30       	cpi	r24, 0x02	; 2
     164:	79 f4       	brne	.+30     	; 0x184 <CALLBACK_USB_GetDescriptor+0x4c>
     166:	08 c0       	rjmp	.+16     	; 0x178 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     168:	ea ec       	ldi	r30, 0xCA	; 202
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	84 91       	lpm	r24, Z+
     16e:	07 c0       	rjmp	.+14     	; 0x17e <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     170:	ee ec       	ldi	r30, 0xCE	; 206
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	84 91       	lpm	r24, Z+
     176:	03 c0       	rjmp	.+6      	; 0x17e <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     178:	e8 ee       	ldi	r30, 0xE8	; 232
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	84 91       	lpm	r24, Z+
     17e:	28 2f       	mov	r18, r24
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	04 c0       	rjmp	.+8      	; 0x18c <CALLBACK_USB_GetDescriptor+0x54>
     184:	e0 e0       	ldi	r30, 0x00	; 0
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     18c:	ed 93       	st	X+, r30
     18e:	fc 93       	st	X, r31
	return Size;
}
     190:	c9 01       	movw	r24, r18
     192:	08 95       	ret

00000194 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
     194:	cf 92       	push	r12
     196:	df 92       	push	r13
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	df 93       	push	r29
     1a2:	cf 93       	push	r28
     1a4:	0f 92       	push	r0
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62
	char offset;
	if (USB_ControlRequest.bmRequestType != 0x40) return;
     1aa:	80 91 5e 01 	lds	r24, 0x015E
     1ae:	80 34       	cpi	r24, 0x40	; 64
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <EVENT_USB_Device_ControlRequest+0x20>
     1b2:	38 c3       	rjmp	.+1648   	; 0x824 <__stack+0x525>
	ItemPQ item;
	item.key = USB_ControlRequest.bRequest;
     1b4:	10 91 5f 01 	lds	r17, 0x015F
     1b8:	c1 2e       	mov	r12, r17
     1ba:	dd 24       	eor	r13, r13
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     1bc:	80 91 e8 00 	lds	r24, 0x00E8
     1c0:	87 7f       	andi	r24, 0xF7	; 247
     1c2:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearSETUP();
	Endpoint_Read_Control_Stream_LE(&offset, 1);
     1c6:	ce 01       	movw	r24, r28
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	e9 d4       	rcall	.+2514   	; 0xba2 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     1d0:	80 91 e8 00 	lds	r24, 0x00E8
     1d4:	8e 77       	andi	r24, 0x7E	; 126
     1d6:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();
	switch(item.key) { // custom command is in the bRequest field
     1da:	1a 30       	cpi	r17, 0x0A	; 10
     1dc:	09 f4       	brne	.+2      	; 0x1e0 <EVENT_USB_Device_ControlRequest+0x4c>
     1de:	f0 c1       	rjmp	.+992    	; 0x5c0 <__stack+0x2c1>
     1e0:	1b 30       	cpi	r17, 0x0B	; 11
     1e2:	10 f5       	brcc	.+68     	; 0x228 <EVENT_USB_Device_ControlRequest+0x94>
     1e4:	15 30       	cpi	r17, 0x05	; 5
     1e6:	09 f4       	brne	.+2      	; 0x1ea <EVENT_USB_Device_ControlRequest+0x56>
     1e8:	02 c1       	rjmp	.+516    	; 0x3ee <__stack+0xef>
     1ea:	16 30       	cpi	r17, 0x06	; 6
     1ec:	80 f4       	brcc	.+32     	; 0x20e <EVENT_USB_Device_ControlRequest+0x7a>
     1ee:	12 30       	cpi	r17, 0x02	; 2
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <EVENT_USB_Device_ControlRequest+0x60>
     1f2:	6e c0       	rjmp	.+220    	; 0x2d0 <EVENT_USB_Device_ControlRequest+0x13c>
     1f4:	13 30       	cpi	r17, 0x03	; 3
     1f6:	20 f4       	brcc	.+8      	; 0x200 <EVENT_USB_Device_ControlRequest+0x6c>
     1f8:	11 30       	cpi	r17, 0x01	; 1
     1fa:	09 f0       	breq	.+2      	; 0x1fe <EVENT_USB_Device_ControlRequest+0x6a>
     1fc:	f8 c2       	rjmp	.+1520   	; 0x7ee <__stack+0x4ef>
     1fe:	39 c0       	rjmp	.+114    	; 0x272 <EVENT_USB_Device_ControlRequest+0xde>
     200:	13 30       	cpi	r17, 0x03	; 3
     202:	09 f4       	brne	.+2      	; 0x206 <EVENT_USB_Device_ControlRequest+0x72>
     204:	96 c0       	rjmp	.+300    	; 0x332 <__stack+0x33>
     206:	14 30       	cpi	r17, 0x04	; 4
     208:	09 f0       	breq	.+2      	; 0x20c <EVENT_USB_Device_ControlRequest+0x78>
     20a:	f1 c2       	rjmp	.+1506   	; 0x7ee <__stack+0x4ef>
     20c:	c1 c0       	rjmp	.+386    	; 0x390 <__stack+0x91>
     20e:	17 30       	cpi	r17, 0x07	; 7
     210:	09 f4       	brne	.+2      	; 0x214 <EVENT_USB_Device_ControlRequest+0x80>
     212:	4b c1       	rjmp	.+662    	; 0x4aa <__stack+0x1ab>
     214:	17 30       	cpi	r17, 0x07	; 7
     216:	08 f4       	brcc	.+2      	; 0x21a <EVENT_USB_Device_ControlRequest+0x86>
     218:	19 c1       	rjmp	.+562    	; 0x44c <__stack+0x14d>
     21a:	18 30       	cpi	r17, 0x08	; 8
     21c:	09 f4       	brne	.+2      	; 0x220 <EVENT_USB_Device_ControlRequest+0x8c>
     21e:	74 c1       	rjmp	.+744    	; 0x508 <__stack+0x209>
     220:	19 30       	cpi	r17, 0x09	; 9
     222:	09 f0       	breq	.+2      	; 0x226 <EVENT_USB_Device_ControlRequest+0x92>
     224:	e4 c2       	rjmp	.+1480   	; 0x7ee <__stack+0x4ef>
     226:	9f c1       	rjmp	.+830    	; 0x566 <__stack+0x267>
     228:	1f 30       	cpi	r17, 0x0F	; 15
     22a:	09 f4       	brne	.+2      	; 0x22e <EVENT_USB_Device_ControlRequest+0x9a>
     22c:	6c c2       	rjmp	.+1240   	; 0x706 <__stack+0x407>
     22e:	10 31       	cpi	r17, 0x10	; 16
     230:	68 f4       	brcc	.+26     	; 0x24c <EVENT_USB_Device_ControlRequest+0xb8>
     232:	1c 30       	cpi	r17, 0x0C	; 12
     234:	09 f4       	brne	.+2      	; 0x238 <EVENT_USB_Device_ControlRequest+0xa4>
     236:	1e c2       	rjmp	.+1084   	; 0x674 <__stack+0x375>
     238:	1c 30       	cpi	r17, 0x0C	; 12
     23a:	08 f4       	brcc	.+2      	; 0x23e <EVENT_USB_Device_ControlRequest+0xaa>
     23c:	ee c1       	rjmp	.+988    	; 0x61a <__stack+0x31b>
     23e:	1d 30       	cpi	r17, 0x0D	; 13
     240:	09 f4       	brne	.+2      	; 0x244 <EVENT_USB_Device_ControlRequest+0xb0>
     242:	45 c2       	rjmp	.+1162   	; 0x6ce <__stack+0x3cf>
     244:	1e 30       	cpi	r17, 0x0E	; 14
     246:	09 f0       	breq	.+2      	; 0x24a <EVENT_USB_Device_ControlRequest+0xb6>
     248:	d2 c2       	rjmp	.+1444   	; 0x7ee <__stack+0x4ef>
     24a:	4f c2       	rjmp	.+1182   	; 0x6ea <__stack+0x3eb>
     24c:	12 31       	cpi	r17, 0x12	; 18
     24e:	09 f4       	brne	.+2      	; 0x252 <EVENT_USB_Device_ControlRequest+0xbe>
     250:	84 c2       	rjmp	.+1288   	; 0x75a <__stack+0x45b>
     252:	13 31       	cpi	r17, 0x13	; 19
     254:	38 f4       	brcc	.+14     	; 0x264 <EVENT_USB_Device_ControlRequest+0xd0>
     256:	10 31       	cpi	r17, 0x10	; 16
     258:	09 f4       	brne	.+2      	; 0x25c <EVENT_USB_Device_ControlRequest+0xc8>
     25a:	63 c2       	rjmp	.+1222   	; 0x722 <__stack+0x423>
     25c:	11 31       	cpi	r17, 0x11	; 17
     25e:	09 f0       	breq	.+2      	; 0x262 <EVENT_USB_Device_ControlRequest+0xce>
     260:	c6 c2       	rjmp	.+1420   	; 0x7ee <__stack+0x4ef>
     262:	6d c2       	rjmp	.+1242   	; 0x73e <__stack+0x43f>
     264:	13 31       	cpi	r17, 0x13	; 19
     266:	09 f4       	brne	.+2      	; 0x26a <EVENT_USB_Device_ControlRequest+0xd6>
     268:	86 c2       	rjmp	.+1292   	; 0x776 <__stack+0x477>
     26a:	14 31       	cpi	r17, 0x14	; 20
     26c:	09 f0       	breq	.+2      	; 0x270 <EVENT_USB_Device_ControlRequest+0xdc>
     26e:	bf c2       	rjmp	.+1406   	; 0x7ee <__stack+0x4ef>
     270:	90 c2       	rjmp	.+1312   	; 0x792 <__stack+0x493>
		case 1:
			item.value = curr_time+VELOCITY_INV*(SOL1_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL1_TRIM;
     272:	60 91 56 01 	lds	r22, 0x0156
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	88 27       	eor	r24, r24
     27a:	77 fd       	sbrc	r23, 7
     27c:	80 95       	com	r24
     27e:	98 2f       	mov	r25, r24
     280:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     284:	7b 01       	movw	r14, r22
     286:	8c 01       	movw	r16, r24
     288:	29 81       	ldd	r18, Y+1	; 0x01
     28a:	65 e6       	ldi	r22, 0x65	; 101
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	62 1b       	sub	r22, r18
     290:	71 09       	sbc	r23, r1
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 27       	eor	r24, r24
     298:	77 fd       	sbrc	r23, 7
     29a:	80 95       	com	r24
     29c:	98 2f       	mov	r25, r24
     29e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	44 e9       	ldi	r20, 0x94	; 148
     2a8:	5f e3       	ldi	r21, 0x3F	; 63
     2aa:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     2ae:	9b 01       	movw	r18, r22
     2b0:	ac 01       	movw	r20, r24
     2b2:	c8 01       	movw	r24, r16
     2b4:	b7 01       	movw	r22, r14
     2b6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__addsf3>
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	4a ea       	ldi	r20, 0xAA	; 170
     2c0:	52 e4       	ldi	r21, 0x42	; 66
     2c2:	0e 94 cf 0a 	call	0x159e	; 0x159e <__subsf3>
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e4       	ldi	r20, 0x40	; 64
     2cc:	50 e4       	ldi	r21, 0x40	; 64
     2ce:	2e c0       	rjmp	.+92     	; 0x32c <__stack+0x2d>
			break;
		case 2:
			item.value = curr_time+VELOCITY_INV*(SOL2_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL2_TRIM;
     2d0:	60 91 56 01 	lds	r22, 0x0156
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	88 27       	eor	r24, r24
     2d8:	77 fd       	sbrc	r23, 7
     2da:	80 95       	com	r24
     2dc:	98 2f       	mov	r25, r24
     2de:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     2e2:	7b 01       	movw	r14, r22
     2e4:	8c 01       	movw	r16, r24
     2e6:	29 81       	ldd	r18, Y+1	; 0x01
     2e8:	67 e9       	ldi	r22, 0x97	; 151
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	62 1b       	sub	r22, r18
     2ee:	71 09       	sbc	r23, r1
     2f0:	66 0f       	add	r22, r22
     2f2:	77 1f       	adc	r23, r23
     2f4:	88 27       	eor	r24, r24
     2f6:	77 fd       	sbrc	r23, 7
     2f8:	80 95       	com	r24
     2fa:	98 2f       	mov	r25, r24
     2fc:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	44 e9       	ldi	r20, 0x94	; 148
     306:	5f e3       	ldi	r21, 0x3F	; 63
     308:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     30c:	9b 01       	movw	r18, r22
     30e:	ac 01       	movw	r20, r24
     310:	c8 01       	movw	r24, r16
     312:	b7 01       	movw	r22, r14
     314:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__addsf3>
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	4a ea       	ldi	r20, 0xAA	; 170
     31e:	52 e4       	ldi	r21, 0x42	; 66
     320:	0e 94 cf 0a 	call	0x159e	; 0x159e <__subsf3>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__addsf3>
     330:	5b c2       	rjmp	.+1206   	; 0x7e8 <__stack+0x4e9>
			break;
		case 3:
			item.value = curr_time+VELOCITY_INV*(SOL3_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL3_TRIM;
     332:	60 91 56 01 	lds	r22, 0x0156
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	88 27       	eor	r24, r24
     33a:	77 fd       	sbrc	r23, 7
     33c:	80 95       	com	r24
     33e:	98 2f       	mov	r25, r24
     340:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     344:	7b 01       	movw	r14, r22
     346:	8c 01       	movw	r16, r24
     348:	29 81       	ldd	r18, Y+1	; 0x01
     34a:	69 ec       	ldi	r22, 0xC9	; 201
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	62 1b       	sub	r22, r18
     350:	71 09       	sbc	r23, r1
     352:	66 0f       	add	r22, r22
     354:	77 1f       	adc	r23, r23
     356:	88 27       	eor	r24, r24
     358:	77 fd       	sbrc	r23, 7
     35a:	80 95       	com	r24
     35c:	98 2f       	mov	r25, r24
     35e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	44 e9       	ldi	r20, 0x94	; 148
     368:	5f e3       	ldi	r21, 0x3F	; 63
     36a:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     36e:	9b 01       	movw	r18, r22
     370:	ac 01       	movw	r20, r24
     372:	c8 01       	movw	r24, r16
     374:	b7 01       	movw	r22, r14
     376:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__addsf3>
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	4a ea       	ldi	r20, 0xAA	; 170
     380:	52 e4       	ldi	r21, 0x42	; 66
     382:	0e 94 cf 0a 	call	0x159e	; 0x159e <__subsf3>
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	40 e7       	ldi	r20, 0x70	; 112
     38c:	51 e4       	ldi	r21, 0x41	; 65
     38e:	2b c2       	rjmp	.+1110   	; 0x7e6 <__stack+0x4e7>
			break;
		case 4:
			item.value = curr_time+VELOCITY_INV*(SOL4_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL4_TRIM;
     390:	60 91 56 01 	lds	r22, 0x0156
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	88 27       	eor	r24, r24
     398:	77 fd       	sbrc	r23, 7
     39a:	80 95       	com	r24
     39c:	98 2f       	mov	r25, r24
     39e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     3a2:	7b 01       	movw	r14, r22
     3a4:	8c 01       	movw	r16, r24
     3a6:	29 81       	ldd	r18, Y+1	; 0x01
     3a8:	6b ef       	ldi	r22, 0xFB	; 251
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	62 1b       	sub	r22, r18
     3ae:	71 09       	sbc	r23, r1
     3b0:	66 0f       	add	r22, r22
     3b2:	77 1f       	adc	r23, r23
     3b4:	88 27       	eor	r24, r24
     3b6:	77 fd       	sbrc	r23, 7
     3b8:	80 95       	com	r24
     3ba:	98 2f       	mov	r25, r24
     3bc:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	44 e9       	ldi	r20, 0x94	; 148
     3c6:	5f e3       	ldi	r21, 0x3F	; 63
     3c8:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	c8 01       	movw	r24, r16
     3d2:	b7 01       	movw	r22, r14
     3d4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__addsf3>
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	4a ea       	ldi	r20, 0xAA	; 170
     3de:	52 e4       	ldi	r21, 0x42	; 66
     3e0:	0e 94 cf 0a 	call	0x159e	; 0x159e <__subsf3>
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	40 ea       	ldi	r20, 0xA0	; 160
     3ea:	51 e4       	ldi	r21, 0x41	; 65
     3ec:	fc c1       	rjmp	.+1016   	; 0x7e6 <__stack+0x4e7>
			break;
		case 5:
			item.value = curr_time+VELOCITY_INV*(SOL5_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL5_TRIM;
     3ee:	60 91 56 01 	lds	r22, 0x0156
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	88 27       	eor	r24, r24
     3f6:	77 fd       	sbrc	r23, 7
     3f8:	80 95       	com	r24
     3fa:	98 2f       	mov	r25, r24
     3fc:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     400:	7b 01       	movw	r14, r22
     402:	8c 01       	movw	r16, r24
     404:	29 81       	ldd	r18, Y+1	; 0x01
     406:	6d e2       	ldi	r22, 0x2D	; 45
     408:	71 e0       	ldi	r23, 0x01	; 1
     40a:	62 1b       	sub	r22, r18
     40c:	71 09       	sbc	r23, r1
     40e:	66 0f       	add	r22, r22
     410:	77 1f       	adc	r23, r23
     412:	88 27       	eor	r24, r24
     414:	77 fd       	sbrc	r23, 7
     416:	80 95       	com	r24
     418:	98 2f       	mov	r25, r24
     41a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	44 e9       	ldi	r20, 0x94	; 148
     424:	5f e3       	ldi	r21, 0x3F	; 63
     426:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     42a:	9b 01       	movw	r18, r22
     42c:	ac 01       	movw	r20, r24
     42e:	c8 01       	movw	r24, r16
     430:	b7 01       	movw	r22, r14
     432:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__addsf3>
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	4a ea       	ldi	r20, 0xAA	; 170
     43c:	52 e4       	ldi	r21, 0x42	; 66
     43e:	0e 94 cf 0a 	call	0x159e	; 0x159e <__subsf3>
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	44 e0       	ldi	r20, 0x04	; 4
     448:	52 e4       	ldi	r21, 0x42	; 66
     44a:	cd c1       	rjmp	.+922    	; 0x7e6 <__stack+0x4e7>
			break;
		case 6:
			item.value = curr_time+VELOCITY_INV*(SOL6_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL6_TRIM;
     44c:	60 91 56 01 	lds	r22, 0x0156
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	88 27       	eor	r24, r24
     454:	77 fd       	sbrc	r23, 7
     456:	80 95       	com	r24
     458:	98 2f       	mov	r25, r24
     45a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     45e:	7b 01       	movw	r14, r22
     460:	8c 01       	movw	r16, r24
     462:	29 81       	ldd	r18, Y+1	; 0x01
     464:	6f e5       	ldi	r22, 0x5F	; 95
     466:	71 e0       	ldi	r23, 0x01	; 1
     468:	62 1b       	sub	r22, r18
     46a:	71 09       	sbc	r23, r1
     46c:	66 0f       	add	r22, r22
     46e:	77 1f       	adc	r23, r23
     470:	88 27       	eor	r24, r24
     472:	77 fd       	sbrc	r23, 7
     474:	80 95       	com	r24
     476:	98 2f       	mov	r25, r24
     478:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	44 e9       	ldi	r20, 0x94	; 148
     482:	5f e3       	ldi	r21, 0x3F	; 63
     484:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     488:	9b 01       	movw	r18, r22
     48a:	ac 01       	movw	r20, r24
     48c:	c8 01       	movw	r24, r16
     48e:	b7 01       	movw	r22, r14
     490:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__addsf3>
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	4a ea       	ldi	r20, 0xAA	; 170
     49a:	52 e4       	ldi	r21, 0x42	; 66
     49c:	0e 94 cf 0a 	call	0x159e	; 0x159e <__subsf3>
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	46 e8       	ldi	r20, 0x86	; 134
     4a6:	52 e4       	ldi	r21, 0x42	; 66
     4a8:	9e c1       	rjmp	.+828    	; 0x7e6 <__stack+0x4e7>
			break;
		case 7:
			item.value = curr_time+VELOCITY_INV*(SOL7_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL7_TRIM;
     4aa:	60 91 56 01 	lds	r22, 0x0156
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	88 27       	eor	r24, r24
     4b2:	77 fd       	sbrc	r23, 7
     4b4:	80 95       	com	r24
     4b6:	98 2f       	mov	r25, r24
     4b8:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     4bc:	7b 01       	movw	r14, r22
     4be:	8c 01       	movw	r16, r24
     4c0:	29 81       	ldd	r18, Y+1	; 0x01
     4c2:	61 e9       	ldi	r22, 0x91	; 145
     4c4:	71 e0       	ldi	r23, 0x01	; 1
     4c6:	62 1b       	sub	r22, r18
     4c8:	71 09       	sbc	r23, r1
     4ca:	66 0f       	add	r22, r22
     4cc:	77 1f       	adc	r23, r23
     4ce:	88 27       	eor	r24, r24
     4d0:	77 fd       	sbrc	r23, 7
     4d2:	80 95       	com	r24
     4d4:	98 2f       	mov	r25, r24
     4d6:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	44 e9       	ldi	r20, 0x94	; 148
     4e0:	5f e3       	ldi	r21, 0x3F	; 63
     4e2:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     4e6:	9b 01       	movw	r18, r22
     4e8:	ac 01       	movw	r20, r24
     4ea:	c8 01       	movw	r24, r16
     4ec:	b7 01       	movw	r22, r14
     4ee:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__addsf3>
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	4a ea       	ldi	r20, 0xAA	; 170
     4f8:	52 e4       	ldi	r21, 0x42	; 66
     4fa:	0e 94 cf 0a 	call	0x159e	; 0x159e <__subsf3>
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	40 e9       	ldi	r20, 0x90	; 144
     504:	52 e4       	ldi	r21, 0x42	; 66
     506:	6f c1       	rjmp	.+734    	; 0x7e6 <__stack+0x4e7>
			break;
		case 8:
			item.value = curr_time+VELOCITY_INV*(SOL8_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL8_TRIM;
     508:	60 91 56 01 	lds	r22, 0x0156
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	88 27       	eor	r24, r24
     510:	77 fd       	sbrc	r23, 7
     512:	80 95       	com	r24
     514:	98 2f       	mov	r25, r24
     516:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     51a:	7b 01       	movw	r14, r22
     51c:	8c 01       	movw	r16, r24
     51e:	29 81       	ldd	r18, Y+1	; 0x01
     520:	63 ec       	ldi	r22, 0xC3	; 195
     522:	71 e0       	ldi	r23, 0x01	; 1
     524:	62 1b       	sub	r22, r18
     526:	71 09       	sbc	r23, r1
     528:	66 0f       	add	r22, r22
     52a:	77 1f       	adc	r23, r23
     52c:	88 27       	eor	r24, r24
     52e:	77 fd       	sbrc	r23, 7
     530:	80 95       	com	r24
     532:	98 2f       	mov	r25, r24
     534:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	44 e9       	ldi	r20, 0x94	; 148
     53e:	5f e3       	ldi	r21, 0x3F	; 63
     540:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     544:	9b 01       	movw	r18, r22
     546:	ac 01       	movw	r20, r24
     548:	c8 01       	movw	r24, r16
     54a:	b7 01       	movw	r22, r14
     54c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__addsf3>
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	4a ea       	ldi	r20, 0xAA	; 170
     556:	52 e4       	ldi	r21, 0x42	; 66
     558:	0e 94 cf 0a 	call	0x159e	; 0x159e <__subsf3>
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	4e eb       	ldi	r20, 0xBE	; 190
     562:	52 e4       	ldi	r21, 0x42	; 66
     564:	40 c1       	rjmp	.+640    	; 0x7e6 <__stack+0x4e7>
			break;
		case 9:
			item.value = curr_time+VELOCITY_INV*(SOL9_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL9_TRIM;
     566:	60 91 56 01 	lds	r22, 0x0156
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	88 27       	eor	r24, r24
     56e:	77 fd       	sbrc	r23, 7
     570:	80 95       	com	r24
     572:	98 2f       	mov	r25, r24
     574:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     578:	7b 01       	movw	r14, r22
     57a:	8c 01       	movw	r16, r24
     57c:	29 81       	ldd	r18, Y+1	; 0x01
     57e:	65 ef       	ldi	r22, 0xF5	; 245
     580:	71 e0       	ldi	r23, 0x01	; 1
     582:	62 1b       	sub	r22, r18
     584:	71 09       	sbc	r23, r1
     586:	66 0f       	add	r22, r22
     588:	77 1f       	adc	r23, r23
     58a:	88 27       	eor	r24, r24
     58c:	77 fd       	sbrc	r23, 7
     58e:	80 95       	com	r24
     590:	98 2f       	mov	r25, r24
     592:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	44 e9       	ldi	r20, 0x94	; 148
     59c:	5f e3       	ldi	r21, 0x3F	; 63
     59e:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     5a2:	9b 01       	movw	r18, r22
     5a4:	ac 01       	movw	r20, r24
     5a6:	c8 01       	movw	r24, r16
     5a8:	b7 01       	movw	r22, r14
     5aa:	fa d7       	rcall	.+4084   	; 0x15a0 <__addsf3>
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	4a ea       	ldi	r20, 0xAA	; 170
     5b2:	52 e4       	ldi	r21, 0x42	; 66
     5b4:	f4 d7       	rcall	.+4072   	; 0x159e <__subsf3>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	4a ea       	ldi	r20, 0xAA	; 170
     5bc:	52 e4       	ldi	r21, 0x42	; 66
     5be:	13 c1       	rjmp	.+550    	; 0x7e6 <__stack+0x4e7>
			break;
		case 10:
			item.value = curr_time+VELOCITY_INV*(SOL10_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL10_TRIM;
     5c0:	60 91 56 01 	lds	r22, 0x0156
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	88 27       	eor	r24, r24
     5c8:	77 fd       	sbrc	r23, 7
     5ca:	80 95       	com	r24
     5cc:	98 2f       	mov	r25, r24
     5ce:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     5d2:	7b 01       	movw	r14, r22
     5d4:	8c 01       	movw	r16, r24
     5d6:	29 81       	ldd	r18, Y+1	; 0x01
     5d8:	67 e2       	ldi	r22, 0x27	; 39
     5da:	72 e0       	ldi	r23, 0x02	; 2
     5dc:	62 1b       	sub	r22, r18
     5de:	71 09       	sbc	r23, r1
     5e0:	66 0f       	add	r22, r22
     5e2:	77 1f       	adc	r23, r23
     5e4:	88 27       	eor	r24, r24
     5e6:	77 fd       	sbrc	r23, 7
     5e8:	80 95       	com	r24
     5ea:	98 2f       	mov	r25, r24
     5ec:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	44 e9       	ldi	r20, 0x94	; 148
     5f6:	5f e3       	ldi	r21, 0x3F	; 63
     5f8:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     5fc:	9b 01       	movw	r18, r22
     5fe:	ac 01       	movw	r20, r24
     600:	c8 01       	movw	r24, r16
     602:	b7 01       	movw	r22, r14
     604:	cd d7       	rcall	.+3994   	; 0x15a0 <__addsf3>
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	4a ea       	ldi	r20, 0xAA	; 170
     60c:	52 e4       	ldi	r21, 0x42	; 66
     60e:	c7 d7       	rcall	.+3982   	; 0x159e <__subsf3>
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	45 e0       	ldi	r20, 0x05	; 5
     616:	53 e4       	ldi	r21, 0x43	; 67
     618:	e6 c0       	rjmp	.+460    	; 0x7e6 <__stack+0x4e7>
			break;
		case 11:
			item.value = curr_time+VELOCITY_INV*(SOL11_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL11_TRIM;
     61a:	60 91 56 01 	lds	r22, 0x0156
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	88 27       	eor	r24, r24
     622:	77 fd       	sbrc	r23, 7
     624:	80 95       	com	r24
     626:	98 2f       	mov	r25, r24
     628:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     62c:	7b 01       	movw	r14, r22
     62e:	8c 01       	movw	r16, r24
     630:	29 81       	ldd	r18, Y+1	; 0x01
     632:	69 e5       	ldi	r22, 0x59	; 89
     634:	72 e0       	ldi	r23, 0x02	; 2
     636:	62 1b       	sub	r22, r18
     638:	71 09       	sbc	r23, r1
     63a:	66 0f       	add	r22, r22
     63c:	77 1f       	adc	r23, r23
     63e:	88 27       	eor	r24, r24
     640:	77 fd       	sbrc	r23, 7
     642:	80 95       	com	r24
     644:	98 2f       	mov	r25, r24
     646:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	44 e9       	ldi	r20, 0x94	; 148
     650:	5f e3       	ldi	r21, 0x3F	; 63
     652:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     656:	9b 01       	movw	r18, r22
     658:	ac 01       	movw	r20, r24
     65a:	c8 01       	movw	r24, r16
     65c:	b7 01       	movw	r22, r14
     65e:	a0 d7       	rcall	.+3904   	; 0x15a0 <__addsf3>
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	4a ea       	ldi	r20, 0xAA	; 170
     666:	52 e4       	ldi	r21, 0x42	; 66
     668:	9a d7       	rcall	.+3892   	; 0x159e <__subsf3>
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	4c ed       	ldi	r20, 0xDC	; 220
     670:	52 e4       	ldi	r21, 0x42	; 66
     672:	b9 c0       	rjmp	.+370    	; 0x7e6 <__stack+0x4e7>
			break;
		case 12:
			item.value = curr_time+VELOCITY_INV*(SOL12_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL12_TRIM;
     674:	60 91 56 01 	lds	r22, 0x0156
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	88 27       	eor	r24, r24
     67c:	77 fd       	sbrc	r23, 7
     67e:	80 95       	com	r24
     680:	98 2f       	mov	r25, r24
     682:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     686:	7b 01       	movw	r14, r22
     688:	8c 01       	movw	r16, r24
     68a:	29 81       	ldd	r18, Y+1	; 0x01
     68c:	6b e8       	ldi	r22, 0x8B	; 139
     68e:	72 e0       	ldi	r23, 0x02	; 2
     690:	62 1b       	sub	r22, r18
     692:	71 09       	sbc	r23, r1
     694:	66 0f       	add	r22, r22
     696:	77 1f       	adc	r23, r23
     698:	88 27       	eor	r24, r24
     69a:	77 fd       	sbrc	r23, 7
     69c:	80 95       	com	r24
     69e:	98 2f       	mov	r25, r24
     6a0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatsisf>
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	44 e9       	ldi	r20, 0x94	; 148
     6aa:	5f e3       	ldi	r21, 0x3F	; 63
     6ac:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	c8 01       	movw	r24, r16
     6b6:	b7 01       	movw	r22, r14
     6b8:	73 d7       	rcall	.+3814   	; 0x15a0 <__addsf3>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	4a ea       	ldi	r20, 0xAA	; 170
     6c0:	52 e4       	ldi	r21, 0x42	; 66
     6c2:	6d d7       	rcall	.+3802   	; 0x159e <__subsf3>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	45 e1       	ldi	r20, 0x15	; 21
     6ca:	53 e4       	ldi	r21, 0x43	; 67
     6cc:	8c c0       	rjmp	.+280    	; 0x7e6 <__stack+0x4e7>
			break;
		case 13:
			item.value = curr_time+VELOCITY_INV*(SOL13_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL13_TRIM;
     6ce:	60 91 56 01 	lds	r22, 0x0156
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	88 27       	eor	r24, r24
     6d6:	77 fd       	sbrc	r23, 7
     6d8:	80 95       	com	r24
     6da:	98 2f       	mov	r25, r24
     6dc:	f8 d7       	rcall	.+4080   	; 0x16ce <__floatsisf>
     6de:	7b 01       	movw	r14, r22
     6e0:	8c 01       	movw	r16, r24
     6e2:	29 81       	ldd	r18, Y+1	; 0x01
     6e4:	6d eb       	ldi	r22, 0xBD	; 189
     6e6:	72 e0       	ldi	r23, 0x02	; 2
     6e8:	61 c0       	rjmp	.+194    	; 0x7ac <__stack+0x4ad>
			break;
		case 14:
			item.value = curr_time+VELOCITY_INV*(SOL14_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL14_TRIM;
     6ea:	60 91 56 01 	lds	r22, 0x0156
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	88 27       	eor	r24, r24
     6f2:	77 fd       	sbrc	r23, 7
     6f4:	80 95       	com	r24
     6f6:	98 2f       	mov	r25, r24
     6f8:	ea d7       	rcall	.+4052   	; 0x16ce <__floatsisf>
     6fa:	7b 01       	movw	r14, r22
     6fc:	8c 01       	movw	r16, r24
     6fe:	29 81       	ldd	r18, Y+1	; 0x01
     700:	6f ee       	ldi	r22, 0xEF	; 239
     702:	72 e0       	ldi	r23, 0x02	; 2
     704:	53 c0       	rjmp	.+166    	; 0x7ac <__stack+0x4ad>
			break;
		case 15:
			item.value = curr_time+VELOCITY_INV*(SOL15_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL15_TRIM;
     706:	60 91 56 01 	lds	r22, 0x0156
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	88 27       	eor	r24, r24
     70e:	77 fd       	sbrc	r23, 7
     710:	80 95       	com	r24
     712:	98 2f       	mov	r25, r24
     714:	dc d7       	rcall	.+4024   	; 0x16ce <__floatsisf>
     716:	7b 01       	movw	r14, r22
     718:	8c 01       	movw	r16, r24
     71a:	29 81       	ldd	r18, Y+1	; 0x01
     71c:	61 e2       	ldi	r22, 0x21	; 33
     71e:	73 e0       	ldi	r23, 0x03	; 3
     720:	45 c0       	rjmp	.+138    	; 0x7ac <__stack+0x4ad>
			break;
		case 16:
			item.value = curr_time+VELOCITY_INV*(SOL16_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL16_TRIM;
     722:	60 91 56 01 	lds	r22, 0x0156
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	88 27       	eor	r24, r24
     72a:	77 fd       	sbrc	r23, 7
     72c:	80 95       	com	r24
     72e:	98 2f       	mov	r25, r24
     730:	ce d7       	rcall	.+3996   	; 0x16ce <__floatsisf>
     732:	7b 01       	movw	r14, r22
     734:	8c 01       	movw	r16, r24
     736:	29 81       	ldd	r18, Y+1	; 0x01
     738:	63 e5       	ldi	r22, 0x53	; 83
     73a:	73 e0       	ldi	r23, 0x03	; 3
     73c:	37 c0       	rjmp	.+110    	; 0x7ac <__stack+0x4ad>
			break;
		case 17:
			item.value = curr_time+VELOCITY_INV*(SOL17_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL17_TRIM;
     73e:	60 91 56 01 	lds	r22, 0x0156
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	88 27       	eor	r24, r24
     746:	77 fd       	sbrc	r23, 7
     748:	80 95       	com	r24
     74a:	98 2f       	mov	r25, r24
     74c:	c0 d7       	rcall	.+3968   	; 0x16ce <__floatsisf>
     74e:	7b 01       	movw	r14, r22
     750:	8c 01       	movw	r16, r24
     752:	29 81       	ldd	r18, Y+1	; 0x01
     754:	65 e8       	ldi	r22, 0x85	; 133
     756:	73 e0       	ldi	r23, 0x03	; 3
     758:	29 c0       	rjmp	.+82     	; 0x7ac <__stack+0x4ad>
			break;
		case 18:
			item.value = curr_time+VELOCITY_INV*(SOL18_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL18_TRIM;
     75a:	60 91 56 01 	lds	r22, 0x0156
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	88 27       	eor	r24, r24
     762:	77 fd       	sbrc	r23, 7
     764:	80 95       	com	r24
     766:	98 2f       	mov	r25, r24
     768:	b2 d7       	rcall	.+3940   	; 0x16ce <__floatsisf>
     76a:	7b 01       	movw	r14, r22
     76c:	8c 01       	movw	r16, r24
     76e:	29 81       	ldd	r18, Y+1	; 0x01
     770:	67 eb       	ldi	r22, 0xB7	; 183
     772:	73 e0       	ldi	r23, 0x03	; 3
     774:	1b c0       	rjmp	.+54     	; 0x7ac <__stack+0x4ad>
			break;
		case 19:
			item.value = curr_time+VELOCITY_INV*(SOL19_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL19_TRIM;
     776:	60 91 56 01 	lds	r22, 0x0156
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	88 27       	eor	r24, r24
     77e:	77 fd       	sbrc	r23, 7
     780:	80 95       	com	r24
     782:	98 2f       	mov	r25, r24
     784:	a4 d7       	rcall	.+3912   	; 0x16ce <__floatsisf>
     786:	7b 01       	movw	r14, r22
     788:	8c 01       	movw	r16, r24
     78a:	29 81       	ldd	r18, Y+1	; 0x01
     78c:	69 ee       	ldi	r22, 0xE9	; 233
     78e:	73 e0       	ldi	r23, 0x03	; 3
     790:	0d c0       	rjmp	.+26     	; 0x7ac <__stack+0x4ad>
			break;
		case 20:
			item.value = curr_time+VELOCITY_INV*(SOL20_DIST-offset*OFFSET_SCALING_FACTOR)-GENERIC_CAP_DELAY+SOL20_TRIM;
     792:	60 91 56 01 	lds	r22, 0x0156
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	88 27       	eor	r24, r24
     79a:	77 fd       	sbrc	r23, 7
     79c:	80 95       	com	r24
     79e:	98 2f       	mov	r25, r24
     7a0:	96 d7       	rcall	.+3884   	; 0x16ce <__floatsisf>
     7a2:	7b 01       	movw	r14, r22
     7a4:	8c 01       	movw	r16, r24
     7a6:	29 81       	ldd	r18, Y+1	; 0x01
     7a8:	6b e1       	ldi	r22, 0x1B	; 27
     7aa:	74 e0       	ldi	r23, 0x04	; 4
     7ac:	62 1b       	sub	r22, r18
     7ae:	71 09       	sbc	r23, r1
     7b0:	66 0f       	add	r22, r22
     7b2:	77 1f       	adc	r23, r23
     7b4:	88 27       	eor	r24, r24
     7b6:	77 fd       	sbrc	r23, 7
     7b8:	80 95       	com	r24
     7ba:	98 2f       	mov	r25, r24
     7bc:	88 d7       	rcall	.+3856   	; 0x16ce <__floatsisf>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	44 e9       	ldi	r20, 0x94	; 148
     7c4:	5f e3       	ldi	r21, 0x3F	; 63
     7c6:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__mulsf3>
     7ca:	9b 01       	movw	r18, r22
     7cc:	ac 01       	movw	r20, r24
     7ce:	c8 01       	movw	r24, r16
     7d0:	b7 01       	movw	r22, r14
     7d2:	e6 d6       	rcall	.+3532   	; 0x15a0 <__addsf3>
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	4a ea       	ldi	r20, 0xAA	; 170
     7da:	52 e4       	ldi	r21, 0x42	; 66
     7dc:	e0 d6       	rcall	.+3520   	; 0x159e <__subsf3>
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	40 ea       	ldi	r20, 0xA0	; 160
     7e4:	52 e4       	ldi	r21, 0x42	; 66
     7e6:	db d6       	rcall	.+3510   	; 0x159e <__subsf3>
     7e8:	3f d7       	rcall	.+3710   	; 0x1668 <__fixsfsi>
     7ea:	26 2f       	mov	r18, r22
     7ec:	67 2f       	mov	r22, r23
			break;
		}
	if (item.value < curr_time) item.value = curr_time;
     7ee:	30 91 56 01 	lds	r19, 0x0156
	if (item.key <= 16 && item.key > 0) {
     7f2:	c6 01       	movw	r24, r12
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	40 97       	sbiw	r24, 0x10	; 16
     7f8:	a8 f4       	brcc	.+42     	; 0x824 <__stack+0x525>
		PQAdd(q, item);
     7fa:	e0 91 57 01 	lds	r30, 0x0157
     7fe:	f0 91 58 01 	lds	r31, 0x0158
     802:	43 2f       	mov	r20, r19
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	82 2f       	mov	r24, r18
     808:	96 2f       	mov	r25, r22
     80a:	9c 01       	movw	r18, r24
     80c:	24 17       	cp	r18, r20
     80e:	35 07       	cpc	r19, r21
     810:	0c f4       	brge	.+2      	; 0x814 <__stack+0x515>
     812:	9a 01       	movw	r18, r20
     814:	b9 01       	movw	r22, r18
     816:	a6 01       	movw	r20, r12
     818:	cf 01       	movw	r24, r30
     81a:	55 d6       	rcall	.+3242   	; 0x14c6 <PQAdd>
		PORTC ^= 0x4;
     81c:	88 b1       	in	r24, 0x08	; 8
     81e:	94 e0       	ldi	r25, 0x04	; 4
     820:	89 27       	eor	r24, r25
     822:	88 b9       	out	0x08, r24	; 8
	}
}
     824:	0f 90       	pop	r0
     826:	cf 91       	pop	r28
     828:	df 91       	pop	r29
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	df 90       	pop	r13
     834:	cf 90       	pop	r12
     836:	08 95       	ret

00000838 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	61 e0       	ldi	r22, 0x01	; 1
     83c:	42 e3       	ldi	r20, 0x32	; 50
     83e:	55 d2       	rcall	.+1194   	; 0xcea <Endpoint_ConfigureEndpoint_Prv>
	ConfigSuccess &= Endpoint_ConfigureEndpoint(VENDOR_IN_EPADDR,  EP_TYPE_CONTROL, VENDOR_IO_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(VENDOR_OUT_EPADDR, EP_TYPE_CONTROL, VENDOR_IO_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	//LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
}
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	42 e3       	ldi	r20, 0x32	; 50
     846:	51 c2       	rjmp	.+1186   	; 0xcea <Endpoint_ConfigureEndpoint_Prv>

00000848 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     848:	84 b7       	in	r24, 0x34	; 52
     84a:	87 7f       	andi	r24, 0xF7	; 247
     84c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     84e:	88 e1       	ldi	r24, 0x18	; 24
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	80 93 60 00 	sts	0x0060, r24
     858:	10 92 60 00 	sts	0x0060, r1
     85c:	0f be       	out	0x3f, r0	; 63
#endif

	/* Hardware Initialization */
	//LEDs_Init();
	USB_Init();
}
     85e:	d6 c2       	rjmp	.+1452   	; 0xe0c <USB_Init>

00000860 <main>:
}

int main(void)
{
	//_delay_ms(2000);
    DDRB = 0xFF;
     860:	8f ef       	ldi	r24, 0xFF	; 255
     862:	84 b9       	out	0x04, r24	; 4
    DDRD = 0xFF;
     864:	8a b9       	out	0x0a, r24	; 10
	DDRC |= 0xF4;
     866:	87 b1       	in	r24, 0x07	; 7
     868:	84 6f       	ori	r24, 0xF4	; 244
     86a:	87 b9       	out	0x07, r24	; 7
    PORTD = 0;
     86c:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0;
     86e:	15 b8       	out	0x05, r1	; 5
	PORTC &= ~0xF4;
     870:	88 b1       	in	r24, 0x08	; 8
     872:	8b 70       	andi	r24, 0x0B	; 11
     874:	88 b9       	out	0x08, r24	; 8
    PORTC |= 0x4;
     876:	42 9a       	sbi	0x08, 2	; 8
     878:	88 e8       	ldi	r24, 0x88	; 136
     87a:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     87c:	28 ec       	ldi	r18, 0xC8	; 200
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	f9 01       	movw	r30, r18
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     886:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     888:	d9 f7       	brne	.-10     	; 0x880 <main+0x20>
    _delay_ms(500);
    PORTC &= ~0x4;
     88a:	42 98       	cbi	0x08, 2	; 8
     88c:	88 e8       	ldi	r24, 0x88	; 136
     88e:	93 e1       	ldi	r25, 0x13	; 19
     890:	28 ec       	ldi	r18, 0xC8	; 200
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	f9 01       	movw	r30, r18
     896:	31 97       	sbiw	r30, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <main+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     89a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     89c:	d9 f7       	brne	.-10     	; 0x894 <main+0x34>
    _delay_ms(500);
	q = PQNew();
     89e:	59 d6       	rcall	.+3250   	; 0x1552 <PQNew>
     8a0:	90 93 58 01 	sts	0x0158, r25
     8a4:	80 93 57 01 	sts	0x0157, r24
	PORTC |= 0x4;
     8a8:	42 9a       	sbi	0x08, 2	; 8
     8aa:	88 ee       	ldi	r24, 0xE8	; 232
     8ac:	93 e0       	ldi	r25, 0x03	; 3
     8ae:	28 ec       	ldi	r18, 0xC8	; 200
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	f9 01       	movw	r30, r18
     8b4:	31 97       	sbiw	r30, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ba:	d9 f7       	brne	.-10     	; 0x8b2 <main+0x52>
    _delay_ms(100);
    PORTC &= ~0x4;
     8bc:	42 98       	cbi	0x08, 2	; 8
     8be:	88 ee       	ldi	r24, 0xE8	; 232
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	28 ec       	ldi	r18, 0xC8	; 200
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	f9 01       	movw	r30, r18
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <main+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ce:	d9 f7       	brne	.-10     	; 0x8c6 <main+0x66>
    _delay_ms(100);

	curr_time = 0;
     8d0:	10 92 56 01 	sts	0x0156, r1
	sei();
     8d4:	78 94       	sei
	TCCR0B |= 5;
     8d6:	85 b5       	in	r24, 0x25	; 37
     8d8:	85 60       	ori	r24, 0x05	; 5
     8da:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0);
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	80 93 6e 00 	sts	0x006E, r24
	SetupHardware();
     8e2:	b2 df       	rcall	.-156    	; 0x848 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     8e4:	78 94       	sei
	
	GlobalInterruptEnable();

	for (;;)
	{
		USB_USBTask();
     8e6:	f6 d4       	rcall	.+2540   	; 0x12d4 <USB_USBTask>
     8e8:	fe cf       	rjmp	.-4      	; 0x8e6 <main+0x86>

000008ea <__vector_21>:


PQ q;
char curr_time;

ISR (TIMER0_OVF_vect) {
     8ea:	1f 92       	push	r1
     8ec:	0f 92       	push	r0
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	0f 92       	push	r0
     8f2:	11 24       	eor	r1, r1
     8f4:	8f 92       	push	r8
     8f6:	9f 92       	push	r9
     8f8:	af 92       	push	r10
     8fa:	bf 92       	push	r11
     8fc:	cf 92       	push	r12
     8fe:	df 92       	push	r13
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	2f 93       	push	r18
     90a:	3f 93       	push	r19
     90c:	4f 93       	push	r20
     90e:	5f 93       	push	r21
     910:	6f 93       	push	r22
     912:	7f 93       	push	r23
     914:	8f 93       	push	r24
     916:	9f 93       	push	r25
     918:	af 93       	push	r26
     91a:	bf 93       	push	r27
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	ef 93       	push	r30
     922:	ff 93       	push	r31
	TCNT0 += TIMER_OFFSET; //1ms for 247 //every 2.5ms for 236
     924:	86 b5       	in	r24, 0x26	; 38
     926:	89 50       	subi	r24, 0x09	; 9
     928:	86 bd       	out	0x26, r24	; 38
	ItemPQ item;
	if (!PQIsEmpty(q)) {
     92a:	80 91 57 01 	lds	r24, 0x0157
     92e:	90 91 58 01 	lds	r25, 0x0158
     932:	46 d5       	rcall	.+2700   	; 0x13c0 <PQIsEmpty>
     934:	88 23       	and	r24, r24
     936:	09 f0       	breq	.+2      	; 0x93a <__vector_21+0x50>
     938:	a1 c0       	rjmp	.+322    	; 0xa7c <__vector_21+0x192>
		item = PQPeek(q);
     93a:	80 91 57 01 	lds	r24, 0x0157
     93e:	90 91 58 01 	lds	r25, 0x0158
     942:	fd d4       	rcall	.+2554   	; 0x133e <PQPeek>
     944:	9c 01       	movw	r18, r24
     946:	eb 01       	movw	r28, r22
				if (item.key >= -8) {
					PORTD &= ~(1 << (-1-item.key));
				} else if (item.key >= -16) {
					PORTB &= ~(1 << (-9-item.key));
				} else {
					PORTC &= ~(1 << (-13-item.key));
     948:	63 ef       	ldi	r22, 0xF3	; 243
     94a:	86 2e       	mov	r8, r22
     94c:	6f ef       	ldi	r22, 0xFF	; 255
     94e:	96 2e       	mov	r9, r22
     950:	51 e0       	ldi	r21, 0x01	; 1
     952:	c5 2e       	mov	r12, r21
     954:	d1 2c       	mov	r13, r1
				PQAdd(q, item);
			} else {
				if (item.key >= -8) {
					PORTD &= ~(1 << (-1-item.key));
				} else if (item.key >= -16) {
					PORTB &= ~(1 << (-9-item.key));
     956:	47 ef       	ldi	r20, 0xF7	; 247
     958:	a4 2e       	mov	r10, r20
     95a:	4f ef       	ldi	r20, 0xFF	; 255
     95c:	b4 2e       	mov	r11, r20
     95e:	87 c0       	rjmp	.+270    	; 0xa6e <__vector_21+0x184>
	TCNT0 += TIMER_OFFSET; //1ms for 247 //every 2.5ms for 236
	ItemPQ item;
	if (!PQIsEmpty(q)) {
		item = PQPeek(q);
		while (item.value <= curr_time) {
			PQDequeue(q);
     960:	80 91 57 01 	lds	r24, 0x0157
     964:	90 91 58 01 	lds	r25, 0x0158
     968:	37 d5       	rcall	.+2670   	; 0x13d8 <PQDequeue>
			if (item.key > 0) {
     96a:	1c 16       	cp	r1, r28
     96c:	1d 06       	cpc	r1, r29
     96e:	0c f0       	brlt	.+2      	; 0x972 <__vector_21+0x88>
     970:	3e c0       	rjmp	.+124    	; 0x9ee <__vector_21+0x104>
				if (item.key <= 8) {
     972:	c9 30       	cpi	r28, 0x09	; 9
     974:	d1 05       	cpc	r29, r1
     976:	6c f4       	brge	.+26     	; 0x992 <__vector_21+0xa8>
					PORTD |= 1 << (item.key-1);
     978:	2b b1       	in	r18, 0x0b	; 11
     97a:	21 97       	sbiw	r28, 0x01	; 1
     97c:	c6 01       	movw	r24, r12
     97e:	0c 2e       	mov	r0, r28
     980:	02 c0       	rjmp	.+4      	; 0x986 <__vector_21+0x9c>
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	0a 94       	dec	r0
     988:	e2 f7       	brpl	.-8      	; 0x982 <__vector_21+0x98>
     98a:	21 96       	adiw	r28, 0x01	; 1
     98c:	28 2b       	or	r18, r24
     98e:	2b b9       	out	0x0b, r18	; 11
     990:	1c c0       	rjmp	.+56     	; 0x9ca <__vector_21+0xe0>
				} else if (item.key <= 16) {
     992:	c1 31       	cpi	r28, 0x11	; 17
     994:	d1 05       	cpc	r29, r1
     996:	6c f4       	brge	.+26     	; 0x9b2 <__vector_21+0xc8>
					PORTB |= 1 << (item.key-9);
     998:	25 b1       	in	r18, 0x05	; 5
     99a:	29 97       	sbiw	r28, 0x09	; 9
     99c:	c6 01       	movw	r24, r12
     99e:	0c 2e       	mov	r0, r28
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__vector_21+0xbc>
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	0a 94       	dec	r0
     9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <__vector_21+0xb8>
     9aa:	29 96       	adiw	r28, 0x09	; 9
     9ac:	28 2b       	or	r18, r24
     9ae:	25 b9       	out	0x05, r18	; 5
     9b0:	0c c0       	rjmp	.+24     	; 0x9ca <__vector_21+0xe0>
				} else {
					PORTC |= 1 << (item.key-13);
     9b2:	28 b1       	in	r18, 0x08	; 8
     9b4:	2d 97       	sbiw	r28, 0x0d	; 13
     9b6:	c6 01       	movw	r24, r12
     9b8:	0c 2e       	mov	r0, r28
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__vector_21+0xd6>
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	0a 94       	dec	r0
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <__vector_21+0xd2>
     9c4:	2d 96       	adiw	r28, 0x0d	; 13
     9c6:	28 2b       	or	r18, r24
     9c8:	28 b9       	out	0x08, r18	; 8
				}
				item.key = 0-item.key;
				item.value = curr_time+SOLENOID_ON_DURATION;
				PQAdd(q, item);
     9ca:	80 91 56 01 	lds	r24, 0x0156
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	8c 01       	movw	r16, r24
     9d2:	0e 5c       	subi	r16, 0xCE	; 206
     9d4:	1f 4f       	sbci	r17, 0xFF	; 255
     9d6:	ee 24       	eor	r14, r14
     9d8:	ff 24       	eor	r15, r15
     9da:	ec 1a       	sub	r14, r28
     9dc:	fd 0a       	sbc	r15, r29
     9de:	80 91 57 01 	lds	r24, 0x0157
     9e2:	90 91 58 01 	lds	r25, 0x0158
     9e6:	b8 01       	movw	r22, r16
     9e8:	a7 01       	movw	r20, r14
     9ea:	6d d5       	rcall	.+2778   	; 0x14c6 <PQAdd>
     9ec:	32 c0       	rjmp	.+100    	; 0xa52 <__vector_21+0x168>
			} else {
				if (item.key >= -8) {
     9ee:	4f ef       	ldi	r20, 0xFF	; 255
     9f0:	c8 3f       	cpi	r28, 0xF8	; 248
     9f2:	d4 07       	cpc	r29, r20
     9f4:	6c f0       	brlt	.+26     	; 0xa10 <__vector_21+0x126>
					PORTD &= ~(1 << (-1-item.key));
     9f6:	2b b1       	in	r18, 0x0b	; 11
     9f8:	c0 95       	com	r28
     9fa:	d0 95       	com	r29
     9fc:	c6 01       	movw	r24, r12
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <__vector_21+0x11a>
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	ca 95       	dec	r28
     a06:	e2 f7       	brpl	.-8      	; 0xa00 <__vector_21+0x116>
     a08:	80 95       	com	r24
     a0a:	82 23       	and	r24, r18
     a0c:	8b b9       	out	0x0b, r24	; 11
     a0e:	21 c0       	rjmp	.+66     	; 0xa52 <__vector_21+0x168>
				} else if (item.key >= -16) {
     a10:	5f ef       	ldi	r21, 0xFF	; 255
     a12:	c0 3f       	cpi	r28, 0xF0	; 240
     a14:	d5 07       	cpc	r29, r21
     a16:	7c f0       	brlt	.+30     	; 0xa36 <__vector_21+0x14c>
					PORTB &= ~(1 << (-9-item.key));
     a18:	25 b1       	in	r18, 0x05	; 5
     a1a:	c5 01       	movw	r24, r10
     a1c:	8c 1b       	sub	r24, r28
     a1e:	9d 0b       	sbc	r25, r29
     a20:	a6 01       	movw	r20, r12
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <__vector_21+0x13e>
     a24:	44 0f       	add	r20, r20
     a26:	55 1f       	adc	r21, r21
     a28:	8a 95       	dec	r24
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <__vector_21+0x13a>
     a2c:	ca 01       	movw	r24, r20
     a2e:	80 95       	com	r24
     a30:	82 23       	and	r24, r18
     a32:	85 b9       	out	0x05, r24	; 5
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <__vector_21+0x168>
				} else {
					PORTC &= ~(1 << (-13-item.key));
     a36:	28 b1       	in	r18, 0x08	; 8
     a38:	c4 01       	movw	r24, r8
     a3a:	8c 1b       	sub	r24, r28
     a3c:	9d 0b       	sbc	r25, r29
     a3e:	a6 01       	movw	r20, r12
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <__vector_21+0x15c>
     a42:	44 0f       	add	r20, r20
     a44:	55 1f       	adc	r21, r21
     a46:	8a 95       	dec	r24
     a48:	e2 f7       	brpl	.-8      	; 0xa42 <__vector_21+0x158>
     a4a:	ca 01       	movw	r24, r20
     a4c:	80 95       	com	r24
     a4e:	82 23       	and	r24, r18
     a50:	88 b9       	out	0x08, r24	; 8
				}
			}
			if (PQIsEmpty(q)) break;
     a52:	80 91 57 01 	lds	r24, 0x0157
     a56:	90 91 58 01 	lds	r25, 0x0158
     a5a:	b2 d4       	rcall	.+2404   	; 0x13c0 <PQIsEmpty>
     a5c:	88 23       	and	r24, r24
     a5e:	71 f4       	brne	.+28     	; 0xa7c <__vector_21+0x192>
			item = PQPeek(q);
     a60:	80 91 57 01 	lds	r24, 0x0157
     a64:	90 91 58 01 	lds	r25, 0x0158
     a68:	6a d4       	rcall	.+2260   	; 0x133e <PQPeek>
     a6a:	9c 01       	movw	r18, r24
     a6c:	eb 01       	movw	r28, r22
ISR (TIMER0_OVF_vect) {
	TCNT0 += TIMER_OFFSET; //1ms for 247 //every 2.5ms for 236
	ItemPQ item;
	if (!PQIsEmpty(q)) {
		item = PQPeek(q);
		while (item.value <= curr_time) {
     a6e:	80 91 56 01 	lds	r24, 0x0156
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	82 17       	cp	r24, r18
     a76:	93 07       	cpc	r25, r19
     a78:	0c f0       	brlt	.+2      	; 0xa7c <__vector_21+0x192>
     a7a:	72 cf       	rjmp	.-284    	; 0x960 <__vector_21+0x76>
			}
			if (PQIsEmpty(q)) break;
			item = PQPeek(q);
		}
	}
	curr_time += 1;
     a7c:	90 91 56 01 	lds	r25, 0x0156
     a80:	89 2f       	mov	r24, r25
     a82:	8f 5f       	subi	r24, 0xFF	; 255
     a84:	80 93 56 01 	sts	0x0156, r24
	if (curr_time >= MAX_TIMER_VAL) {
     a88:	8a 3f       	cpi	r24, 0xFA	; 250
     a8a:	50 f0       	brcs	.+20     	; 0xaa0 <__vector_21+0x1b6>
		curr_time -= MAX_TIMER_VAL;
     a8c:	99 5f       	subi	r25, 0xF9	; 249
     a8e:	90 93 56 01 	sts	0x0156, r25
		PQShiftPriority(q, MAX_TIMER_VAL);
     a92:	80 91 57 01 	lds	r24, 0x0157
     a96:	90 91 58 01 	lds	r25, 0x0158
     a9a:	6a ef       	ldi	r22, 0xFA	; 250
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	2f d4       	rcall	.+2142   	; 0x12fe <PQShiftPriority>
	}
}
     aa0:	ff 91       	pop	r31
     aa2:	ef 91       	pop	r30
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	bf 91       	pop	r27
     aaa:	af 91       	pop	r26
     aac:	9f 91       	pop	r25
     aae:	8f 91       	pop	r24
     ab0:	7f 91       	pop	r23
     ab2:	6f 91       	pop	r22
     ab4:	5f 91       	pop	r21
     ab6:	4f 91       	pop	r20
     ab8:	3f 91       	pop	r19
     aba:	2f 91       	pop	r18
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	cf 90       	pop	r12
     ac8:	bf 90       	pop	r11
     aca:	af 90       	pop	r10
     acc:	9f 90       	pop	r9
     ace:	8f 90       	pop	r8
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <Endpoint_Write_Control_Stream_LE>:
     ada:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     adc:	40 91 64 01 	lds	r20, 0x0164
     ae0:	50 91 65 01 	lds	r21, 0x0165
     ae4:	46 17       	cp	r20, r22
     ae6:	57 07       	cpc	r21, r23
     ae8:	18 f4       	brcc	.+6      	; 0xaf0 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     aea:	f9 01       	movw	r30, r18
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	3d c0       	rjmp	.+122    	; 0xb6a <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     af0:	61 15       	cp	r22, r1
     af2:	71 05       	cpc	r23, r1
     af4:	11 f0       	breq	.+4      	; 0xafa <Endpoint_Write_Control_Stream_LE+0x20>
     af6:	ab 01       	movw	r20, r22
     af8:	f8 cf       	rjmp	.-16     	; 0xaea <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     afa:	80 91 e8 00 	lds	r24, 0x00E8
     afe:	8e 77       	andi	r24, 0x7E	; 126
     b00:	80 93 e8 00 	sts	0x00E8, r24
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	f0 cf       	rjmp	.-32     	; 0xaea <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b0a:	80 91 5d 01 	lds	r24, 0x015D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b0e:	88 23       	and	r24, r24
     b10:	09 f4       	brne	.+2      	; 0xb14 <Endpoint_Write_Control_Stream_LE+0x3a>
     b12:	41 c0       	rjmp	.+130    	; 0xb96 <Endpoint_Write_Control_Stream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b14:	85 30       	cpi	r24, 0x05	; 5
     b16:	09 f4       	brne	.+2      	; 0xb1a <Endpoint_Write_Control_Stream_LE+0x40>
     b18:	40 c0       	rjmp	.+128    	; 0xb9a <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b1a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     b1e:	83 fd       	sbrc	r24, 3
     b20:	3e c0       	rjmp	.+124    	; 0xb9e <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b22:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     b26:	82 fd       	sbrc	r24, 2
     b28:	30 c0       	rjmp	.+96     	; 0xb8a <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b2a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     b2e:	80 ff       	sbrs	r24, 0
     b30:	1c c0       	rjmp	.+56     	; 0xb6a <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     b32:	80 91 f2 00 	lds	r24, 0x00F2
     b36:	28 2f       	mov	r18, r24
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	07 c0       	rjmp	.+14     	; 0xb4a <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     b3c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b3e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     b42:	41 50       	subi	r20, 0x01	; 1
     b44:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b4a:	41 15       	cp	r20, r1
     b4c:	51 05       	cpc	r21, r1
     b4e:	19 f0       	breq	.+6      	; 0xb56 <Endpoint_Write_Control_Stream_LE+0x7c>
     b50:	28 30       	cpi	r18, 0x08	; 8
     b52:	31 05       	cpc	r19, r1
     b54:	98 f3       	brcs	.-26     	; 0xb3c <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	28 30       	cpi	r18, 0x08	; 8
     b5a:	31 05       	cpc	r19, r1
     b5c:	09 f4       	brne	.+2      	; 0xb60 <Endpoint_Write_Control_Stream_LE+0x86>
     b5e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b60:	80 91 e8 00 	lds	r24, 0x00E8
     b64:	8e 77       	andi	r24, 0x7E	; 126
     b66:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     b6a:	41 15       	cp	r20, r1
     b6c:	51 05       	cpc	r21, r1
     b6e:	69 f6       	brne	.-102    	; 0xb0a <Endpoint_Write_Control_Stream_LE+0x30>
     b70:	99 23       	and	r25, r25
     b72:	59 f6       	brne	.-106    	; 0xb0a <Endpoint_Write_Control_Stream_LE+0x30>
     b74:	0a c0       	rjmp	.+20     	; 0xb8a <Endpoint_Write_Control_Stream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b76:	80 91 5d 01 	lds	r24, 0x015D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b7a:	88 23       	and	r24, r24
     b7c:	61 f0       	breq	.+24     	; 0xb96 <Endpoint_Write_Control_Stream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b7e:	85 30       	cpi	r24, 0x05	; 5
     b80:	61 f0       	breq	.+24     	; 0xb9a <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b82:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     b86:	83 fd       	sbrc	r24, 3
     b88:	0a c0       	rjmp	.+20     	; 0xb9e <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b8a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     b8e:	82 ff       	sbrs	r24, 2
     b90:	f2 cf       	rjmp	.-28     	; 0xb76 <Endpoint_Write_Control_Stream_LE+0x9c>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	08 95       	ret
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	08 95       	ret
     b9a:	83 e0       	ldi	r24, 0x03	; 3
     b9c:	08 95       	ret
     b9e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     ba0:	08 95       	ret

00000ba2 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     ba2:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     ba4:	61 15       	cp	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	29 f4       	brne	.+10     	; 0xbb4 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     baa:	80 91 e8 00 	lds	r24, 0x00E8
     bae:	8b 77       	andi	r24, 0x7B	; 123
     bb0:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     bb4:	f9 01       	movw	r30, r18
     bb6:	20 c0       	rjmp	.+64     	; 0xbf8 <Endpoint_Read_Control_Stream_LE+0x56>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     bb8:	80 91 5d 01 	lds	r24, 0x015D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     bbc:	88 23       	and	r24, r24
     bbe:	61 f1       	breq	.+88     	; 0xc18 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     bc0:	85 30       	cpi	r24, 0x05	; 5
     bc2:	61 f1       	breq	.+88     	; 0xc1c <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bc4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     bc8:	83 ff       	sbrs	r24, 3
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <Endpoint_Read_Control_Stream_LE+0x2e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bd0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     bd4:	82 ff       	sbrs	r24, 2
     bd6:	f0 cf       	rjmp	.-32     	; 0xbb8 <Endpoint_Read_Control_Stream_LE+0x16>
     bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     bda:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     bde:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     be0:	61 50       	subi	r22, 0x01	; 1
     be2:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     be4:	21 f0       	breq	.+8      	; 0xbee <Endpoint_Read_Control_Stream_LE+0x4c>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     be6:	80 91 f2 00 	lds	r24, 0x00F2
     bea:	88 23       	and	r24, r24
     bec:	b1 f7       	brne	.-20     	; 0xbda <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bee:	80 91 e8 00 	lds	r24, 0x00E8
     bf2:	8b 77       	andi	r24, 0x7B	; 123
     bf4:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     bf8:	61 15       	cp	r22, r1
     bfa:	71 05       	cpc	r23, r1
     bfc:	e9 f6       	brne	.-70     	; 0xbb8 <Endpoint_Read_Control_Stream_LE+0x16>
     bfe:	06 c0       	rjmp	.+12     	; 0xc0c <Endpoint_Read_Control_Stream_LE+0x6a>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c00:	80 91 5d 01 	lds	r24, 0x015D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c04:	88 23       	and	r24, r24
     c06:	41 f0       	breq	.+16     	; 0xc18 <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c08:	85 30       	cpi	r24, 0x05	; 5
     c0a:	41 f0       	breq	.+16     	; 0xc1c <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c0c:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     c10:	80 ff       	sbrs	r24, 0
     c12:	f6 cf       	rjmp	.-20     	; 0xc00 <Endpoint_Read_Control_Stream_LE+0x5e>
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	08 95       	ret
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	08 95       	ret
     c1c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     c1e:	08 95       	ret

00000c20 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     c20:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     c22:	40 91 64 01 	lds	r20, 0x0164
     c26:	50 91 65 01 	lds	r21, 0x0165
     c2a:	46 17       	cp	r20, r22
     c2c:	57 07       	cpc	r21, r23
     c2e:	18 f4       	brcc	.+6      	; 0xc36 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c30:	f9 01       	movw	r30, r18
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	3e c0       	rjmp	.+124    	; 0xcb2 <Endpoint_Write_Control_PStream_LE+0x92>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     c36:	61 15       	cp	r22, r1
     c38:	71 05       	cpc	r23, r1
     c3a:	11 f0       	breq	.+4      	; 0xc40 <Endpoint_Write_Control_PStream_LE+0x20>
     c3c:	ab 01       	movw	r20, r22
     c3e:	f8 cf       	rjmp	.-16     	; 0xc30 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c40:	80 91 e8 00 	lds	r24, 0x00E8
     c44:	8e 77       	andi	r24, 0x7E	; 126
     c46:	80 93 e8 00 	sts	0x00E8, r24
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	f0 cf       	rjmp	.-32     	; 0xc30 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c50:	80 91 5d 01 	lds	r24, 0x015D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c54:	88 23       	and	r24, r24
     c56:	09 f4       	brne	.+2      	; 0xc5a <Endpoint_Write_Control_PStream_LE+0x3a>
     c58:	42 c0       	rjmp	.+132    	; 0xcde <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c5a:	85 30       	cpi	r24, 0x05	; 5
     c5c:	09 f4       	brne	.+2      	; 0xc60 <Endpoint_Write_Control_PStream_LE+0x40>
     c5e:	41 c0       	rjmp	.+130    	; 0xce2 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c60:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     c64:	83 fd       	sbrc	r24, 3
     c66:	3f c0       	rjmp	.+126    	; 0xce6 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c68:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     c6c:	82 fd       	sbrc	r24, 2
     c6e:	31 c0       	rjmp	.+98     	; 0xcd2 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c70:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     c74:	80 ff       	sbrs	r24, 0
     c76:	1d c0       	rjmp	.+58     	; 0xcb2 <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     c78:	80 91 f2 00 	lds	r24, 0x00F2
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	08 c0       	rjmp	.+16     	; 0xc92 <Endpoint_Write_Control_PStream_LE+0x72>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c82:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c84:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     c88:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     c8a:	41 50       	subi	r20, 0x01	; 1
     c8c:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     c8e:	2f 5f       	subi	r18, 0xFF	; 255
     c90:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     c92:	41 15       	cp	r20, r1
     c94:	51 05       	cpc	r21, r1
     c96:	19 f0       	breq	.+6      	; 0xc9e <Endpoint_Write_Control_PStream_LE+0x7e>
     c98:	28 30       	cpi	r18, 0x08	; 8
     c9a:	31 05       	cpc	r19, r1
     c9c:	90 f3       	brcs	.-28     	; 0xc82 <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	28 30       	cpi	r18, 0x08	; 8
     ca2:	31 05       	cpc	r19, r1
     ca4:	09 f4       	brne	.+2      	; 0xca8 <Endpoint_Write_Control_PStream_LE+0x88>
     ca6:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ca8:	80 91 e8 00 	lds	r24, 0x00E8
     cac:	8e 77       	andi	r24, 0x7E	; 126
     cae:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     cb2:	41 15       	cp	r20, r1
     cb4:	51 05       	cpc	r21, r1
     cb6:	61 f6       	brne	.-104    	; 0xc50 <Endpoint_Write_Control_PStream_LE+0x30>
     cb8:	99 23       	and	r25, r25
     cba:	51 f6       	brne	.-108    	; 0xc50 <Endpoint_Write_Control_PStream_LE+0x30>
     cbc:	0a c0       	rjmp	.+20     	; 0xcd2 <Endpoint_Write_Control_PStream_LE+0xb2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     cbe:	80 91 5d 01 	lds	r24, 0x015D

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     cc2:	88 23       	and	r24, r24
     cc4:	61 f0       	breq	.+24     	; 0xcde <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     cc6:	85 30       	cpi	r24, 0x05	; 5
     cc8:	61 f0       	breq	.+24     	; 0xce2 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     cce:	83 fd       	sbrc	r24, 3
     cd0:	0a c0       	rjmp	.+20     	; 0xce6 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cd2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     cd6:	82 ff       	sbrs	r24, 2
     cd8:	f2 cf       	rjmp	.-28     	; 0xcbe <Endpoint_Write_Control_PStream_LE+0x9e>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	08 95       	ret
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	08 95       	ret
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	08 95       	ret
     ce6:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     ce8:	08 95       	ret

00000cea <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     cea:	38 2f       	mov	r19, r24
     cec:	28 2f       	mov	r18, r24
     cee:	2e c0       	rjmp	.+92     	; 0xd4c <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cf0:	82 2f       	mov	r24, r18
     cf2:	8f 70       	andi	r24, 0x0F	; 15
     cf4:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     cf8:	23 17       	cp	r18, r19
     cfa:	21 f4       	brne	.+8      	; 0xd04 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     cfc:	76 2f       	mov	r23, r22
     cfe:	94 2f       	mov	r25, r20
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	06 c0       	rjmp	.+12     	; 0xd10 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     d04:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     d08:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     d0c:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     d10:	91 ff       	sbrs	r25, 1
     d12:	1b c0       	rjmp	.+54     	; 0xd4a <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     d14:	80 91 eb 00 	lds	r24, 0x00EB
     d18:	8e 7f       	andi	r24, 0xFE	; 254
     d1a:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     d1e:	80 91 ed 00 	lds	r24, 0x00ED
     d22:	8d 7f       	andi	r24, 0xFD	; 253
     d24:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     d28:	80 91 eb 00 	lds	r24, 0x00EB
     d2c:	81 60       	ori	r24, 0x01	; 1
     d2e:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     d32:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     d36:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     d3a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     d3e:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
     d42:	87 fd       	sbrc	r24, 7
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <Endpoint_ConfigureEndpoint_Prv+0x60>
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     d4a:	2f 5f       	subi	r18, 0xFF	; 255
     d4c:	25 30       	cpi	r18, 0x05	; 5
     d4e:	80 f2       	brcs	.-96     	; 0xcf0 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d50:	3f 70       	andi	r19, 0x0F	; 15
     d52:	30 93 e9 00 	sts	0x00E9, r19
     d56:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     d58:	08 95       	ret

00000d5a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     d5a:	80 91 5e 01 	lds	r24, 0x015E
     d5e:	88 23       	and	r24, r24
     d60:	9c f4       	brge	.+38     	; 0xd88 <Endpoint_ClearStatusStage+0x2e>
     d62:	04 c0       	rjmp	.+8      	; 0xd6c <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d64:	80 91 5d 01 	lds	r24, 0x015D
     d68:	88 23       	and	r24, r24
     d6a:	b9 f0       	breq	.+46     	; 0xd9a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d6c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     d70:	82 ff       	sbrs	r24, 2
     d72:	f8 cf       	rjmp	.-16     	; 0xd64 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d74:	80 91 e8 00 	lds	r24, 0x00E8
     d78:	8b 77       	andi	r24, 0x7B	; 123
     d7a:	80 93 e8 00 	sts	0x00E8, r24
     d7e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d80:	80 91 5d 01 	lds	r24, 0x015D
     d84:	88 23       	and	r24, r24
     d86:	49 f0       	breq	.+18     	; 0xd9a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d88:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     d8c:	80 ff       	sbrs	r24, 0
     d8e:	f8 cf       	rjmp	.-16     	; 0xd80 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d90:	80 91 e8 00 	lds	r24, 0x00E8
     d94:	8e 77       	andi	r24, 0x7E	; 126
     d96:	80 93 e8 00 	sts	0x00E8, r24
     d9a:	08 95       	ret

00000d9c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     d9c:	40 d0       	rcall	.+128    	; 0xe1e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d9e:	42 d0       	rcall	.+132    	; 0xe24 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     da0:	80 91 d8 00 	lds	r24, 0x00D8
     da4:	8f 77       	andi	r24, 0x7F	; 127
     da6:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     daa:	80 91 d8 00 	lds	r24, 0x00D8
     dae:	80 68       	ori	r24, 0x80	; 128
     db0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     db4:	80 91 d8 00 	lds	r24, 0x00D8
     db8:	8f 7d       	andi	r24, 0xDF	; 223
     dba:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dbe:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     dc4:	09 b4       	in	r0, 0x29	; 41
     dc6:	00 fe       	sbrs	r0, 0
     dc8:	fd cf       	rjmp	.-6      	; 0xdc4 <USB_ResetInterface+0x28>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     dca:	10 92 5d 01 	sts	0x015D, r1
	USB_Device_ConfigurationNumber  = 0;
     dce:	10 92 59 01 	sts	0x0159, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     dd2:	10 92 5b 01 	sts	0x015B, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     dd6:	10 92 5a 01 	sts	0x015A, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	42 e0       	ldi	r20, 0x02	; 2
     de0:	84 df       	rcall	.-248    	; 0xcea <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     de2:	80 91 e1 00 	lds	r24, 0x00E1
     de6:	8e 7f       	andi	r24, 0xFE	; 254
     de8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     dec:	80 91 e2 00 	lds	r24, 0x00E2
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     df6:	80 91 e2 00 	lds	r24, 0x00E2
     dfa:	88 60       	ori	r24, 0x08	; 8
     dfc:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e00:	80 91 e0 00 	lds	r24, 0x00E0
     e04:	8e 7f       	andi	r24, 0xFE	; 254
     e06:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e0a:	08 95       	ret

00000e0c <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     e0c:	e3 e6       	ldi	r30, 0x63	; 99
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8e 7f       	andi	r24, 0xFE	; 254
     e14:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	80 93 5c 01 	sts	0x015C, r24

	USB_ResetInterface();
}
     e1c:	bf cf       	rjmp	.-130    	; 0xd9c <USB_ResetInterface>

00000e1e <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     e1e:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     e22:	08 95       	ret

00000e24 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     e24:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     e28:	08 95       	ret

00000e2a <__vector_12>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     e2a:	1f 92       	push	r1
     e2c:	0f 92       	push	r0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	1f 93       	push	r17
     e36:	2f 93       	push	r18
     e38:	3f 93       	push	r19
     e3a:	4f 93       	push	r20
     e3c:	5f 93       	push	r21
     e3e:	6f 93       	push	r22
     e40:	7f 93       	push	r23
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	af 93       	push	r26
     e48:	bf 93       	push	r27
     e4a:	ef 93       	push	r30
     e4c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e4e:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e52:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e56:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     e5a:	80 91 f0 00 	lds	r24, 0x00F0
     e5e:	87 7f       	andi	r24, 0xF7	; 247
     e60:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     e64:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     e66:	c4 d0       	rcall	.+392    	; 0xff0 <USB_Device_ProcessControlRequest>
     e68:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     e6c:	80 91 f0 00 	lds	r24, 0x00F0
     e70:	88 60       	ori	r24, 0x08	; 8
     e72:	80 93 f0 00 	sts	0x00F0, r24
     e76:	1f 70       	andi	r17, 0x0F	; 15
     e78:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     e7c:	ff 91       	pop	r31
     e7e:	ef 91       	pop	r30
     e80:	bf 91       	pop	r27
     e82:	af 91       	pop	r26
     e84:	9f 91       	pop	r25
     e86:	8f 91       	pop	r24
     e88:	7f 91       	pop	r23
     e8a:	6f 91       	pop	r22
     e8c:	5f 91       	pop	r21
     e8e:	4f 91       	pop	r20
     e90:	3f 91       	pop	r19
     e92:	2f 91       	pop	r18
     e94:	1f 91       	pop	r17
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <__vector_11>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	0f 92       	push	r0
     ea8:	11 24       	eor	r1, r1
     eaa:	2f 93       	push	r18
     eac:	3f 93       	push	r19
     eae:	4f 93       	push	r20
     eb0:	5f 93       	push	r21
     eb2:	6f 93       	push	r22
     eb4:	7f 93       	push	r23
     eb6:	8f 93       	push	r24
     eb8:	9f 93       	push	r25
     eba:	af 93       	push	r26
     ebc:	bf 93       	push	r27
     ebe:	ef 93       	push	r30
     ec0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     ec2:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     ec6:	82 ff       	sbrs	r24, 2
     ec8:	0a c0       	rjmp	.+20     	; 0xede <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     eca:	80 91 e2 00 	lds	r24, 0x00E2
     ece:	82 ff       	sbrs	r24, 2
     ed0:	06 c0       	rjmp	.+12     	; 0xede <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     ed2:	80 91 e1 00 	lds	r24, 0x00E1
     ed6:	8b 7f       	andi	r24, 0xFB	; 251
     ed8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     edc:	fa d1       	rcall	.+1012   	; 0x12d2 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     ede:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     ee2:	80 ff       	sbrs	r24, 0
     ee4:	17 c0       	rjmp	.+46     	; 0xf14 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     ee6:	80 91 e2 00 	lds	r24, 0x00E2
     eea:	80 ff       	sbrs	r24, 0
     eec:	13 c0       	rjmp	.+38     	; 0xf14 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     eee:	80 91 e2 00 	lds	r24, 0x00E2
     ef2:	8e 7f       	andi	r24, 0xFE	; 254
     ef4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ef8:	80 91 e2 00 	lds	r24, 0x00E2
     efc:	80 61       	ori	r24, 0x10	; 16
     efe:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     f02:	80 91 d8 00 	lds	r24, 0x00D8
     f06:	80 62       	ori	r24, 0x20	; 32
     f08:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f0c:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     f0e:	10 92 5d 01 	sts	0x015D, r1
		EVENT_USB_Device_Disconnect();
     f12:	df d1       	rcall	.+958    	; 0x12d2 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     f14:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     f18:	84 ff       	sbrs	r24, 4
     f1a:	2e c0       	rjmp	.+92     	; 0xf78 <__vector_11+0xd8>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     f1c:	80 91 e2 00 	lds	r24, 0x00E2
     f20:	84 ff       	sbrs	r24, 4
     f22:	2a c0       	rjmp	.+84     	; 0xf78 <__vector_11+0xd8>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f24:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f2a:	09 b4       	in	r0, 0x29	; 41
     f2c:	00 fe       	sbrs	r0, 0
     f2e:	fd cf       	rjmp	.-6      	; 0xf2a <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     f30:	80 91 d8 00 	lds	r24, 0x00D8
     f34:	8f 7d       	andi	r24, 0xDF	; 223
     f36:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     f3a:	80 91 e1 00 	lds	r24, 0x00E1
     f3e:	8f 7e       	andi	r24, 0xEF	; 239
     f40:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     f44:	80 91 e2 00 	lds	r24, 0x00E2
     f48:	8f 7e       	andi	r24, 0xEF	; 239
     f4a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f4e:	80 91 e2 00 	lds	r24, 0x00E2
     f52:	81 60       	ori	r24, 0x01	; 1
     f54:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     f58:	80 91 59 01 	lds	r24, 0x0159
     f5c:	88 23       	and	r24, r24
     f5e:	11 f0       	breq	.+4      	; 0xf64 <__vector_11+0xc4>
		  USB_DeviceState = DEVICE_STATE_Configured;
     f60:	84 e0       	ldi	r24, 0x04	; 4
     f62:	07 c0       	rjmp	.+14     	; 0xf72 <__vector_11+0xd2>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f64:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     f68:	87 fd       	sbrc	r24, 7
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <__vector_11+0xd0>
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <__vector_11+0xd2>
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	80 93 5d 01 	sts	0x015D, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     f76:	ad d1       	rcall	.+858    	; 0x12d2 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     f78:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     f7c:	83 ff       	sbrs	r24, 3
     f7e:	27 c0       	rjmp	.+78     	; 0xfce <__vector_11+0x12e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     f80:	80 91 e2 00 	lds	r24, 0x00E2
     f84:	83 ff       	sbrs	r24, 3
     f86:	23 c0       	rjmp	.+70     	; 0xfce <__vector_11+0x12e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     f88:	80 91 e1 00 	lds	r24, 0x00E1
     f8c:	87 7f       	andi	r24, 0xF7	; 247
     f8e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	80 93 5d 01 	sts	0x015D, r24
		USB_Device_ConfigurationNumber = 0;
     f98:	10 92 59 01 	sts	0x0159, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     f9c:	80 91 e1 00 	lds	r24, 0x00E1
     fa0:	8e 7f       	andi	r24, 0xFE	; 254
     fa2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     fa6:	80 91 e2 00 	lds	r24, 0x00E2
     faa:	8e 7f       	andi	r24, 0xFE	; 254
     fac:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     fb0:	80 91 e2 00 	lds	r24, 0x00E2
     fb4:	80 61       	ori	r24, 0x10	; 16
     fb6:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	42 e0       	ldi	r20, 0x02	; 2
     fc0:	94 de       	rcall	.-728    	; 0xcea <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     fc2:	80 91 f0 00 	lds	r24, 0x00F0
     fc6:	88 60       	ori	r24, 0x08	; 8
     fc8:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     fcc:	82 d1       	rcall	.+772    	; 0x12d2 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     fce:	ff 91       	pop	r31
     fd0:	ef 91       	pop	r30
     fd2:	bf 91       	pop	r27
     fd4:	af 91       	pop	r26
     fd6:	9f 91       	pop	r25
     fd8:	8f 91       	pop	r24
     fda:	7f 91       	pop	r23
     fdc:	6f 91       	pop	r22
     fde:	5f 91       	pop	r21
     fe0:	4f 91       	pop	r20
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     ff0:	1f 93       	push	r17
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	ac 97       	sbiw	r28, 0x2c	; 44
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	ee e5       	ldi	r30, 0x5E	; 94
    1008:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    100a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    100e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1010:	21 e0       	ldi	r18, 0x01	; 1
    1012:	e6 36       	cpi	r30, 0x66	; 102
    1014:	f2 07       	cpc	r31, r18
    1016:	c9 f7       	brne	.-14     	; 0x100a <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1018:	bd d8       	rcall	.-3718   	; 0x194 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    101a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    101e:	83 ff       	sbrs	r24, 3
    1020:	40 c1       	rjmp	.+640    	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1022:	80 91 5e 01 	lds	r24, 0x015E

		switch (USB_ControlRequest.bRequest)
    1026:	30 91 5f 01 	lds	r19, 0x015F
    102a:	35 30       	cpi	r19, 0x05	; 5
    102c:	09 f4       	brne	.+2      	; 0x1030 <USB_Device_ProcessControlRequest+0x40>
    102e:	8d c0       	rjmp	.+282    	; 0x114a <USB_Device_ProcessControlRequest+0x15a>
    1030:	36 30       	cpi	r19, 0x06	; 6
    1032:	40 f4       	brcc	.+16     	; 0x1044 <USB_Device_ProcessControlRequest+0x54>
    1034:	31 30       	cpi	r19, 0x01	; 1
    1036:	e1 f1       	breq	.+120    	; 0x10b0 <USB_Device_ProcessControlRequest+0xc0>
    1038:	31 30       	cpi	r19, 0x01	; 1
    103a:	70 f0       	brcs	.+28     	; 0x1058 <USB_Device_ProcessControlRequest+0x68>
    103c:	33 30       	cpi	r19, 0x03	; 3
    103e:	09 f0       	breq	.+2      	; 0x1042 <USB_Device_ProcessControlRequest+0x52>
    1040:	30 c1       	rjmp	.+608    	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
    1042:	36 c0       	rjmp	.+108    	; 0x10b0 <USB_Device_ProcessControlRequest+0xc0>
    1044:	38 30       	cpi	r19, 0x08	; 8
    1046:	09 f4       	brne	.+2      	; 0x104a <USB_Device_ProcessControlRequest+0x5a>
    1048:	fe c0       	rjmp	.+508    	; 0x1246 <USB_Device_ProcessControlRequest+0x256>
    104a:	39 30       	cpi	r19, 0x09	; 9
    104c:	09 f4       	brne	.+2      	; 0x1050 <USB_Device_ProcessControlRequest+0x60>
    104e:	0d c1       	rjmp	.+538    	; 0x126a <USB_Device_ProcessControlRequest+0x27a>
    1050:	36 30       	cpi	r19, 0x06	; 6
    1052:	09 f0       	breq	.+2      	; 0x1056 <USB_Device_ProcessControlRequest+0x66>
    1054:	26 c1       	rjmp	.+588    	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
    1056:	9c c0       	rjmp	.+312    	; 0x1190 <USB_Device_ProcessControlRequest+0x1a0>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1058:	80 38       	cpi	r24, 0x80	; 128
    105a:	21 f0       	breq	.+8      	; 0x1064 <USB_Device_ProcessControlRequest+0x74>
    105c:	82 38       	cpi	r24, 0x82	; 130
    105e:	09 f0       	breq	.+2      	; 0x1062 <USB_Device_ProcessControlRequest+0x72>
    1060:	20 c1       	rjmp	.+576    	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
    1062:	08 c0       	rjmp	.+16     	; 0x1074 <USB_Device_ProcessControlRequest+0x84>
    1064:	90 91 5a 01 	lds	r25, 0x015A
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1068:	80 91 5b 01 	lds	r24, 0x015B
    106c:	88 23       	and	r24, r24
    106e:	b1 f0       	breq	.+44     	; 0x109c <USB_Device_ProcessControlRequest+0xac>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1070:	92 60       	ori	r25, 0x02	; 2
    1072:	14 c0       	rjmp	.+40     	; 0x109c <USB_Device_ProcessControlRequest+0xac>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1074:	80 91 62 01 	lds	r24, 0x0162
    1078:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    107a:	85 30       	cpi	r24, 0x05	; 5
    107c:	08 f0       	brcs	.+2      	; 0x1080 <USB_Device_ProcessControlRequest+0x90>
    107e:	11 c1       	rjmp	.+546    	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1080:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1084:	80 91 eb 00 	lds	r24, 0x00EB
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	25 e0       	ldi	r18, 0x05	; 5
    108c:	96 95       	lsr	r25
    108e:	87 95       	ror	r24
    1090:	2a 95       	dec	r18
    1092:	e1 f7       	brne	.-8      	; 0x108c <USB_Device_ProcessControlRequest+0x9c>
    1094:	98 2f       	mov	r25, r24
    1096:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1098:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    109c:	80 91 e8 00 	lds	r24, 0x00E8
    10a0:	87 7f       	andi	r24, 0xF7	; 247
    10a2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    10a6:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    10aa:	10 92 f1 00 	sts	0x00F1, r1
    10ae:	d6 c0       	rjmp	.+428    	; 0x125c <USB_Device_ProcessControlRequest+0x26c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    10b0:	88 23       	and	r24, r24
    10b2:	19 f0       	breq	.+6      	; 0x10ba <USB_Device_ProcessControlRequest+0xca>
    10b4:	82 30       	cpi	r24, 0x02	; 2
    10b6:	09 f0       	breq	.+2      	; 0x10ba <USB_Device_ProcessControlRequest+0xca>
    10b8:	f4 c0       	rjmp	.+488    	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	8f 71       	andi	r24, 0x1F	; 31
    10be:	90 70       	andi	r25, 0x00	; 0
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	21 f0       	breq	.+8      	; 0x10cc <USB_Device_ProcessControlRequest+0xdc>
    10c4:	02 97       	sbiw	r24, 0x02	; 2
    10c6:	09 f0       	breq	.+2      	; 0x10ca <USB_Device_ProcessControlRequest+0xda>
    10c8:	ec c0       	rjmp	.+472    	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
    10ca:	0c c0       	rjmp	.+24     	; 0x10e4 <USB_Device_ProcessControlRequest+0xf4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    10cc:	80 91 60 01 	lds	r24, 0x0160
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <USB_Device_ProcessControlRequest+0xe6>
    10d4:	e6 c0       	rjmp	.+460    	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    10d6:	10 92 5b 01 	sts	0x015B, r1
    10da:	33 30       	cpi	r19, 0x03	; 3
    10dc:	81 f5       	brne	.+96     	; 0x113e <USB_Device_ProcessControlRequest+0x14e>
    10de:	80 93 5b 01 	sts	0x015B, r24
    10e2:	2d c0       	rjmp	.+90     	; 0x113e <USB_Device_ProcessControlRequest+0x14e>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    10e4:	80 91 60 01 	lds	r24, 0x0160
    10e8:	88 23       	and	r24, r24
    10ea:	49 f5       	brne	.+82     	; 0x113e <USB_Device_ProcessControlRequest+0x14e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    10ec:	20 91 62 01 	lds	r18, 0x0162
    10f0:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    10f2:	82 2f       	mov	r24, r18
    10f4:	81 50       	subi	r24, 0x01	; 1
    10f6:	84 30       	cpi	r24, 0x04	; 4
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <USB_Device_ProcessControlRequest+0x10c>
    10fa:	d3 c0       	rjmp	.+422    	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10fc:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1100:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1104:	80 ff       	sbrs	r24, 0
    1106:	1b c0       	rjmp	.+54     	; 0x113e <USB_Device_ProcessControlRequest+0x14e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1108:	33 30       	cpi	r19, 0x03	; 3
    110a:	21 f4       	brne	.+8      	; 0x1114 <USB_Device_ProcessControlRequest+0x124>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    110c:	80 91 eb 00 	lds	r24, 0x00EB
    1110:	80 62       	ori	r24, 0x20	; 32
    1112:	13 c0       	rjmp	.+38     	; 0x113a <USB_Device_ProcessControlRequest+0x14a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1114:	80 91 eb 00 	lds	r24, 0x00EB
    1118:	80 61       	ori	r24, 0x10	; 16
    111a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <USB_Device_ProcessControlRequest+0x138>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	2a 95       	dec	r18
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <USB_Device_ProcessControlRequest+0x134>
    112c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1130:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1134:	80 91 eb 00 	lds	r24, 0x00EB
    1138:	88 60       	ori	r24, 0x08	; 8
    113a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    113e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1142:	80 91 e8 00 	lds	r24, 0x00E8
    1146:	87 7f       	andi	r24, 0xF7	; 247
    1148:	8c c0       	rjmp	.+280    	; 0x1262 <USB_Device_ProcessControlRequest+0x272>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    114a:	88 23       	and	r24, r24
    114c:	09 f0       	breq	.+2      	; 0x1150 <USB_Device_ProcessControlRequest+0x160>
    114e:	a9 c0       	rjmp	.+338    	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1150:	10 91 60 01 	lds	r17, 0x0160
    1154:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1156:	80 91 e3 00 	lds	r24, 0x00E3
    115a:	80 78       	andi	r24, 0x80	; 128
    115c:	81 2b       	or	r24, r17
    115e:	80 93 e3 00 	sts	0x00E3, r24
    1162:	80 91 e8 00 	lds	r24, 0x00E8
    1166:	87 7f       	andi	r24, 0xF7	; 247
    1168:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    116c:	f6 dd       	rcall	.-1044   	; 0xd5a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    116e:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1172:	80 ff       	sbrs	r24, 0
    1174:	fc cf       	rjmp	.-8      	; 0x116e <USB_Device_ProcessControlRequest+0x17e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1176:	80 91 e3 00 	lds	r24, 0x00E3
    117a:	80 68       	ori	r24, 0x80	; 128
    117c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1180:	11 23       	and	r17, r17
    1182:	11 f4       	brne	.+4      	; 0x1188 <USB_Device_ProcessControlRequest+0x198>
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	01 c0       	rjmp	.+2      	; 0x118a <USB_Device_ProcessControlRequest+0x19a>
    1188:	83 e0       	ldi	r24, 0x03	; 3
    118a:	80 93 5d 01 	sts	0x015D, r24
    118e:	89 c0       	rjmp	.+274    	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1190:	80 58       	subi	r24, 0x80	; 128
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	08 f0       	brcs	.+2      	; 0x1198 <USB_Device_ProcessControlRequest+0x1a8>
    1196:	85 c0       	rjmp	.+266    	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1198:	80 91 60 01 	lds	r24, 0x0160
    119c:	90 91 61 01 	lds	r25, 0x0161
    11a0:	23 e0       	ldi	r18, 0x03	; 3
    11a2:	8c 3d       	cpi	r24, 0xDC	; 220
    11a4:	92 07       	cpc	r25, r18
    11a6:	09 f0       	breq	.+2      	; 0x11aa <USB_Device_ProcessControlRequest+0x1ba>
    11a8:	33 c0       	rjmp	.+102    	; 0x1210 <USB_Device_ProcessControlRequest+0x220>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    11aa:	83 e0       	ldi	r24, 0x03	; 3
    11ac:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    11ae:	8a e2       	ldi	r24, 0x2A	; 42
    11b0:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    11b2:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    11b4:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    11b6:	de 01       	movw	r26, r28
    11b8:	15 96       	adiw	r26, 0x05	; 5
    11ba:	6e e0       	ldi	r22, 0x0E	; 14
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    11c0:	11 e2       	ldi	r17, 0x21	; 33
    11c2:	e6 2f       	mov	r30, r22
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	10 93 57 00 	sts	0x0057, r17
    11ca:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    11cc:	40 ff       	sbrs	r20, 0
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <USB_Device_ProcessControlRequest+0x1e6>
					{
						SerialByte >>= 4;
    11d0:	82 95       	swap	r24
    11d2:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    11d4:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    11d6:	8f 70       	andi	r24, 0x0F	; 15
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    11dc:	8a 30       	cpi	r24, 0x0A	; 10
    11de:	18 f0       	brcs	.+6      	; 0x11e6 <USB_Device_ProcessControlRequest+0x1f6>
    11e0:	c9 01       	movw	r24, r18
    11e2:	c7 96       	adiw	r24, 0x37	; 55
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <USB_Device_ProcessControlRequest+0x1fa>
    11e6:	c9 01       	movw	r24, r18
    11e8:	c0 96       	adiw	r24, 0x30	; 48
    11ea:	8d 93       	st	X+, r24
    11ec:	9d 93       	st	X+, r25
    11ee:	4f 5f       	subi	r20, 0xFF	; 255
    11f0:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    11f2:	44 31       	cpi	r20, 0x14	; 20
    11f4:	51 05       	cpc	r21, r1
    11f6:	29 f7       	brne	.-54     	; 0x11c2 <USB_Device_ProcessControlRequest+0x1d2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    11f8:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11fa:	80 91 e8 00 	lds	r24, 0x00E8
    11fe:	87 7f       	andi	r24, 0xF7	; 247
    1200:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1204:	ce 01       	movw	r24, r28
    1206:	03 96       	adiw	r24, 0x03	; 3
    1208:	6a e2       	ldi	r22, 0x2A	; 42
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	66 dc       	rcall	.-1844   	; 0xada <Endpoint_Write_Control_Stream_LE>
    120e:	15 c0       	rjmp	.+42     	; 0x123a <USB_Device_ProcessControlRequest+0x24a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1210:	60 91 62 01 	lds	r22, 0x0162
    1214:	70 91 63 01 	lds	r23, 0x0163
    1218:	ae 01       	movw	r20, r28
    121a:	4f 5f       	subi	r20, 0xFF	; 255
    121c:	5f 4f       	sbci	r21, 0xFF	; 255
    121e:	0e 94 9c 00 	call	0x138	; 0x138 <CALLBACK_USB_GetDescriptor>
    1222:	bc 01       	movw	r22, r24
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	09 f4       	brne	.+2      	; 0x122a <USB_Device_ProcessControlRequest+0x23a>
    1228:	3c c0       	rjmp	.+120    	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
    122a:	80 91 e8 00 	lds	r24, 0x00E8
    122e:	87 7f       	andi	r24, 0xF7	; 247
    1230:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	f3 dc       	rcall	.-1562   	; 0xc20 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    123a:	80 91 e8 00 	lds	r24, 0x00E8
    123e:	8b 77       	andi	r24, 0x7B	; 123
    1240:	80 93 e8 00 	sts	0x00E8, r24
    1244:	2e c0       	rjmp	.+92     	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1246:	80 38       	cpi	r24, 0x80	; 128
    1248:	61 f5       	brne	.+88     	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    124a:	80 91 e8 00 	lds	r24, 0x00E8
    124e:	87 7f       	andi	r24, 0xF7	; 247
    1250:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1254:	80 91 59 01 	lds	r24, 0x0159
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1258:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    125c:	80 91 e8 00 	lds	r24, 0x00E8
    1260:	8e 77       	andi	r24, 0x7E	; 126
    1262:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1266:	79 dd       	rcall	.-1294   	; 0xd5a <Endpoint_ClearStatusStage>
    1268:	1c c0       	rjmp	.+56     	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    126a:	88 23       	and	r24, r24
    126c:	d1 f4       	brne	.+52     	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    126e:	90 91 60 01 	lds	r25, 0x0160
    1272:	92 30       	cpi	r25, 0x02	; 2
    1274:	b0 f4       	brcc	.+44     	; 0x12a2 <USB_Device_ProcessControlRequest+0x2b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1276:	80 91 e8 00 	lds	r24, 0x00E8
    127a:	87 7f       	andi	r24, 0xF7	; 247
    127c:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1280:	90 93 59 01 	sts	0x0159, r25

	Endpoint_ClearStatusStage();
    1284:	6a dd       	rcall	.-1324   	; 0xd5a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1286:	80 91 59 01 	lds	r24, 0x0159
    128a:	88 23       	and	r24, r24
    128c:	31 f4       	brne	.+12     	; 0x129a <USB_Device_ProcessControlRequest+0x2aa>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    128e:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1292:	87 fd       	sbrc	r24, 7
    1294:	02 c0       	rjmp	.+4      	; 0x129a <USB_Device_ProcessControlRequest+0x2aa>
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	01 c0       	rjmp	.+2      	; 0x129c <USB_Device_ProcessControlRequest+0x2ac>
    129a:	84 e0       	ldi	r24, 0x04	; 4
    129c:	80 93 5d 01 	sts	0x015D, r24

	EVENT_USB_Device_ConfigurationChanged();
    12a0:	cb da       	rcall	.-2666   	; 0x838 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12a2:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    12a6:	83 ff       	sbrs	r24, 3
    12a8:	0a c0       	rjmp	.+20     	; 0x12be <USB_Device_ProcessControlRequest+0x2ce>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12aa:	80 91 e8 00 	lds	r24, 0x00E8
    12ae:	87 7f       	andi	r24, 0xF7	; 247
    12b0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    12b4:	80 91 eb 00 	lds	r24, 0x00EB
    12b8:	80 62       	ori	r24, 0x20	; 32
    12ba:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    12be:	ac 96       	adiw	r28, 0x2c	; 44
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	1f 91       	pop	r17
    12d0:	08 95       	ret

000012d2 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    12d2:	08 95       	ret

000012d4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12d4:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    12d6:	80 91 5d 01 	lds	r24, 0x015D
    12da:	88 23       	and	r24, r24
    12dc:	71 f0       	breq	.+28     	; 0x12fa <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    12de:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    12e2:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12e6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12ea:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    12ee:	83 ff       	sbrs	r24, 3
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
    12f2:	7e de       	rcall	.-772    	; 0xff0 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12f4:	1f 70       	andi	r17, 0x0F	; 15
    12f6:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    12fa:	1f 91       	pop	r17
    12fc:	08 95       	ret

000012fe <PQShiftPriority>:
	ItemPQ element = pq->items[chosenIndex];
	
	return element;
}

void PQShiftPriority(PQ pq, int k) {
    12fe:	dc 01       	movw	r26, r24
	assert(pq != NULL);
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	29 f0       	breq	.+10     	; 0x130e <PQShiftPriority+0x10>
    1304:	40 e0       	ldi	r20, 0x00	; 0
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	10 c0       	rjmp	.+32     	; 0x132e <PQShiftPriority+0x30>
    130e:	a2 d4       	rcall	.+2372   	; 0x1c54 <abort>
	for (int i = 0; i < pq->numItems; i++) {
		pq->items[i].value -= k;
    1310:	ed 91       	ld	r30, X+
    1312:	fc 91       	ld	r31, X
    1314:	11 97       	sbiw	r26, 0x01	; 1
    1316:	e2 0f       	add	r30, r18
    1318:	f3 1f       	adc	r31, r19
    131a:	82 81       	ldd	r24, Z+2	; 0x02
    131c:	93 81       	ldd	r25, Z+3	; 0x03
    131e:	86 1b       	sub	r24, r22
    1320:	97 0b       	sbc	r25, r23
    1322:	93 83       	std	Z+3, r25	; 0x03
    1324:	82 83       	std	Z+2, r24	; 0x02
	return element;
}

void PQShiftPriority(PQ pq, int k) {
	assert(pq != NULL);
	for (int i = 0; i < pq->numItems; i++) {
    1326:	4f 5f       	subi	r20, 0xFF	; 255
    1328:	5f 4f       	sbci	r21, 0xFF	; 255
    132a:	2c 5f       	subi	r18, 0xFC	; 252
    132c:	3f 4f       	sbci	r19, 0xFF	; 255
    132e:	12 96       	adiw	r26, 0x02	; 2
    1330:	8d 91       	ld	r24, X+
    1332:	9c 91       	ld	r25, X
    1334:	13 97       	sbiw	r26, 0x03	; 3
    1336:	48 17       	cp	r20, r24
    1338:	59 07       	cpc	r21, r25
    133a:	54 f3       	brlt	.-44     	; 0x1310 <PQShiftPriority+0x12>
		pq->items[i].value -= k;
	}
}
    133c:	08 95       	ret

0000133e <PQPeek>:
	free(pq);
}


//Jonah Meggs
ItemPQ PQPeek(PQ pq) {
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	ec 01       	movw	r28, r24
	assert(pq != NULL);
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	61 f0       	breq	.+24     	; 0x1368 <PQPeek+0x2a>
	assert(pq->numItems > 0);
    1350:	ea 80       	ldd	r14, Y+2	; 0x02
    1352:	fb 80       	ldd	r15, Y+3	; 0x03
    1354:	1e 14       	cp	r1, r14
    1356:	1f 04       	cpc	r1, r15
    1358:	3c f4       	brge	.+14     	; 0x1368 <PQPeek+0x2a>
    135a:	00 e0       	ldi	r16, 0x00	; 0
    135c:	10 e0       	ldi	r17, 0x00	; 0
    135e:	41 e0       	ldi	r20, 0x01	; 1
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	64 e0       	ldi	r22, 0x04	; 4
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <PQPeek+0x52>
    1368:	75 d4       	rcall	.+2282   	; 0x1c54 <abort>
	
	// Find earliest element with smallest value (highest priority)
	int chosenIndex = 0;
	for (int i = 1; i < pq->numItems; i++) {
		if (pq->items[i].value < pq->items[chosenIndex].value) {
    136a:	fd 01       	movw	r30, r26
    136c:	e6 0f       	add	r30, r22
    136e:	f7 1f       	adc	r31, r23
    1370:	a8 0f       	add	r26, r24
    1372:	b9 1f       	adc	r27, r25
    1374:	22 81       	ldd	r18, Z+2	; 0x02
    1376:	33 81       	ldd	r19, Z+3	; 0x03
    1378:	12 96       	adiw	r26, 0x02	; 2
    137a:	8d 91       	ld	r24, X+
    137c:	9c 91       	ld	r25, X
    137e:	13 97       	sbiw	r26, 0x03	; 3
    1380:	28 17       	cp	r18, r24
    1382:	39 07       	cpc	r19, r25
    1384:	0c f4       	brge	.+2      	; 0x1388 <PQPeek+0x4a>
    1386:	8a 01       	movw	r16, r20
	assert(pq != NULL);
	assert(pq->numItems > 0);
	
	// Find earliest element with smallest value (highest priority)
	int chosenIndex = 0;
	for (int i = 1; i < pq->numItems; i++) {
    1388:	4f 5f       	subi	r20, 0xFF	; 255
    138a:	5f 4f       	sbci	r21, 0xFF	; 255
    138c:	6c 5f       	subi	r22, 0xFC	; 252
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	a8 81       	ld	r26, Y
    1392:	b9 81       	ldd	r27, Y+1	; 0x01
    1394:	c8 01       	movw	r24, r16
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	4e 15       	cp	r20, r14
    13a0:	5f 05       	cpc	r21, r15
    13a2:	1c f3       	brlt	.-58     	; 0x136a <PQPeek+0x2c>
		if (pq->items[i].value < pq->items[chosenIndex].value) {
			chosenIndex = i;
		}
	}
	
	ItemPQ element = pq->items[chosenIndex];
    13a4:	fd 01       	movw	r30, r26
    13a6:	e8 0f       	add	r30, r24
    13a8:	f9 1f       	adc	r31, r25
    13aa:	60 81       	ld	r22, Z
    13ac:	71 81       	ldd	r23, Z+1	; 0x01
	
	return element;
}
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	08 95       	ret

000013c0 <PQIsEmpty>:
			return;
		}
	}
}

bool PQIsEmpty(PQ pq) {
    13c0:	fc 01       	movw	r30, r24
	assert(pq != NULL);
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <PQIsEmpty+0x8>
    13c6:	46 d4       	rcall	.+2188   	; 0x1c54 <abort>
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	89 2b       	or	r24, r25
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <PQIsEmpty+0x14>
    13d2:	21 e0       	ldi	r18, 0x01	; 1
	
	return (pq->numItems == 0);
}
    13d4:	82 2f       	mov	r24, r18
    13d6:	08 95       	ret

000013d8 <PQDequeue>:
	// Add the new item to the end
	pq->items[pq->numItems] = item;
	pq->numItems++;
}

ItemPQ PQDequeue(PQ pq) {
    13d8:	cf 92       	push	r12
    13da:	df 92       	push	r13
    13dc:	ef 92       	push	r14
    13de:	ff 92       	push	r15
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	8c 01       	movw	r16, r24
	assert(pq != NULL);
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	79 f0       	breq	.+30     	; 0x140c <PQDequeue+0x34>
	assert(pq->numItems > 0);
    13ee:	dc 01       	movw	r26, r24
    13f0:	12 96       	adiw	r26, 0x02	; 2
    13f2:	ed 90       	ld	r14, X+
    13f4:	fc 90       	ld	r15, X
    13f6:	13 97       	sbiw	r26, 0x03	; 3
    13f8:	1e 14       	cp	r1, r14
    13fa:	1f 04       	cpc	r1, r15
    13fc:	3c f4       	brge	.+14     	; 0x140c <PQDequeue+0x34>
    13fe:	c0 e0       	ldi	r28, 0x00	; 0
    1400:	d0 e0       	ldi	r29, 0x00	; 0
    1402:	41 e0       	ldi	r20, 0x01	; 1
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	64 e0       	ldi	r22, 0x04	; 4
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	14 c0       	rjmp	.+40     	; 0x1434 <PQDequeue+0x5c>
    140c:	23 d4       	rcall	.+2118   	; 0x1c54 <abort>
	
	// Find earliest element with smallest value (highest priority)
	int chosenIndex = 0;
	for (int i = 1; i < pq->numItems; i++) {
		if (pq->items[i].value < pq->items[chosenIndex].value) {
    140e:	fd 01       	movw	r30, r26
    1410:	e6 0f       	add	r30, r22
    1412:	f7 1f       	adc	r31, r23
    1414:	a8 0f       	add	r26, r24
    1416:	b9 1f       	adc	r27, r25
    1418:	22 81       	ldd	r18, Z+2	; 0x02
    141a:	33 81       	ldd	r19, Z+3	; 0x03
    141c:	12 96       	adiw	r26, 0x02	; 2
    141e:	8d 91       	ld	r24, X+
    1420:	9c 91       	ld	r25, X
    1422:	13 97       	sbiw	r26, 0x03	; 3
    1424:	28 17       	cp	r18, r24
    1426:	39 07       	cpc	r19, r25
    1428:	0c f4       	brge	.+2      	; 0x142c <PQDequeue+0x54>
    142a:	ea 01       	movw	r28, r20
	assert(pq != NULL);
	assert(pq->numItems > 0);
	
	// Find earliest element with smallest value (highest priority)
	int chosenIndex = 0;
	for (int i = 1; i < pq->numItems; i++) {
    142c:	4f 5f       	subi	r20, 0xFF	; 255
    142e:	5f 4f       	sbci	r21, 0xFF	; 255
    1430:	6c 5f       	subi	r22, 0xFC	; 252
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	f8 01       	movw	r30, r16
    1436:	a0 81       	ld	r26, Z
    1438:	b1 81       	ldd	r27, Z+1	; 0x01
    143a:	ce 01       	movw	r24, r28
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	4e 15       	cp	r20, r14
    1446:	5f 05       	cpc	r21, r15
    1448:	14 f3       	brlt	.-60     	; 0x140e <PQDequeue+0x36>
		if (pq->items[i].value < pq->items[chosenIndex].value) {
			chosenIndex = i;
		}
	}
	
	ItemPQ element = pq->items[chosenIndex];
    144a:	bc 01       	movw	r22, r24
    144c:	fd 01       	movw	r30, r26
    144e:	e8 0f       	add	r30, r24
    1450:	f9 1f       	adc	r31, r25
    1452:	f0 80       	ld	r15, Z
    1454:	e1 80       	ldd	r14, Z+1	; 0x01
    1456:	d2 80       	ldd	r13, Z+2	; 0x02
    1458:	c3 80       	ldd	r12, Z+3	; 0x03
	// Shuffle down everything after that element
	for (int i = chosenIndex + 1; i < pq->numItems; i++) {
    145a:	9e 01       	movw	r18, r28
    145c:	2f 5f       	subi	r18, 0xFF	; 255
    145e:	3f 4f       	sbci	r19, 0xFF	; 255
    1460:	a9 01       	movw	r20, r18
    1462:	44 0f       	add	r20, r20
    1464:	55 1f       	adc	r21, r21
    1466:	44 0f       	add	r20, r20
    1468:	55 1f       	adc	r21, r21
    146a:	17 c0       	rjmp	.+46     	; 0x149a <PQDequeue+0xc2>
		pq->items[i - 1] = pq->items[i];
    146c:	d8 01       	movw	r26, r16
    146e:	ed 91       	ld	r30, X+
    1470:	fc 91       	ld	r31, X
    1472:	df 01       	movw	r26, r30
    1474:	a4 0f       	add	r26, r20
    1476:	b5 1f       	adc	r27, r21
    1478:	8d 91       	ld	r24, X+
    147a:	9d 91       	ld	r25, X+
    147c:	0d 90       	ld	r0, X+
    147e:	bc 91       	ld	r27, X
    1480:	a0 2d       	mov	r26, r0
    1482:	e6 0f       	add	r30, r22
    1484:	f7 1f       	adc	r31, r23
    1486:	80 83       	st	Z, r24
    1488:	91 83       	std	Z+1, r25	; 0x01
    148a:	a2 83       	std	Z+2, r26	; 0x02
    148c:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	
	ItemPQ element = pq->items[chosenIndex];
	// Shuffle down everything after that element
	for (int i = chosenIndex + 1; i < pq->numItems; i++) {
    148e:	2f 5f       	subi	r18, 0xFF	; 255
    1490:	3f 4f       	sbci	r19, 0xFF	; 255
    1492:	6c 5f       	subi	r22, 0xFC	; 252
    1494:	7f 4f       	sbci	r23, 0xFF	; 255
    1496:	4c 5f       	subi	r20, 0xFC	; 252
    1498:	5f 4f       	sbci	r21, 0xFF	; 255
    149a:	f8 01       	movw	r30, r16
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	28 17       	cp	r18, r24
    14a2:	39 07       	cpc	r19, r25
    14a4:	1c f3       	brlt	.-58     	; 0x146c <PQDequeue+0x94>
		pq->items[i - 1] = pq->items[i];
	}
	pq->numItems--;
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	93 83       	std	Z+3, r25	; 0x03
    14aa:	82 83       	std	Z+2, r24	; 0x02
	
	return element;
}
    14ac:	6f 2d       	mov	r22, r15
    14ae:	7e 2d       	mov	r23, r14
    14b0:	8d 2d       	mov	r24, r13
    14b2:	9c 2d       	mov	r25, r12
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	ff 90       	pop	r15
    14be:	ef 90       	pop	r14
    14c0:	df 90       	pop	r13
    14c2:	cf 90       	pop	r12
    14c4:	08 95       	ret

000014c6 <PQAdd>:
	pq->numItems = 0;
	pq->capacity = DEFAULT_SIZE;
	return pq;
}

void PQAdd(PQ pq, ItemPQ item) {
    14c6:	ef 92       	push	r14
    14c8:	ff 92       	push	r15
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	ec 01       	movw	r28, r24
    14d4:	7a 01       	movw	r14, r20
    14d6:	8b 01       	movw	r16, r22
	assert(pq != NULL);
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	09 f4       	brne	.+2      	; 0x14de <PQAdd+0x18>
    14dc:	bb d3       	rcall	.+1910   	; 0x1c54 <abort>
			return;
		}
	}*/
	
	// If the PQ is full, expand it (i.e., double its capacity)
	if (pq->numItems == pq->capacity) {
    14de:	6a 81       	ldd	r22, Y+2	; 0x02
    14e0:	7b 81       	ldd	r23, Y+3	; 0x03
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	9d 81       	ldd	r25, Y+5	; 0x05
    14e6:	68 17       	cp	r22, r24
    14e8:	79 07       	cpc	r23, r25
    14ea:	c9 f4       	brne	.+50     	; 0x151e <PQAdd+0x58>
		pq->capacity *= 2;
    14ec:	66 0f       	add	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	7d 83       	std	Y+5, r23	; 0x05
    14f2:	6c 83       	std	Y+4, r22	; 0x04
		pq->items = realloc(pq->items, pq->capacity * sizeof(ItemPQ));
    14f4:	66 0f       	add	r22, r22
    14f6:	77 1f       	adc	r23, r23
    14f8:	66 0f       	add	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	88 81       	ld	r24, Y
    14fe:	99 81       	ldd	r25, Y+1	; 0x01
    1500:	e2 d2       	rcall	.+1476   	; 0x1ac6 <realloc>
    1502:	99 83       	std	Y+1, r25	; 0x01
    1504:	88 83       	st	Y, r24
		if (pq->items == NULL) {
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	51 f4       	brne	.+20     	; 0x151e <PQAdd+0x58>
			fprintf(stderr, "Couldn't expand PQ!\n");
    150a:	60 91 6e 01 	lds	r22, 0x016E
    150e:	70 91 6f 01 	lds	r23, 0x016F
    1512:	84 e2       	ldi	r24, 0x24	; 36
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	ab d3       	rcall	.+1878   	; 0x1c6e <fputs>
			exit(1);
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	07 d4       	rcall	.+2062   	; 0x1d2c <_exit>
		}
	}
	
	// Add the new item to the end
	pq->items[pq->numItems] = item;
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	9b 81       	ldd	r25, Y+3	; 0x03
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	e8 81       	ld	r30, Y
    152c:	f9 81       	ldd	r31, Y+1	; 0x01
    152e:	e8 0f       	add	r30, r24
    1530:	f9 1f       	adc	r31, r25
    1532:	e0 82       	st	Z, r14
    1534:	f1 82       	std	Z+1, r15	; 0x01
    1536:	02 83       	std	Z+2, r16	; 0x02
    1538:	13 83       	std	Z+3, r17	; 0x03
	pq->numItems++;
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	9b 81       	ldd	r25, Y+3	; 0x03
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	9b 83       	std	Y+3, r25	; 0x03
    1542:	8a 83       	std	Y+2, r24	; 0x02
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	08 95       	ret

00001552 <PQNew>:
	ItemPQ *items;
	int numItems;
	int capacity;
};

PQ PQNew(void) {
    1552:	1f 93       	push	r17
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
	PQ pq = malloc(sizeof(*pq));
    1558:	86 e0       	ldi	r24, 0x06	; 6
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	af d1       	rcall	.+862    	; 0x18bc <malloc>
    155e:	19 2f       	mov	r17, r25
    1560:	c8 2f       	mov	r28, r24
    1562:	d9 2f       	mov	r29, r25
	if (pq == NULL) {
    1564:	20 97       	sbiw	r28, 0x00	; 0
    1566:	51 f4       	brne	.+20     	; 0x157c <PQNew+0x2a>
		fprintf(stderr, "Couldn't allocate PQ!\n");
    1568:	60 91 6e 01 	lds	r22, 0x016E
    156c:	70 91 6f 01 	lds	r23, 0x016F
    1570:	89 e3       	ldi	r24, 0x39	; 57
    1572:	91 e0       	ldi	r25, 0x01	; 1
    1574:	7c d3       	rcall	.+1784   	; 0x1c6e <fputs>
		exit(1);
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	d8 d3       	rcall	.+1968   	; 0x1d2c <_exit>
	}
	
	pq->items = malloc(DEFAULT_SIZE * sizeof(ItemPQ));
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	9d d1       	rcall	.+826    	; 0x18bc <malloc>
    1582:	88 83       	st	Y, r24
    1584:	99 83       	std	Y+1, r25	; 0x01
	if (pq == NULL) {
		fprintf(stderr, "Couldn't allocate PQ!\n");
		exit(1);
	}
	
	pq->numItems = 0;
    1586:	1b 82       	std	Y+3, r1	; 0x03
    1588:	1a 82       	std	Y+2, r1	; 0x02
	pq->capacity = DEFAULT_SIZE;
    158a:	80 e4       	ldi	r24, 0x40	; 64
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	9d 83       	std	Y+5, r25	; 0x05
    1590:	8c 83       	std	Y+4, r24	; 0x04
	return pq;
}
    1592:	8c 2f       	mov	r24, r28
    1594:	91 2f       	mov	r25, r17
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	08 95       	ret

0000159e <__subsf3>:
    159e:	50 58       	subi	r21, 0x80	; 128

000015a0 <__addsf3>:
    15a0:	bb 27       	eor	r27, r27
    15a2:	aa 27       	eor	r26, r26
    15a4:	0e d0       	rcall	.+28     	; 0x15c2 <__addsf3x>
    15a6:	e5 c0       	rjmp	.+458    	; 0x1772 <__fp_round>
    15a8:	d6 d0       	rcall	.+428    	; 0x1756 <__fp_pscA>
    15aa:	30 f0       	brcs	.+12     	; 0x15b8 <__addsf3+0x18>
    15ac:	db d0       	rcall	.+438    	; 0x1764 <__fp_pscB>
    15ae:	20 f0       	brcs	.+8      	; 0x15b8 <__addsf3+0x18>
    15b0:	31 f4       	brne	.+12     	; 0x15be <__addsf3+0x1e>
    15b2:	9f 3f       	cpi	r25, 0xFF	; 255
    15b4:	11 f4       	brne	.+4      	; 0x15ba <__addsf3+0x1a>
    15b6:	1e f4       	brtc	.+6      	; 0x15be <__addsf3+0x1e>
    15b8:	cb c0       	rjmp	.+406    	; 0x1750 <__fp_nan>
    15ba:	0e f4       	brtc	.+2      	; 0x15be <__addsf3+0x1e>
    15bc:	e0 95       	com	r30
    15be:	e7 fb       	bst	r30, 7
    15c0:	c1 c0       	rjmp	.+386    	; 0x1744 <__fp_inf>

000015c2 <__addsf3x>:
    15c2:	e9 2f       	mov	r30, r25
    15c4:	e7 d0       	rcall	.+462    	; 0x1794 <__fp_split3>
    15c6:	80 f3       	brcs	.-32     	; 0x15a8 <__addsf3+0x8>
    15c8:	ba 17       	cp	r27, r26
    15ca:	62 07       	cpc	r22, r18
    15cc:	73 07       	cpc	r23, r19
    15ce:	84 07       	cpc	r24, r20
    15d0:	95 07       	cpc	r25, r21
    15d2:	18 f0       	brcs	.+6      	; 0x15da <__addsf3x+0x18>
    15d4:	71 f4       	brne	.+28     	; 0x15f2 <__addsf3x+0x30>
    15d6:	9e f5       	brtc	.+102    	; 0x163e <__addsf3x+0x7c>
    15d8:	ff c0       	rjmp	.+510    	; 0x17d8 <__fp_zero>
    15da:	0e f4       	brtc	.+2      	; 0x15de <__addsf3x+0x1c>
    15dc:	e0 95       	com	r30
    15de:	0b 2e       	mov	r0, r27
    15e0:	ba 2f       	mov	r27, r26
    15e2:	a0 2d       	mov	r26, r0
    15e4:	0b 01       	movw	r0, r22
    15e6:	b9 01       	movw	r22, r18
    15e8:	90 01       	movw	r18, r0
    15ea:	0c 01       	movw	r0, r24
    15ec:	ca 01       	movw	r24, r20
    15ee:	a0 01       	movw	r20, r0
    15f0:	11 24       	eor	r1, r1
    15f2:	ff 27       	eor	r31, r31
    15f4:	59 1b       	sub	r21, r25
    15f6:	99 f0       	breq	.+38     	; 0x161e <__addsf3x+0x5c>
    15f8:	59 3f       	cpi	r21, 0xF9	; 249
    15fa:	50 f4       	brcc	.+20     	; 0x1610 <__addsf3x+0x4e>
    15fc:	50 3e       	cpi	r21, 0xE0	; 224
    15fe:	68 f1       	brcs	.+90     	; 0x165a <__addsf3x+0x98>
    1600:	1a 16       	cp	r1, r26
    1602:	f0 40       	sbci	r31, 0x00	; 0
    1604:	a2 2f       	mov	r26, r18
    1606:	23 2f       	mov	r18, r19
    1608:	34 2f       	mov	r19, r20
    160a:	44 27       	eor	r20, r20
    160c:	58 5f       	subi	r21, 0xF8	; 248
    160e:	f3 cf       	rjmp	.-26     	; 0x15f6 <__addsf3x+0x34>
    1610:	46 95       	lsr	r20
    1612:	37 95       	ror	r19
    1614:	27 95       	ror	r18
    1616:	a7 95       	ror	r26
    1618:	f0 40       	sbci	r31, 0x00	; 0
    161a:	53 95       	inc	r21
    161c:	c9 f7       	brne	.-14     	; 0x1610 <__addsf3x+0x4e>
    161e:	7e f4       	brtc	.+30     	; 0x163e <__addsf3x+0x7c>
    1620:	1f 16       	cp	r1, r31
    1622:	ba 0b       	sbc	r27, r26
    1624:	62 0b       	sbc	r22, r18
    1626:	73 0b       	sbc	r23, r19
    1628:	84 0b       	sbc	r24, r20
    162a:	ba f0       	brmi	.+46     	; 0x165a <__addsf3x+0x98>
    162c:	91 50       	subi	r25, 0x01	; 1
    162e:	a1 f0       	breq	.+40     	; 0x1658 <__addsf3x+0x96>
    1630:	ff 0f       	add	r31, r31
    1632:	bb 1f       	adc	r27, r27
    1634:	66 1f       	adc	r22, r22
    1636:	77 1f       	adc	r23, r23
    1638:	88 1f       	adc	r24, r24
    163a:	c2 f7       	brpl	.-16     	; 0x162c <__addsf3x+0x6a>
    163c:	0e c0       	rjmp	.+28     	; 0x165a <__addsf3x+0x98>
    163e:	ba 0f       	add	r27, r26
    1640:	62 1f       	adc	r22, r18
    1642:	73 1f       	adc	r23, r19
    1644:	84 1f       	adc	r24, r20
    1646:	48 f4       	brcc	.+18     	; 0x165a <__addsf3x+0x98>
    1648:	87 95       	ror	r24
    164a:	77 95       	ror	r23
    164c:	67 95       	ror	r22
    164e:	b7 95       	ror	r27
    1650:	f7 95       	ror	r31
    1652:	9e 3f       	cpi	r25, 0xFE	; 254
    1654:	08 f0       	brcs	.+2      	; 0x1658 <__addsf3x+0x96>
    1656:	b3 cf       	rjmp	.-154    	; 0x15be <__addsf3+0x1e>
    1658:	93 95       	inc	r25
    165a:	88 0f       	add	r24, r24
    165c:	08 f0       	brcs	.+2      	; 0x1660 <__addsf3x+0x9e>
    165e:	99 27       	eor	r25, r25
    1660:	ee 0f       	add	r30, r30
    1662:	97 95       	ror	r25
    1664:	87 95       	ror	r24
    1666:	08 95       	ret

00001668 <__fixsfsi>:
    1668:	04 d0       	rcall	.+8      	; 0x1672 <__fixunssfsi>
    166a:	68 94       	set
    166c:	b1 11       	cpse	r27, r1
    166e:	b5 c0       	rjmp	.+362    	; 0x17da <__fp_szero>
    1670:	08 95       	ret

00001672 <__fixunssfsi>:
    1672:	98 d0       	rcall	.+304    	; 0x17a4 <__fp_splitA>
    1674:	88 f0       	brcs	.+34     	; 0x1698 <__fixunssfsi+0x26>
    1676:	9f 57       	subi	r25, 0x7F	; 127
    1678:	90 f0       	brcs	.+36     	; 0x169e <__fixunssfsi+0x2c>
    167a:	b9 2f       	mov	r27, r25
    167c:	99 27       	eor	r25, r25
    167e:	b7 51       	subi	r27, 0x17	; 23
    1680:	a0 f0       	brcs	.+40     	; 0x16aa <__fixunssfsi+0x38>
    1682:	d1 f0       	breq	.+52     	; 0x16b8 <__fixunssfsi+0x46>
    1684:	66 0f       	add	r22, r22
    1686:	77 1f       	adc	r23, r23
    1688:	88 1f       	adc	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	1a f0       	brmi	.+6      	; 0x1694 <__fixunssfsi+0x22>
    168e:	ba 95       	dec	r27
    1690:	c9 f7       	brne	.-14     	; 0x1684 <__fixunssfsi+0x12>
    1692:	12 c0       	rjmp	.+36     	; 0x16b8 <__fixunssfsi+0x46>
    1694:	b1 30       	cpi	r27, 0x01	; 1
    1696:	81 f0       	breq	.+32     	; 0x16b8 <__fixunssfsi+0x46>
    1698:	9f d0       	rcall	.+318    	; 0x17d8 <__fp_zero>
    169a:	b1 e0       	ldi	r27, 0x01	; 1
    169c:	08 95       	ret
    169e:	9c c0       	rjmp	.+312    	; 0x17d8 <__fp_zero>
    16a0:	67 2f       	mov	r22, r23
    16a2:	78 2f       	mov	r23, r24
    16a4:	88 27       	eor	r24, r24
    16a6:	b8 5f       	subi	r27, 0xF8	; 248
    16a8:	39 f0       	breq	.+14     	; 0x16b8 <__fixunssfsi+0x46>
    16aa:	b9 3f       	cpi	r27, 0xF9	; 249
    16ac:	cc f3       	brlt	.-14     	; 0x16a0 <__fixunssfsi+0x2e>
    16ae:	86 95       	lsr	r24
    16b0:	77 95       	ror	r23
    16b2:	67 95       	ror	r22
    16b4:	b3 95       	inc	r27
    16b6:	d9 f7       	brne	.-10     	; 0x16ae <__fixunssfsi+0x3c>
    16b8:	3e f4       	brtc	.+14     	; 0x16c8 <__fixunssfsi+0x56>
    16ba:	90 95       	com	r25
    16bc:	80 95       	com	r24
    16be:	70 95       	com	r23
    16c0:	61 95       	neg	r22
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
    16c4:	8f 4f       	sbci	r24, 0xFF	; 255
    16c6:	9f 4f       	sbci	r25, 0xFF	; 255
    16c8:	08 95       	ret

000016ca <__floatunsisf>:
    16ca:	e8 94       	clt
    16cc:	09 c0       	rjmp	.+18     	; 0x16e0 <__floatsisf+0x12>

000016ce <__floatsisf>:
    16ce:	97 fb       	bst	r25, 7
    16d0:	3e f4       	brtc	.+14     	; 0x16e0 <__floatsisf+0x12>
    16d2:	90 95       	com	r25
    16d4:	80 95       	com	r24
    16d6:	70 95       	com	r23
    16d8:	61 95       	neg	r22
    16da:	7f 4f       	sbci	r23, 0xFF	; 255
    16dc:	8f 4f       	sbci	r24, 0xFF	; 255
    16de:	9f 4f       	sbci	r25, 0xFF	; 255
    16e0:	99 23       	and	r25, r25
    16e2:	a9 f0       	breq	.+42     	; 0x170e <__floatsisf+0x40>
    16e4:	f9 2f       	mov	r31, r25
    16e6:	96 e9       	ldi	r25, 0x96	; 150
    16e8:	bb 27       	eor	r27, r27
    16ea:	93 95       	inc	r25
    16ec:	f6 95       	lsr	r31
    16ee:	87 95       	ror	r24
    16f0:	77 95       	ror	r23
    16f2:	67 95       	ror	r22
    16f4:	b7 95       	ror	r27
    16f6:	f1 11       	cpse	r31, r1
    16f8:	f8 cf       	rjmp	.-16     	; 0x16ea <__floatsisf+0x1c>
    16fa:	fa f4       	brpl	.+62     	; 0x173a <__floatsisf+0x6c>
    16fc:	bb 0f       	add	r27, r27
    16fe:	11 f4       	brne	.+4      	; 0x1704 <__floatsisf+0x36>
    1700:	60 ff       	sbrs	r22, 0
    1702:	1b c0       	rjmp	.+54     	; 0x173a <__floatsisf+0x6c>
    1704:	6f 5f       	subi	r22, 0xFF	; 255
    1706:	7f 4f       	sbci	r23, 0xFF	; 255
    1708:	8f 4f       	sbci	r24, 0xFF	; 255
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	16 c0       	rjmp	.+44     	; 0x173a <__floatsisf+0x6c>
    170e:	88 23       	and	r24, r24
    1710:	11 f0       	breq	.+4      	; 0x1716 <__floatsisf+0x48>
    1712:	96 e9       	ldi	r25, 0x96	; 150
    1714:	11 c0       	rjmp	.+34     	; 0x1738 <__floatsisf+0x6a>
    1716:	77 23       	and	r23, r23
    1718:	21 f0       	breq	.+8      	; 0x1722 <__floatsisf+0x54>
    171a:	9e e8       	ldi	r25, 0x8E	; 142
    171c:	87 2f       	mov	r24, r23
    171e:	76 2f       	mov	r23, r22
    1720:	05 c0       	rjmp	.+10     	; 0x172c <__floatsisf+0x5e>
    1722:	66 23       	and	r22, r22
    1724:	71 f0       	breq	.+28     	; 0x1742 <__floatsisf+0x74>
    1726:	96 e8       	ldi	r25, 0x86	; 134
    1728:	86 2f       	mov	r24, r22
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	2a f0       	brmi	.+10     	; 0x173a <__floatsisf+0x6c>
    1730:	9a 95       	dec	r25
    1732:	66 0f       	add	r22, r22
    1734:	77 1f       	adc	r23, r23
    1736:	88 1f       	adc	r24, r24
    1738:	da f7       	brpl	.-10     	; 0x1730 <__floatsisf+0x62>
    173a:	88 0f       	add	r24, r24
    173c:	96 95       	lsr	r25
    173e:	87 95       	ror	r24
    1740:	97 f9       	bld	r25, 7
    1742:	08 95       	ret

00001744 <__fp_inf>:
    1744:	97 f9       	bld	r25, 7
    1746:	9f 67       	ori	r25, 0x7F	; 127
    1748:	80 e8       	ldi	r24, 0x80	; 128
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	08 95       	ret

00001750 <__fp_nan>:
    1750:	9f ef       	ldi	r25, 0xFF	; 255
    1752:	80 ec       	ldi	r24, 0xC0	; 192
    1754:	08 95       	ret

00001756 <__fp_pscA>:
    1756:	00 24       	eor	r0, r0
    1758:	0a 94       	dec	r0
    175a:	16 16       	cp	r1, r22
    175c:	17 06       	cpc	r1, r23
    175e:	18 06       	cpc	r1, r24
    1760:	09 06       	cpc	r0, r25
    1762:	08 95       	ret

00001764 <__fp_pscB>:
    1764:	00 24       	eor	r0, r0
    1766:	0a 94       	dec	r0
    1768:	12 16       	cp	r1, r18
    176a:	13 06       	cpc	r1, r19
    176c:	14 06       	cpc	r1, r20
    176e:	05 06       	cpc	r0, r21
    1770:	08 95       	ret

00001772 <__fp_round>:
    1772:	09 2e       	mov	r0, r25
    1774:	03 94       	inc	r0
    1776:	00 0c       	add	r0, r0
    1778:	11 f4       	brne	.+4      	; 0x177e <__fp_round+0xc>
    177a:	88 23       	and	r24, r24
    177c:	52 f0       	brmi	.+20     	; 0x1792 <__fp_round+0x20>
    177e:	bb 0f       	add	r27, r27
    1780:	40 f4       	brcc	.+16     	; 0x1792 <__fp_round+0x20>
    1782:	bf 2b       	or	r27, r31
    1784:	11 f4       	brne	.+4      	; 0x178a <__fp_round+0x18>
    1786:	60 ff       	sbrs	r22, 0
    1788:	04 c0       	rjmp	.+8      	; 0x1792 <__fp_round+0x20>
    178a:	6f 5f       	subi	r22, 0xFF	; 255
    178c:	7f 4f       	sbci	r23, 0xFF	; 255
    178e:	8f 4f       	sbci	r24, 0xFF	; 255
    1790:	9f 4f       	sbci	r25, 0xFF	; 255
    1792:	08 95       	ret

00001794 <__fp_split3>:
    1794:	57 fd       	sbrc	r21, 7
    1796:	90 58       	subi	r25, 0x80	; 128
    1798:	44 0f       	add	r20, r20
    179a:	55 1f       	adc	r21, r21
    179c:	59 f0       	breq	.+22     	; 0x17b4 <__fp_splitA+0x10>
    179e:	5f 3f       	cpi	r21, 0xFF	; 255
    17a0:	71 f0       	breq	.+28     	; 0x17be <__fp_splitA+0x1a>
    17a2:	47 95       	ror	r20

000017a4 <__fp_splitA>:
    17a4:	88 0f       	add	r24, r24
    17a6:	97 fb       	bst	r25, 7
    17a8:	99 1f       	adc	r25, r25
    17aa:	61 f0       	breq	.+24     	; 0x17c4 <__fp_splitA+0x20>
    17ac:	9f 3f       	cpi	r25, 0xFF	; 255
    17ae:	79 f0       	breq	.+30     	; 0x17ce <__fp_splitA+0x2a>
    17b0:	87 95       	ror	r24
    17b2:	08 95       	ret
    17b4:	12 16       	cp	r1, r18
    17b6:	13 06       	cpc	r1, r19
    17b8:	14 06       	cpc	r1, r20
    17ba:	55 1f       	adc	r21, r21
    17bc:	f2 cf       	rjmp	.-28     	; 0x17a2 <__fp_split3+0xe>
    17be:	46 95       	lsr	r20
    17c0:	f1 df       	rcall	.-30     	; 0x17a4 <__fp_splitA>
    17c2:	08 c0       	rjmp	.+16     	; 0x17d4 <__fp_splitA+0x30>
    17c4:	16 16       	cp	r1, r22
    17c6:	17 06       	cpc	r1, r23
    17c8:	18 06       	cpc	r1, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	f1 cf       	rjmp	.-30     	; 0x17b0 <__fp_splitA+0xc>
    17ce:	86 95       	lsr	r24
    17d0:	71 05       	cpc	r23, r1
    17d2:	61 05       	cpc	r22, r1
    17d4:	08 94       	sec
    17d6:	08 95       	ret

000017d8 <__fp_zero>:
    17d8:	e8 94       	clt

000017da <__fp_szero>:
    17da:	bb 27       	eor	r27, r27
    17dc:	66 27       	eor	r22, r22
    17de:	77 27       	eor	r23, r23
    17e0:	cb 01       	movw	r24, r22
    17e2:	97 f9       	bld	r25, 7
    17e4:	08 95       	ret

000017e6 <__mulsf3>:
    17e6:	0a d0       	rcall	.+20     	; 0x17fc <__mulsf3x>
    17e8:	c4 cf       	rjmp	.-120    	; 0x1772 <__fp_round>
    17ea:	b5 df       	rcall	.-150    	; 0x1756 <__fp_pscA>
    17ec:	28 f0       	brcs	.+10     	; 0x17f8 <__mulsf3+0x12>
    17ee:	ba df       	rcall	.-140    	; 0x1764 <__fp_pscB>
    17f0:	18 f0       	brcs	.+6      	; 0x17f8 <__mulsf3+0x12>
    17f2:	95 23       	and	r25, r21
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <__mulsf3+0x12>
    17f6:	a6 cf       	rjmp	.-180    	; 0x1744 <__fp_inf>
    17f8:	ab cf       	rjmp	.-170    	; 0x1750 <__fp_nan>
    17fa:	ef cf       	rjmp	.-34     	; 0x17da <__fp_szero>

000017fc <__mulsf3x>:
    17fc:	cb df       	rcall	.-106    	; 0x1794 <__fp_split3>
    17fe:	a8 f3       	brcs	.-22     	; 0x17ea <__mulsf3+0x4>

00001800 <__mulsf3_pse>:
    1800:	99 23       	and	r25, r25
    1802:	d9 f3       	breq	.-10     	; 0x17fa <__mulsf3+0x14>
    1804:	55 23       	and	r21, r21
    1806:	c9 f3       	breq	.-14     	; 0x17fa <__mulsf3+0x14>
    1808:	95 0f       	add	r25, r21
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	55 1f       	adc	r21, r21
    180e:	aa 27       	eor	r26, r26
    1810:	ee 27       	eor	r30, r30
    1812:	ff 27       	eor	r31, r31
    1814:	bb 27       	eor	r27, r27
    1816:	00 24       	eor	r0, r0
    1818:	08 94       	sec
    181a:	67 95       	ror	r22
    181c:	20 f4       	brcc	.+8      	; 0x1826 <__mulsf3_pse+0x26>
    181e:	e2 0f       	add	r30, r18
    1820:	f3 1f       	adc	r31, r19
    1822:	b4 1f       	adc	r27, r20
    1824:	0a 1e       	adc	r0, r26
    1826:	22 0f       	add	r18, r18
    1828:	33 1f       	adc	r19, r19
    182a:	44 1f       	adc	r20, r20
    182c:	aa 1f       	adc	r26, r26
    182e:	66 95       	lsr	r22
    1830:	a9 f7       	brne	.-22     	; 0x181c <__mulsf3_pse+0x1c>
    1832:	77 95       	ror	r23
    1834:	30 f4       	brcc	.+12     	; 0x1842 <__mulsf3_pse+0x42>
    1836:	f3 0f       	add	r31, r19
    1838:	b4 1f       	adc	r27, r20
    183a:	0a 1e       	adc	r0, r26
    183c:	12 1e       	adc	r1, r18
    183e:	08 f4       	brcc	.+2      	; 0x1842 <__mulsf3_pse+0x42>
    1840:	63 95       	inc	r22
    1842:	33 0f       	add	r19, r19
    1844:	44 1f       	adc	r20, r20
    1846:	aa 1f       	adc	r26, r26
    1848:	22 1f       	adc	r18, r18
    184a:	76 95       	lsr	r23
    184c:	99 f7       	brne	.-26     	; 0x1834 <__mulsf3_pse+0x34>
    184e:	87 95       	ror	r24
    1850:	20 f4       	brcc	.+8      	; 0x185a <__mulsf3_pse+0x5a>
    1852:	b4 0f       	add	r27, r20
    1854:	0a 1e       	adc	r0, r26
    1856:	12 1e       	adc	r1, r18
    1858:	63 1f       	adc	r22, r19
    185a:	44 0f       	add	r20, r20
    185c:	aa 1f       	adc	r26, r26
    185e:	22 1f       	adc	r18, r18
    1860:	33 1f       	adc	r19, r19
    1862:	86 95       	lsr	r24
    1864:	a9 f7       	brne	.-22     	; 0x1850 <__mulsf3_pse+0x50>
    1866:	86 2f       	mov	r24, r22
    1868:	71 2d       	mov	r23, r1
    186a:	60 2d       	mov	r22, r0
    186c:	11 24       	eor	r1, r1
    186e:	9f 57       	subi	r25, 0x7F	; 127
    1870:	50 40       	sbci	r21, 0x00	; 0
    1872:	8a f0       	brmi	.+34     	; 0x1896 <__mulsf3_pse+0x96>
    1874:	e1 f0       	breq	.+56     	; 0x18ae <__mulsf3_pse+0xae>
    1876:	88 23       	and	r24, r24
    1878:	4a f0       	brmi	.+18     	; 0x188c <__mulsf3_pse+0x8c>
    187a:	ee 0f       	add	r30, r30
    187c:	ff 1f       	adc	r31, r31
    187e:	bb 1f       	adc	r27, r27
    1880:	66 1f       	adc	r22, r22
    1882:	77 1f       	adc	r23, r23
    1884:	88 1f       	adc	r24, r24
    1886:	91 50       	subi	r25, 0x01	; 1
    1888:	50 40       	sbci	r21, 0x00	; 0
    188a:	a9 f7       	brne	.-22     	; 0x1876 <__mulsf3_pse+0x76>
    188c:	9e 3f       	cpi	r25, 0xFE	; 254
    188e:	51 05       	cpc	r21, r1
    1890:	70 f0       	brcs	.+28     	; 0x18ae <__mulsf3_pse+0xae>
    1892:	58 cf       	rjmp	.-336    	; 0x1744 <__fp_inf>
    1894:	a2 cf       	rjmp	.-188    	; 0x17da <__fp_szero>
    1896:	5f 3f       	cpi	r21, 0xFF	; 255
    1898:	ec f3       	brlt	.-6      	; 0x1894 <__mulsf3_pse+0x94>
    189a:	98 3e       	cpi	r25, 0xE8	; 232
    189c:	dc f3       	brlt	.-10     	; 0x1894 <__mulsf3_pse+0x94>
    189e:	86 95       	lsr	r24
    18a0:	77 95       	ror	r23
    18a2:	67 95       	ror	r22
    18a4:	b7 95       	ror	r27
    18a6:	f7 95       	ror	r31
    18a8:	e7 95       	ror	r30
    18aa:	9f 5f       	subi	r25, 0xFF	; 255
    18ac:	c1 f7       	brne	.-16     	; 0x189e <__mulsf3_pse+0x9e>
    18ae:	fe 2b       	or	r31, r30
    18b0:	88 0f       	add	r24, r24
    18b2:	91 1d       	adc	r25, r1
    18b4:	96 95       	lsr	r25
    18b6:	87 95       	ror	r24
    18b8:	97 f9       	bld	r25, 7
    18ba:	08 95       	ret

000018bc <malloc>:
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	bc 01       	movw	r22, r24
    18c2:	82 30       	cpi	r24, 0x02	; 2
    18c4:	91 05       	cpc	r25, r1
    18c6:	10 f4       	brcc	.+4      	; 0x18cc <malloc+0x10>
    18c8:	62 e0       	ldi	r22, 0x02	; 2
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	a0 91 68 01 	lds	r26, 0x0168
    18d0:	b0 91 69 01 	lds	r27, 0x0169
    18d4:	ed 01       	movw	r28, r26
    18d6:	e0 e0       	ldi	r30, 0x00	; 0
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	21 c0       	rjmp	.+66     	; 0x1922 <malloc+0x66>
    18e0:	88 81       	ld	r24, Y
    18e2:	99 81       	ldd	r25, Y+1	; 0x01
    18e4:	86 17       	cp	r24, r22
    18e6:	97 07       	cpc	r25, r23
    18e8:	69 f4       	brne	.+26     	; 0x1904 <malloc+0x48>
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	9b 81       	ldd	r25, Y+3	; 0x03
    18ee:	30 97       	sbiw	r30, 0x00	; 0
    18f0:	19 f0       	breq	.+6      	; 0x18f8 <malloc+0x3c>
    18f2:	93 83       	std	Z+3, r25	; 0x03
    18f4:	82 83       	std	Z+2, r24	; 0x02
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <malloc+0x44>
    18f8:	90 93 69 01 	sts	0x0169, r25
    18fc:	80 93 68 01 	sts	0x0168, r24
    1900:	fe 01       	movw	r30, r28
    1902:	34 c0       	rjmp	.+104    	; 0x196c <malloc+0xb0>
    1904:	68 17       	cp	r22, r24
    1906:	79 07       	cpc	r23, r25
    1908:	38 f4       	brcc	.+14     	; 0x1918 <malloc+0x5c>
    190a:	41 15       	cp	r20, r1
    190c:	51 05       	cpc	r21, r1
    190e:	19 f0       	breq	.+6      	; 0x1916 <malloc+0x5a>
    1910:	84 17       	cp	r24, r20
    1912:	95 07       	cpc	r25, r21
    1914:	08 f4       	brcc	.+2      	; 0x1918 <malloc+0x5c>
    1916:	ac 01       	movw	r20, r24
    1918:	fe 01       	movw	r30, r28
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	9c 01       	movw	r18, r24
    1920:	e9 01       	movw	r28, r18
    1922:	20 97       	sbiw	r28, 0x00	; 0
    1924:	e9 f6       	brne	.-70     	; 0x18e0 <malloc+0x24>
    1926:	41 15       	cp	r20, r1
    1928:	51 05       	cpc	r21, r1
    192a:	a9 f1       	breq	.+106    	; 0x1996 <malloc+0xda>
    192c:	ca 01       	movw	r24, r20
    192e:	86 1b       	sub	r24, r22
    1930:	97 0b       	sbc	r25, r23
    1932:	04 97       	sbiw	r24, 0x04	; 4
    1934:	08 f4       	brcc	.+2      	; 0x1938 <malloc+0x7c>
    1936:	ba 01       	movw	r22, r20
    1938:	e0 e0       	ldi	r30, 0x00	; 0
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	2a c0       	rjmp	.+84     	; 0x1992 <malloc+0xd6>
    193e:	8d 91       	ld	r24, X+
    1940:	9c 91       	ld	r25, X
    1942:	11 97       	sbiw	r26, 0x01	; 1
    1944:	84 17       	cp	r24, r20
    1946:	95 07       	cpc	r25, r21
    1948:	f9 f4       	brne	.+62     	; 0x1988 <malloc+0xcc>
    194a:	64 17       	cp	r22, r20
    194c:	75 07       	cpc	r23, r21
    194e:	81 f4       	brne	.+32     	; 0x1970 <malloc+0xb4>
    1950:	12 96       	adiw	r26, 0x02	; 2
    1952:	8d 91       	ld	r24, X+
    1954:	9c 91       	ld	r25, X
    1956:	13 97       	sbiw	r26, 0x03	; 3
    1958:	30 97       	sbiw	r30, 0x00	; 0
    195a:	19 f0       	breq	.+6      	; 0x1962 <malloc+0xa6>
    195c:	93 83       	std	Z+3, r25	; 0x03
    195e:	82 83       	std	Z+2, r24	; 0x02
    1960:	04 c0       	rjmp	.+8      	; 0x196a <malloc+0xae>
    1962:	90 93 69 01 	sts	0x0169, r25
    1966:	80 93 68 01 	sts	0x0168, r24
    196a:	fd 01       	movw	r30, r26
    196c:	32 96       	adiw	r30, 0x02	; 2
    196e:	4f c0       	rjmp	.+158    	; 0x1a0e <malloc+0x152>
    1970:	ca 01       	movw	r24, r20
    1972:	86 1b       	sub	r24, r22
    1974:	97 0b       	sbc	r25, r23
    1976:	fd 01       	movw	r30, r26
    1978:	e8 0f       	add	r30, r24
    197a:	f9 1f       	adc	r31, r25
    197c:	61 93       	st	Z+, r22
    197e:	71 93       	st	Z+, r23
    1980:	02 97       	sbiw	r24, 0x02	; 2
    1982:	8d 93       	st	X+, r24
    1984:	9c 93       	st	X, r25
    1986:	43 c0       	rjmp	.+134    	; 0x1a0e <malloc+0x152>
    1988:	fd 01       	movw	r30, r26
    198a:	82 81       	ldd	r24, Z+2	; 0x02
    198c:	93 81       	ldd	r25, Z+3	; 0x03
    198e:	9c 01       	movw	r18, r24
    1990:	d9 01       	movw	r26, r18
    1992:	10 97       	sbiw	r26, 0x00	; 0
    1994:	a1 f6       	brne	.-88     	; 0x193e <malloc+0x82>
    1996:	80 91 66 01 	lds	r24, 0x0166
    199a:	90 91 67 01 	lds	r25, 0x0167
    199e:	89 2b       	or	r24, r25
    19a0:	41 f4       	brne	.+16     	; 0x19b2 <malloc+0xf6>
    19a2:	80 91 52 01 	lds	r24, 0x0152
    19a6:	90 91 53 01 	lds	r25, 0x0153
    19aa:	90 93 67 01 	sts	0x0167, r25
    19ae:	80 93 66 01 	sts	0x0166, r24
    19b2:	40 91 54 01 	lds	r20, 0x0154
    19b6:	50 91 55 01 	lds	r21, 0x0155
    19ba:	41 15       	cp	r20, r1
    19bc:	51 05       	cpc	r21, r1
    19be:	41 f4       	brne	.+16     	; 0x19d0 <malloc+0x114>
    19c0:	4d b7       	in	r20, 0x3d	; 61
    19c2:	5e b7       	in	r21, 0x3e	; 62
    19c4:	80 91 50 01 	lds	r24, 0x0150
    19c8:	90 91 51 01 	lds	r25, 0x0151
    19cc:	48 1b       	sub	r20, r24
    19ce:	59 0b       	sbc	r21, r25
    19d0:	20 91 66 01 	lds	r18, 0x0166
    19d4:	30 91 67 01 	lds	r19, 0x0167
    19d8:	24 17       	cp	r18, r20
    19da:	35 07       	cpc	r19, r21
    19dc:	b0 f4       	brcc	.+44     	; 0x1a0a <malloc+0x14e>
    19de:	ca 01       	movw	r24, r20
    19e0:	82 1b       	sub	r24, r18
    19e2:	93 0b       	sbc	r25, r19
    19e4:	86 17       	cp	r24, r22
    19e6:	97 07       	cpc	r25, r23
    19e8:	80 f0       	brcs	.+32     	; 0x1a0a <malloc+0x14e>
    19ea:	ab 01       	movw	r20, r22
    19ec:	4e 5f       	subi	r20, 0xFE	; 254
    19ee:	5f 4f       	sbci	r21, 0xFF	; 255
    19f0:	84 17       	cp	r24, r20
    19f2:	95 07       	cpc	r25, r21
    19f4:	50 f0       	brcs	.+20     	; 0x1a0a <malloc+0x14e>
    19f6:	42 0f       	add	r20, r18
    19f8:	53 1f       	adc	r21, r19
    19fa:	50 93 67 01 	sts	0x0167, r21
    19fe:	40 93 66 01 	sts	0x0166, r20
    1a02:	f9 01       	movw	r30, r18
    1a04:	61 93       	st	Z+, r22
    1a06:	71 93       	st	Z+, r23
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <malloc+0x152>
    1a0a:	e0 e0       	ldi	r30, 0x00	; 0
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	cf 01       	movw	r24, r30
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	08 95       	ret

00001a16 <free>:
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <free+0xa>
    1a1e:	50 c0       	rjmp	.+160    	; 0x1ac0 <free+0xaa>
    1a20:	ec 01       	movw	r28, r24
    1a22:	22 97       	sbiw	r28, 0x02	; 2
    1a24:	1b 82       	std	Y+3, r1	; 0x03
    1a26:	1a 82       	std	Y+2, r1	; 0x02
    1a28:	a0 91 68 01 	lds	r26, 0x0168
    1a2c:	b0 91 69 01 	lds	r27, 0x0169
    1a30:	10 97       	sbiw	r26, 0x00	; 0
    1a32:	09 f1       	breq	.+66     	; 0x1a76 <free+0x60>
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	50 e0       	ldi	r21, 0x00	; 0
    1a38:	ac 17       	cp	r26, r28
    1a3a:	bd 07       	cpc	r27, r29
    1a3c:	08 f1       	brcs	.+66     	; 0x1a80 <free+0x6a>
    1a3e:	bb 83       	std	Y+3, r27	; 0x03
    1a40:	aa 83       	std	Y+2, r26	; 0x02
    1a42:	fe 01       	movw	r30, r28
    1a44:	21 91       	ld	r18, Z+
    1a46:	31 91       	ld	r19, Z+
    1a48:	e2 0f       	add	r30, r18
    1a4a:	f3 1f       	adc	r31, r19
    1a4c:	ae 17       	cp	r26, r30
    1a4e:	bf 07       	cpc	r27, r31
    1a50:	79 f4       	brne	.+30     	; 0x1a70 <free+0x5a>
    1a52:	8d 91       	ld	r24, X+
    1a54:	9c 91       	ld	r25, X
    1a56:	11 97       	sbiw	r26, 0x01	; 1
    1a58:	28 0f       	add	r18, r24
    1a5a:	39 1f       	adc	r19, r25
    1a5c:	2e 5f       	subi	r18, 0xFE	; 254
    1a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a60:	39 83       	std	Y+1, r19	; 0x01
    1a62:	28 83       	st	Y, r18
    1a64:	12 96       	adiw	r26, 0x02	; 2
    1a66:	8d 91       	ld	r24, X+
    1a68:	9c 91       	ld	r25, X
    1a6a:	13 97       	sbiw	r26, 0x03	; 3
    1a6c:	9b 83       	std	Y+3, r25	; 0x03
    1a6e:	8a 83       	std	Y+2, r24	; 0x02
    1a70:	41 15       	cp	r20, r1
    1a72:	51 05       	cpc	r21, r1
    1a74:	71 f4       	brne	.+28     	; 0x1a92 <free+0x7c>
    1a76:	d0 93 69 01 	sts	0x0169, r29
    1a7a:	c0 93 68 01 	sts	0x0168, r28
    1a7e:	20 c0       	rjmp	.+64     	; 0x1ac0 <free+0xaa>
    1a80:	12 96       	adiw	r26, 0x02	; 2
    1a82:	8d 91       	ld	r24, X+
    1a84:	9c 91       	ld	r25, X
    1a86:	13 97       	sbiw	r26, 0x03	; 3
    1a88:	ad 01       	movw	r20, r26
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	11 f0       	breq	.+4      	; 0x1a92 <free+0x7c>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	d3 cf       	rjmp	.-90     	; 0x1a38 <free+0x22>
    1a92:	fa 01       	movw	r30, r20
    1a94:	d3 83       	std	Z+3, r29	; 0x03
    1a96:	c2 83       	std	Z+2, r28	; 0x02
    1a98:	21 91       	ld	r18, Z+
    1a9a:	31 91       	ld	r19, Z+
    1a9c:	e2 0f       	add	r30, r18
    1a9e:	f3 1f       	adc	r31, r19
    1aa0:	ce 17       	cp	r28, r30
    1aa2:	df 07       	cpc	r29, r31
    1aa4:	69 f4       	brne	.+26     	; 0x1ac0 <free+0xaa>
    1aa6:	88 81       	ld	r24, Y
    1aa8:	99 81       	ldd	r25, Y+1	; 0x01
    1aaa:	28 0f       	add	r18, r24
    1aac:	39 1f       	adc	r19, r25
    1aae:	2e 5f       	subi	r18, 0xFE	; 254
    1ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab2:	fa 01       	movw	r30, r20
    1ab4:	31 83       	std	Z+1, r19	; 0x01
    1ab6:	20 83       	st	Z, r18
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	9b 81       	ldd	r25, Y+3	; 0x03
    1abc:	93 83       	std	Z+3, r25	; 0x03
    1abe:	82 83       	std	Z+2, r24	; 0x02
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	08 95       	ret

00001ac6 <realloc>:
    1ac6:	a0 e0       	ldi	r26, 0x00	; 0
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e8 e6       	ldi	r30, 0x68	; 104
    1acc:	fd e0       	ldi	r31, 0x0D	; 13
    1ace:	fd c0       	rjmp	.+506    	; 0x1cca <__prologue_saves__+0xc>
    1ad0:	8c 01       	movw	r16, r24
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	21 f4       	brne	.+8      	; 0x1ade <realloc+0x18>
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	f1 de       	rcall	.-542    	; 0x18bc <malloc>
    1ada:	8c 01       	movw	r16, r24
    1adc:	b6 c0       	rjmp	.+364    	; 0x1c4a <realloc+0x184>
    1ade:	9e ef       	ldi	r25, 0xFE	; 254
    1ae0:	e9 2e       	mov	r14, r25
    1ae2:	9f ef       	ldi	r25, 0xFF	; 255
    1ae4:	f9 2e       	mov	r15, r25
    1ae6:	e0 0e       	add	r14, r16
    1ae8:	f1 1e       	adc	r15, r17
    1aea:	58 01       	movw	r10, r16
    1aec:	a6 0e       	add	r10, r22
    1aee:	b7 1e       	adc	r11, r23
    1af0:	ae 14       	cp	r10, r14
    1af2:	bf 04       	cpc	r11, r15
    1af4:	08 f4       	brcc	.+2      	; 0x1af8 <realloc+0x32>
    1af6:	a7 c0       	rjmp	.+334    	; 0x1c46 <realloc+0x180>
    1af8:	8e ef       	ldi	r24, 0xFE	; 254
    1afa:	88 2e       	mov	r8, r24
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	98 2e       	mov	r9, r24
    1b00:	8a 0c       	add	r8, r10
    1b02:	9b 1c       	adc	r9, r11
    1b04:	e7 01       	movw	r28, r14
    1b06:	48 81       	ld	r20, Y
    1b08:	59 81       	ldd	r21, Y+1	; 0x01
    1b0a:	46 17       	cp	r20, r22
    1b0c:	57 07       	cpc	r21, r23
    1b0e:	b0 f0       	brcs	.+44     	; 0x1b3c <realloc+0x76>
    1b10:	45 30       	cpi	r20, 0x05	; 5
    1b12:	51 05       	cpc	r21, r1
    1b14:	08 f4       	brcc	.+2      	; 0x1b18 <realloc+0x52>
    1b16:	99 c0       	rjmp	.+306    	; 0x1c4a <realloc+0x184>
    1b18:	ca 01       	movw	r24, r20
    1b1a:	04 97       	sbiw	r24, 0x04	; 4
    1b1c:	86 17       	cp	r24, r22
    1b1e:	97 07       	cpc	r25, r23
    1b20:	08 f4       	brcc	.+2      	; 0x1b24 <realloc+0x5e>
    1b22:	93 c0       	rjmp	.+294    	; 0x1c4a <realloc+0x184>
    1b24:	42 50       	subi	r20, 0x02	; 2
    1b26:	50 40       	sbci	r21, 0x00	; 0
    1b28:	46 1b       	sub	r20, r22
    1b2a:	57 0b       	sbc	r21, r23
    1b2c:	f4 01       	movw	r30, r8
    1b2e:	51 83       	std	Z+1, r21	; 0x01
    1b30:	40 83       	st	Z, r20
    1b32:	79 83       	std	Y+1, r23	; 0x01
    1b34:	68 83       	st	Y, r22
    1b36:	c5 01       	movw	r24, r10
    1b38:	6e df       	rcall	.-292    	; 0x1a16 <free>
    1b3a:	87 c0       	rjmp	.+270    	; 0x1c4a <realloc+0x184>
    1b3c:	6b 01       	movw	r12, r22
    1b3e:	c4 1a       	sub	r12, r20
    1b40:	d5 0a       	sbc	r13, r21
    1b42:	e0 91 68 01 	lds	r30, 0x0168
    1b46:	f0 91 69 01 	lds	r31, 0x0169
    1b4a:	a0 e0       	ldi	r26, 0x00	; 0
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	c0 e0       	ldi	r28, 0x00	; 0
    1b50:	d0 e0       	ldi	r29, 0x00	; 0
    1b52:	42 c0       	rjmp	.+132    	; 0x1bd8 <realloc+0x112>
    1b54:	e8 15       	cp	r30, r8
    1b56:	f9 05       	cpc	r31, r9
    1b58:	a1 f5       	brne	.+104    	; 0x1bc2 <realloc+0xfc>
    1b5a:	20 81       	ld	r18, Z
    1b5c:	31 81       	ldd	r19, Z+1	; 0x01
    1b5e:	2c 15       	cp	r18, r12
    1b60:	3d 05       	cpc	r19, r13
    1b62:	78 f1       	brcs	.+94     	; 0x1bc2 <realloc+0xfc>
    1b64:	c9 01       	movw	r24, r18
    1b66:	02 96       	adiw	r24, 0x02	; 2
    1b68:	8c 15       	cp	r24, r12
    1b6a:	9d 05       	cpc	r25, r13
    1b6c:	a8 f0       	brcs	.+42     	; 0x1b98 <realloc+0xd2>
    1b6e:	4e 5f       	subi	r20, 0xFE	; 254
    1b70:	5f 4f       	sbci	r21, 0xFF	; 255
    1b72:	42 0f       	add	r20, r18
    1b74:	53 1f       	adc	r21, r19
    1b76:	e7 01       	movw	r28, r14
    1b78:	59 83       	std	Y+1, r21	; 0x01
    1b7a:	48 83       	st	Y, r20
    1b7c:	22 81       	ldd	r18, Z+2	; 0x02
    1b7e:	33 81       	ldd	r19, Z+3	; 0x03
    1b80:	10 97       	sbiw	r26, 0x00	; 0
    1b82:	29 f0       	breq	.+10     	; 0x1b8e <realloc+0xc8>
    1b84:	13 96       	adiw	r26, 0x03	; 3
    1b86:	3c 93       	st	X, r19
    1b88:	2e 93       	st	-X, r18
    1b8a:	12 97       	sbiw	r26, 0x02	; 2
    1b8c:	5e c0       	rjmp	.+188    	; 0x1c4a <realloc+0x184>
    1b8e:	30 93 69 01 	sts	0x0169, r19
    1b92:	20 93 68 01 	sts	0x0168, r18
    1b96:	59 c0       	rjmp	.+178    	; 0x1c4a <realloc+0x184>
    1b98:	22 50       	subi	r18, 0x02	; 2
    1b9a:	30 40       	sbci	r19, 0x00	; 0
    1b9c:	2c 19       	sub	r18, r12
    1b9e:	3d 09       	sbc	r19, r13
    1ba0:	31 83       	std	Z+1, r19	; 0x01
    1ba2:	20 83       	st	Z, r18
    1ba4:	10 97       	sbiw	r26, 0x00	; 0
    1ba6:	29 f0       	breq	.+10     	; 0x1bb2 <realloc+0xec>
    1ba8:	13 96       	adiw	r26, 0x03	; 3
    1baa:	fc 93       	st	X, r31
    1bac:	ee 93       	st	-X, r30
    1bae:	12 97       	sbiw	r26, 0x02	; 2
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <realloc+0xf4>
    1bb2:	f0 93 69 01 	sts	0x0169, r31
    1bb6:	e0 93 68 01 	sts	0x0168, r30
    1bba:	f7 01       	movw	r30, r14
    1bbc:	71 83       	std	Z+1, r23	; 0x01
    1bbe:	60 83       	st	Z, r22
    1bc0:	44 c0       	rjmp	.+136    	; 0x1c4a <realloc+0x184>
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	c8 17       	cp	r28, r24
    1bc8:	d9 07       	cpc	r29, r25
    1bca:	08 f4       	brcc	.+2      	; 0x1bce <realloc+0x108>
    1bcc:	ec 01       	movw	r28, r24
    1bce:	df 01       	movw	r26, r30
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	9c 01       	movw	r18, r24
    1bd6:	f9 01       	movw	r30, r18
    1bd8:	30 97       	sbiw	r30, 0x00	; 0
    1bda:	09 f0       	breq	.+2      	; 0x1bde <realloc+0x118>
    1bdc:	bb cf       	rjmp	.-138    	; 0x1b54 <realloc+0x8e>
    1bde:	40 0f       	add	r20, r16
    1be0:	51 1f       	adc	r21, r17
    1be2:	80 91 66 01 	lds	r24, 0x0166
    1be6:	90 91 67 01 	lds	r25, 0x0167
    1bea:	84 17       	cp	r24, r20
    1bec:	95 07       	cpc	r25, r21
    1bee:	e9 f4       	brne	.+58     	; 0x1c2a <realloc+0x164>
    1bf0:	c6 17       	cp	r28, r22
    1bf2:	d7 07       	cpc	r29, r23
    1bf4:	d0 f4       	brcc	.+52     	; 0x1c2a <realloc+0x164>
    1bf6:	20 91 54 01 	lds	r18, 0x0154
    1bfa:	30 91 55 01 	lds	r19, 0x0155
    1bfe:	21 15       	cp	r18, r1
    1c00:	31 05       	cpc	r19, r1
    1c02:	41 f4       	brne	.+16     	; 0x1c14 <realloc+0x14e>
    1c04:	2d b7       	in	r18, 0x3d	; 61
    1c06:	3e b7       	in	r19, 0x3e	; 62
    1c08:	80 91 50 01 	lds	r24, 0x0150
    1c0c:	90 91 51 01 	lds	r25, 0x0151
    1c10:	28 1b       	sub	r18, r24
    1c12:	39 0b       	sbc	r19, r25
    1c14:	a2 16       	cp	r10, r18
    1c16:	b3 06       	cpc	r11, r19
    1c18:	b0 f4       	brcc	.+44     	; 0x1c46 <realloc+0x180>
    1c1a:	b0 92 67 01 	sts	0x0167, r11
    1c1e:	a0 92 66 01 	sts	0x0166, r10
    1c22:	e7 01       	movw	r28, r14
    1c24:	79 83       	std	Y+1, r23	; 0x01
    1c26:	68 83       	st	Y, r22
    1c28:	10 c0       	rjmp	.+32     	; 0x1c4a <realloc+0x184>
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	47 de       	rcall	.-882    	; 0x18bc <malloc>
    1c2e:	ec 01       	movw	r28, r24
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	49 f0       	breq	.+18     	; 0x1c46 <realloc+0x180>
    1c34:	f7 01       	movw	r30, r14
    1c36:	40 81       	ld	r20, Z
    1c38:	51 81       	ldd	r21, Z+1	; 0x01
    1c3a:	b8 01       	movw	r22, r16
    1c3c:	0f d0       	rcall	.+30     	; 0x1c5c <memcpy>
    1c3e:	c8 01       	movw	r24, r16
    1c40:	ea de       	rcall	.-556    	; 0x1a16 <free>
    1c42:	8e 01       	movw	r16, r28
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <realloc+0x184>
    1c46:	00 e0       	ldi	r16, 0x00	; 0
    1c48:	10 e0       	ldi	r17, 0x00	; 0
    1c4a:	c8 01       	movw	r24, r16
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	ec e0       	ldi	r30, 0x0C	; 12
    1c52:	57 c0       	rjmp	.+174    	; 0x1d02 <__epilogue_restores__+0xc>

00001c54 <abort>:
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	f8 94       	cli
    1c5a:	68 c0       	rjmp	.+208    	; 0x1d2c <_exit>

00001c5c <memcpy>:
    1c5c:	fb 01       	movw	r30, r22
    1c5e:	dc 01       	movw	r26, r24
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <memcpy+0xa>
    1c62:	01 90       	ld	r0, Z+
    1c64:	0d 92       	st	X+, r0
    1c66:	41 50       	subi	r20, 0x01	; 1
    1c68:	50 40       	sbci	r21, 0x00	; 0
    1c6a:	d8 f7       	brcc	.-10     	; 0x1c62 <memcpy+0x6>
    1c6c:	08 95       	ret

00001c6e <fputs>:
    1c6e:	ef 92       	push	r14
    1c70:	ff 92       	push	r15
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    1c7a:	7c 01       	movw	r14, r24
    1c7c:	8b 01       	movw	r16, r22
    1c7e:	db 01       	movw	r26, r22
    1c80:	13 96       	adiw	r26, 0x03	; 3
    1c82:	8c 91       	ld	r24, X
    1c84:	81 fd       	sbrc	r24, 1
    1c86:	03 c0       	rjmp	.+6      	; 0x1c8e <fputs+0x20>
    1c88:	cf ef       	ldi	r28, 0xFF	; 255
    1c8a:	df ef       	ldi	r29, 0xFF	; 255
    1c8c:	13 c0       	rjmp	.+38     	; 0x1cb4 <fputs+0x46>
    1c8e:	c0 e0       	ldi	r28, 0x00	; 0
    1c90:	d0 e0       	ldi	r29, 0x00	; 0
    1c92:	0b c0       	rjmp	.+22     	; 0x1caa <fputs+0x3c>
    1c94:	d8 01       	movw	r26, r16
    1c96:	18 96       	adiw	r26, 0x08	; 8
    1c98:	ed 91       	ld	r30, X+
    1c9a:	fc 91       	ld	r31, X
    1c9c:	19 97       	sbiw	r26, 0x09	; 9
    1c9e:	b8 01       	movw	r22, r16
    1ca0:	09 95       	icall
    1ca2:	89 2b       	or	r24, r25
    1ca4:	11 f0       	breq	.+4      	; 0x1caa <fputs+0x3c>
    1ca6:	cf ef       	ldi	r28, 0xFF	; 255
    1ca8:	df ef       	ldi	r29, 0xFF	; 255
    1caa:	f7 01       	movw	r30, r14
    1cac:	81 91       	ld	r24, Z+
    1cae:	7f 01       	movw	r14, r30
    1cb0:	88 23       	and	r24, r24
    1cb2:	81 f7       	brne	.-32     	; 0x1c94 <fputs+0x26>
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	e6 e0       	ldi	r30, 0x06	; 6
    1cbc:	28 c0       	rjmp	.+80     	; 0x1d0e <__epilogue_restores__+0x18>

00001cbe <__prologue_saves__>:
    1cbe:	2f 92       	push	r2
    1cc0:	3f 92       	push	r3
    1cc2:	4f 92       	push	r4
    1cc4:	5f 92       	push	r5
    1cc6:	6f 92       	push	r6
    1cc8:	7f 92       	push	r7
    1cca:	8f 92       	push	r8
    1ccc:	9f 92       	push	r9
    1cce:	af 92       	push	r10
    1cd0:	bf 92       	push	r11
    1cd2:	cf 92       	push	r12
    1cd4:	df 92       	push	r13
    1cd6:	ef 92       	push	r14
    1cd8:	ff 92       	push	r15
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	ca 1b       	sub	r28, r26
    1ce8:	db 0b       	sbc	r29, r27
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	09 94       	ijmp

00001cf6 <__epilogue_restores__>:
    1cf6:	2a 88       	ldd	r2, Y+18	; 0x12
    1cf8:	39 88       	ldd	r3, Y+17	; 0x11
    1cfa:	48 88       	ldd	r4, Y+16	; 0x10
    1cfc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cfe:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d00:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d02:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d04:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d06:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d08:	b9 84       	ldd	r11, Y+9	; 0x09
    1d0a:	c8 84       	ldd	r12, Y+8	; 0x08
    1d0c:	df 80       	ldd	r13, Y+7	; 0x07
    1d0e:	ee 80       	ldd	r14, Y+6	; 0x06
    1d10:	fd 80       	ldd	r15, Y+5	; 0x05
    1d12:	0c 81       	ldd	r16, Y+4	; 0x04
    1d14:	1b 81       	ldd	r17, Y+3	; 0x03
    1d16:	aa 81       	ldd	r26, Y+2	; 0x02
    1d18:	b9 81       	ldd	r27, Y+1	; 0x01
    1d1a:	ce 0f       	add	r28, r30
    1d1c:	d1 1d       	adc	r29, r1
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	ed 01       	movw	r28, r26
    1d2a:	08 95       	ret

00001d2c <_exit>:
    1d2c:	f8 94       	cli

00001d2e <__stop_program>:
    1d2e:	ff cf       	rjmp	.-2      	; 0x1d2e <__stop_program>
